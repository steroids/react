{
    "interfaces": {
        "IList": {
            "name": "IList",
            "moduleName": "actions/list",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "condition",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isFetched",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isRemote",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Array",
                    "example": null
                },
                {
                    "name": "layoutAttribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "loadMore",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "meta",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "pageAttribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "pageSizeAttribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "scope",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "sortAttribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Array",
                    "example": null
                },
                {
                    "name": "total",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                }
            ]
        },
        "IShowNotificationParameters": {
            "name": "IShowNotificationParameters",
            "moduleName": "actions/notifications",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"top-right\" | \"bottom-right\" | \"top-left\" | \"bottom-left\" | string",
                    "example": null
                },
                {
                    "name": "timeOut",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                }
            ]
        },
        "Model": {
            "name": "Model",
            "moduleName": "components/MetaComponent",
            "title": "Мета информация о моделе",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "ModelAttribute": {
            "name": "ModelAttribute",
            "moduleName": "components/MetaComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IApplicationHocConfig": {
            "name": "IApplicationHocConfig",
            "moduleName": "hoc/application",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "components",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onInit",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                }
            ]
        },
        "IApplicationHocInput": {
            "name": "IApplicationHocInput",
            "moduleName": "hoc/application",
            "title": "Application HOC",
            "description": "Обертка над корневым компонентом приложения, используется только в `Application.tsx`. Добавляет через React Context\nкомпоненты приложения и конфигурирует их.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IApplicationHocOutput": {
            "name": "IApplicationHocOutput",
            "moduleName": "hoc/application",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IBemHocInput": {
            "name": "IBemHocInput",
            "moduleName": "hoc/bem",
            "title": "Bem HOC",
            "description": "Прокидывает утилиту `bem` для правильной генерации CSS классов по методологии БЭМ (блок, элемент, модификатор)",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IBemHocOutput": {
            "name": "IBemHocOutput",
            "moduleName": "hoc/bem",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IComponentsHocOutput"
            ],
            "properties": [
                {
                    "name": "bem",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{block: null, element: null} | any",
                    "example": null
                }
            ]
        },
        "IBemHocPrivateProps": {
            "name": "IBemHocPrivateProps",
            "moduleName": "hoc/bem",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IComponentsHocOutput"
            ],
            "properties": []
        },
        "IComponents": {
            "name": "IComponents",
            "moduleName": "hoc/components",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "clientStorage",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "html",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "http",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "locale",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "pushNotification",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "resource",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "store",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "ui",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "ws",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IComponentsHocInput": {
            "name": "IComponentsHocInput",
            "moduleName": "hoc/components",
            "title": "Components HOC",
            "description": "Прокидывает в пропсы компоненты приложения. Ключ соответствует названию компонента, объявленного при инициализации\nприложения (см. `Application.tsx`)",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IComponentsHocOutput": {
            "name": "IComponentsHocOutput",
            "moduleName": "hoc/components",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IComponents"
            ],
            "properties": [
                {
                    "name": "clientStorage",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "components",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IComponents",
                    "example": null
                },
                {
                    "name": "html",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "http",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "locale",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "pushNotification",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "resource",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "store",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "ui",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "ws",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IConnectHocInput": {
            "name": "IConnectHocInput",
            "moduleName": "hoc/connect",
            "title": "Connect HOC",
            "description": "Обертка над `connect()` из `react-redux` для упрощения импорта.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IConnectHocOutput": {
            "name": "IConnectHocOutput",
            "moduleName": "hoc/connect",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Dispatch",
                    "example": null
                }
            ]
        },
        "IDataProviderHocInput": {
            "name": "IDataProviderHocInput",
            "moduleName": "hoc/dataProvider",
            "title": "Data Provider HOC",
            "description": "Подготавливает коллекции данных для полей форм. Используется в выпадающих списках, чекбоксах, автокомплитах и т.п.\nПозволяет передать данные несколькими видами (enum, list, object, data provider), а на выход предоставит единый вид\nданных. Поддерживает подгрузку данных из вне (при autocomplete), поиск по данным, множественный выбор.",
            "tags": {},
            "defaultProps": {
                "valueItemKey": "id",
                "autoComplete": {
                    "delay": 100,
                    "enable": false,
                    "minLength": 2
                }
            },
            "extends": [],
            "properties": [
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | {delay: number, enable: boolean, minLength: number}",
                    "example": null
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{action: string, onSearch: {}, params: object}",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormInputType",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {constructor: null} | string | number | {id: string | number | boolean, label: string | any}[]",
                    "example": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "onSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "selectFirst",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueItemKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "IDataProviderHocOutput": {
            "name": "IDataProviderHocOutput",
            "moduleName": "hoc/dataProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "valueItemKey": "id",
                "autoComplete": {
                    "delay": 100,
                    "enable": false,
                    "minLength": 2
                }
            },
            "extends": [],
            "properties": [
                {
                    "name": "hoveredItem",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: number | string | boolean, label: string}[] | any",
                    "example": null
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onItemMouseOver",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onItemRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onOpen",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onSearch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "selectedItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IFetchHocInput": {
            "name": "IFetchHocInput",
            "moduleName": "hoc/fetch",
            "title": "Fetch HOC",
            "description": "Используется для подгрузки данных с бекенда перед рендером компонента, на котором он применяется. На вход ему передается\nодин или несколько объектов конфигураций (id, key, url, method, params, ...), которые описывают откуда нужно подтянуть данные.\n\nВ процесс загрузки HOC будет отображать \"Загрузка...\", а после уже отрендерит компонент, передав данные в указанный\nключ `key`. Все данные сохраняются в Redux Store, что позволяет избежать дополнительных запросов при использовании SSR.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "navigationData",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "routeParams",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                }
            ]
        },
        "IFetchHocOutput": {
            "name": "IFetchHocOutput",
            "moduleName": "hoc/fetch",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "fetchRefresh",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "fetchUpdate",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                }
            ]
        },
        "IFieldHocConfig": {
            "name": "IFieldHocConfig",
            "moduleName": "hoc/field",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "appendPrefix",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "attributes",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "FormLayout",
                    "example": null
                },
                {
                    "name": "list",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IFieldHocInput": {
            "name": "IFieldHocInput",
            "moduleName": "hoc/field",
            "title": "Field HOC",
            "description": "Обертка над полями форм. Если создаете свой элемент формы - добавьте декоратор с этим HOC.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IThemeHocInput"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "isVisible"
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "string | boolean | any",
                    "example": "Visible"
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormLayout",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {} | any",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен модификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ]
        },
        "IFieldHocOutput": {
            "name": "IFieldHocOutput",
            "moduleName": "hoc/field",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFormHocOutput",
                "IThemeHocOutput"
            ],
            "properties": [
                {
                    "name": "fieldId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormInputType",
                    "example": null
                },
                {
                    "name": "isInvalid",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IFileHocInput": {
            "name": "IFileHocInput",
            "moduleName": "hoc/file",
            "title": "File HOC",
            "description": "Компонент для асинхронной загрузки файлов на сервер, используется в `FileField`",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "backendUrl",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesExactSize",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesOnly",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesProcessor",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "initialFiles",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormInputType",
                    "example": null
                },
                {
                    "name": "mimeTypes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "uploader",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IFileHocOutput": {
            "name": "IFileHocOutput",
            "moduleName": "hoc/file",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "files",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "onBrowse",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "uploader",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IFormContext": {
            "name": "IFormContext",
            "moduleName": "hoc/form",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormLayout",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                }
            ]
        },
        "IFormHocInput": {
            "name": "IFormHocInput",
            "moduleName": "hoc/form",
            "title": "Form HOC",
            "description": "Получает из контекста данные формы (formId, model, prefix, layout, ..) и прокидывает их в качестве `props` в компонент.\nИспользуется во всех полях формы (`*Field.tsx`) для получения данных из контекста.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | React.ComponentType | Element",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | boolean | any",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormLayout",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {} | any",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IFormHocOutput": {
            "name": "IFormHocOutput",
            "moduleName": "hoc/form",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFormHocInput",
                "IFormContext"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | React.ComponentType | Element",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | boolean | any",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormLayout",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {} | any",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IFormSubmitHocInput": {
            "name": "IFormSubmitHocInput",
            "moduleName": "hoc/formSubmit",
            "title": "Form Submit HOC",
            "description": "Используется в `Form` для добавления обработчика `onSubmit`",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "autoSave",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onAfterSubmit",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onBeforeSubmit",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onComplete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onSubmit",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "validators",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IFormSubmitHocOutput": {
            "name": "IFormSubmitHocOutput",
            "moduleName": "hoc/formSubmit",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IHttpHocInput": {
            "name": "IHttpHocInput",
            "moduleName": "hoc/http",
            "title": "Http HOC",
            "description": "Обертка для асинхронного получения данных с бекенда. В отличии от `Fetch HOC`, он не хранит данные в Redux Store\nи не добавляет \"Загрузка...\" при запросе.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IHttpHocOutput": {
            "name": "IHttpHocOutput",
            "moduleName": "hoc/http",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "fetch",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                }
            ]
        },
        "ILayoutHocInput": {
            "name": "ILayoutHocInput",
            "moduleName": "hoc/layout",
            "title": "Layout HOC",
            "description": "Используется для макета (layout) приложения, добавляя в него данные авторизации и статуса рендера страницы.\nПередаваемый первым аргументом `initAction` будет вызываться каждый раз, когда необходимо обновить данные\nавторизации (первая загрузка страницы, логин/регистация и выход).",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "components",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IComponentsHocOutput",
                    "example": null
                },
                {
                    "name": "data",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "initializeCounter",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isInitialized",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "redirectPageId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "route",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRoute",
                    "example": null
                },
                {
                    "name": "user",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{role: string}",
                    "example": null
                }
            ]
        },
        "ILayoutHocOutput": {
            "name": "ILayoutHocOutput",
            "moduleName": "hoc/layout",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "data",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "http",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "isInitialized",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "renderError",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "route",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IRouteItem",
                    "example": null
                },
                {
                    "name": "status",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "user",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IListHocInput": {
            "name": "IListHocInput",
            "moduleName": "hoc/list",
            "title": "List HOC",
            "description": "Добавляет массу возможностей для взаимодействия с коллекциями. Коллекции можно получать как с бекенда, так и передавать\nстатичным массивом. В обоих случаях поддерживается пагинация, сортировка, фильтрация данных. Выбранные фильтры\nсинхронизируются с адресной строкой.",
            "tags": {},
            "defaultProps": {
                "actionMethod": "get",
                "autoDestroy": true,
                "primaryKey": "id",
                "addressBar": {
                    "enable": false,
                    "useHash": false
                },
                "empty": {
                    "enable": true,
                    "text": "Записи не найдены"
                },
                "layout": {
                    "attribute": "layout",
                    "defaultValue": null,
                    "enable": false,
                    "position": "top"
                },
                "pagination": {
                    "aroundCount": 3,
                    "attribute": "page",
                    "defaultValue": 1,
                    "enable": true,
                    "loadMore": false,
                    "position": "bottom"
                },
                "paginationSize": {
                    "attribute": "pageSize",
                    "defaultValue": 50,
                    "enable": false,
                    "position": "top",
                    "sizes": [
                        30,
                        50,
                        100
                    ]
                },
                "sort": {
                    "attribute": "sort",
                    "defaultValue": null,
                    "enable": false
                }
            },
            "extends": [],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "HttpMethod",
                    "example": null
                },
                {
                    "name": "addressBar",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | IAddressBar",
                    "example": null
                },
                {
                    "name": "autoDestroy",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "empty",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | string | IEmptyProps",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Array",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ILayoutProps",
                    "example": null
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Model",
                    "example": null
                },
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "pagination",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | IPaginationProps",
                    "example": null
                },
                {
                    "name": "paginationSize",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | IPaginationSizeProps",
                    "example": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "scope",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "searchForm",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFormProps",
                    "example": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Model",
                    "example": null
                },
                {
                    "name": "sort",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ISortProps",
                    "example": null
                }
            ]
        },
        "IListHocOutput": {
            "name": "IListHocOutput",
            "moduleName": "hoc/list",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "actionMethod": "get",
                "autoDestroy": true,
                "primaryKey": "id",
                "addressBar": {
                    "enable": false,
                    "useHash": false
                },
                "empty": {
                    "enable": true,
                    "text": "Записи не найдены"
                },
                "layout": {
                    "attribute": "layout",
                    "defaultValue": null,
                    "enable": false,
                    "position": "top"
                },
                "pagination": {
                    "aroundCount": 3,
                    "attribute": "page",
                    "defaultValue": 1,
                    "enable": true,
                    "loadMore": false,
                    "position": "bottom"
                },
                "paginationSize": {
                    "attribute": "pageSize",
                    "defaultValue": 50,
                    "enable": false,
                    "position": "top",
                    "sizes": [
                        30,
                        50,
                        100
                    ]
                },
                "sort": {
                    "attribute": "sort",
                    "defaultValue": null,
                    "enable": false
                }
            },
            "extends": [],
            "properties": [
                {
                    "name": "emptyNode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "layoutNode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode",
                    "example": null
                },
                {
                    "name": "layoutPosition",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ListControlPosition",
                    "example": null
                },
                {
                    "name": "layoutSelected",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "PrimaryKey",
                    "example": null
                },
                {
                    "name": "outsideSearchFormNode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode",
                    "example": null
                },
                {
                    "name": "paginationNode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode",
                    "example": null
                },
                {
                    "name": "paginationPosition",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ListControlPosition",
                    "example": null
                },
                {
                    "name": "paginationSizeNode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode",
                    "example": null
                },
                {
                    "name": "paginationSizePosition",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ListControlPosition",
                    "example": null
                }
            ]
        },
        "IListHocPrivateProps": {
            "name": "IListHocPrivateProps",
            "moduleName": "hoc/list",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "actionMethod": "get",
                "autoDestroy": true,
                "primaryKey": "id",
                "addressBar": {
                    "enable": false,
                    "useHash": false
                },
                "empty": {
                    "enable": true,
                    "text": "Записи не найдены"
                },
                "layout": {
                    "attribute": "layout",
                    "defaultValue": null,
                    "enable": false,
                    "position": "top"
                },
                "pagination": {
                    "aroundCount": 3,
                    "attribute": "page",
                    "defaultValue": 1,
                    "enable": true,
                    "loadMore": false,
                    "position": "bottom"
                },
                "paginationSize": {
                    "attribute": "pageSize",
                    "defaultValue": 50,
                    "enable": false,
                    "position": "top",
                    "sizes": [
                        30,
                        50,
                        100
                    ]
                },
                "sort": {
                    "attribute": "sort",
                    "defaultValue": null,
                    "enable": false
                }
            },
            "extends": [
                "IConnectHocOutput",
                "IComponentsHocOutput"
            ],
            "properties": [
                {
                    "name": "_addressBar",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IAddressBar",
                    "example": null
                },
                {
                    "name": "_empty",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IEmptyProps",
                    "example": null
                },
                {
                    "name": "_layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ILayoutProps",
                    "example": null
                },
                {
                    "name": "_model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Model",
                    "example": null
                },
                {
                    "name": "_pagination",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IPaginationProps",
                    "example": null
                },
                {
                    "name": "_paginationSize",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IPaginationSizeProps",
                    "example": null
                },
                {
                    "name": "_searchModel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Model",
                    "example": null
                },
                {
                    "name": "_sort",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ISortProps",
                    "example": null
                },
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Dispatch",
                    "example": null
                },
                {
                    "name": "formValues",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "list",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IList",
                    "example": null
                },
                {
                    "name": "location",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{hash: string, pathname: string, search: string}",
                    "example": null
                },
                {
                    "name": "searchFormValues",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "INormalizeHoOutput": {
            "name": "INormalizeHoOutput",
            "moduleName": "hoc/normalize",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "INormalizeHocConfig": {
            "name": "INormalizeHocConfig",
            "moduleName": "hoc/normalize",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "fromKey",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "normalizer",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "toKey",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "INormalizeHocInput": {
            "name": "INormalizeHocInput",
            "moduleName": "hoc/normalize",
            "title": "Normalize HOC",
            "description": "Приводит данные к единому виду. Используется, когда данные в `props` могут быть записаны в нескольких форматах. На\nвыходе в отдельный `props` будут прокидываться \"нормализованные\" данные. При обновлении поля с оригинальными данными,\nпроцесс нормализации будет повторяться.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IPropsHoOutput": {
            "name": "IPropsHoOutput",
            "moduleName": "hoc/props",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IPropsHocInput": {
            "name": "IPropsHocInput",
            "moduleName": "hoc/props",
            "title": "Props HOC",
            "description": "Добавляет на выход переданные первым аргументом пропсы. Может использоваться, например, при необходимости передачи\nпропсов для ниже стоящих декораторов.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IScreenHoOutput": {
            "name": "IScreenHoOutput",
            "moduleName": "hoc/screen",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IScreenHocInput": {
            "name": "IScreenHocInput",
            "moduleName": "hoc/screen",
            "title": "Screen HOC",
            "description": "Компонент подписывается на изменения размера экрана и обновляет ее в Redux Store.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IThemeContext": {
            "name": "IThemeContext",
            "moduleName": "hoc/theme",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Укажите `true` для переключения на темную тему",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер элемента",
                    "required": false,
                    "type": "Size",
                    "example": null
                }
            ]
        },
        "IThemeHocInput": {
            "name": "IThemeHocInput",
            "moduleName": "hoc/theme",
            "title": "Theme HOC",
            "description": "Получает данные темы (size, dark) из контекста и прокидывает их в `props`. Полученные данные используются\nдля стилизации компонентов.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IThemeContext"
            ],
            "properties": [
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Укажите `true` для переключения на темную тему",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер элемента",
                    "required": false,
                    "type": "Size",
                    "example": null
                }
            ]
        },
        "IThemeHocOutput": {
            "name": "IThemeHocOutput",
            "moduleName": "hoc/theme",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IThemeHocInput"
            ],
            "properties": [
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Укажите `true` для переключения на темную тему",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер элемента",
                    "required": false,
                    "type": "Size",
                    "example": null
                }
            ]
        },
        "AxiosAdapter": {
            "name": "AxiosAdapter",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "AxiosBasicCredentials": {
            "name": "AxiosBasicCredentials",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "password",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "username",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "AxiosError": {
            "name": "AxiosError",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "Error",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ErrorConstructor",
                    "example": null
                },
                {
                    "name": "code",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "config",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "AxiosRequestConfig",
                    "example": null
                },
                {
                    "name": "isAxiosError",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "message",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "name",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "request",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "response",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "AxiosResponse",
                    "example": null
                },
                {
                    "name": "stack",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "toJSON",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                }
            ]
        },
        "AxiosInstance": {
            "name": "AxiosInstance",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "defaults",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "AxiosRequestConfig",
                    "example": null
                },
                {
                    "name": "interceptors",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{request: AxiosInterceptorManager, response: AxiosInterceptorManager}",
                    "example": null
                }
            ]
        },
        "AxiosInterceptorManager": {
            "name": "AxiosInterceptorManager",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "AxiosPromise": {
            "name": "AxiosPromise",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "Promise",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "PromiseConstructor",
                    "example": null
                },
                {
                    "name": "[Symbol.toStringTag]",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "AxiosProxyConfig": {
            "name": "AxiosProxyConfig",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "auth",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{password: string, username: string}",
                    "example": null
                },
                {
                    "name": "host",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "port",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "protocol",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "AxiosRequestConfig": {
            "name": "AxiosRequestConfig",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "adapter",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "AxiosAdapter",
                    "example": null
                },
                {
                    "name": "auth",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "AxiosBasicCredentials",
                    "example": null
                },
                {
                    "name": "baseURL",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "cancelToken",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CancelToken",
                    "example": null
                },
                {
                    "name": "data",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "headers",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "httpAgent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "httpsAgent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "maxContentLength",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "maxRedirects",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "method",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Method",
                    "example": null
                },
                {
                    "name": "onDownloadProgress",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onUploadProgress",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "params",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "paramsSerializer",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "proxy",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "AxiosProxyConfig | false",
                    "example": null
                },
                {
                    "name": "responseType",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ResponseType",
                    "example": null
                },
                {
                    "name": "socketPath",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | null",
                    "example": null
                },
                {
                    "name": "timeout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "timeoutErrorMessage",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "transformRequest",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "AxiosTransformer | AxiosTransformer[]",
                    "example": null
                },
                {
                    "name": "transformResponse",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "AxiosTransformer | AxiosTransformer[]",
                    "example": null
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "validateStatus",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "withCredentials",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "xsrfCookieName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "xsrfHeaderName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "AxiosResponse": {
            "name": "AxiosResponse",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "config",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "AxiosRequestConfig",
                    "example": null
                },
                {
                    "name": "data",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "T",
                    "example": null
                },
                {
                    "name": "headers",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "request",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "status",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "statusText",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "AxiosStatic": {
            "name": "AxiosStatic",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "AxiosInstance"
            ],
            "properties": [
                {
                    "name": "Cancel",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "CancelStatic",
                    "example": null
                },
                {
                    "name": "CancelToken",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "CancelTokenStatic",
                    "example": null
                },
                {
                    "name": "defaults",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "AxiosRequestConfig",
                    "example": null
                },
                {
                    "name": "interceptors",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{request: AxiosInterceptorManager, response: AxiosInterceptorManager}",
                    "example": null
                }
            ]
        },
        "AxiosTransformer": {
            "name": "AxiosTransformer",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "Cancel": {
            "name": "Cancel",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "message",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "CancelStatic": {
            "name": "CancelStatic",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "CancelToken": {
            "name": "CancelToken",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "promise",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Promise",
                    "example": null
                },
                {
                    "name": "reason",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Cancel",
                    "example": null
                }
            ]
        },
        "CancelTokenSource": {
            "name": "CancelTokenSource",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "cancel",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Canceler",
                    "example": null
                },
                {
                    "name": "token",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "CancelToken",
                    "example": null
                }
            ]
        },
        "CancelTokenStatic": {
            "name": "CancelTokenStatic",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "Canceler": {
            "name": "Canceler",
            "moduleName": "node_modules/axios/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "ClassDecorator": {
            "name": "ClassDecorator",
            "moduleName": "node_modules/conditional-decorator/dist/utils.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "MethodDecorator": {
            "name": "MethodDecorator",
            "moduleName": "node_modules/conditional-decorator/dist/utils.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "ParameterDecorator": {
            "name": "ParameterDecorator",
            "moduleName": "node_modules/conditional-decorator/dist/utils.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "PropertyDecorator": {
            "name": "PropertyDecorator",
            "moduleName": "node_modules/conditional-decorator/dist/utils.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "ThenPromise": {
            "name": "ThenPromise",
            "moduleName": "node_modules/promise/index.d",
            "title": "Represents the completion of an asynchronous operation",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "AfterModifier": {
            "name": "AfterModifier",
            "moduleName": "node_modules/react-day-picker/types/common.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "after",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                }
            ]
        },
        "BeforeAfterModifier": {
            "name": "BeforeAfterModifier",
            "moduleName": "node_modules/react-day-picker/types/common.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "after",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "before",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                }
            ]
        },
        "BeforeModifier": {
            "name": "BeforeModifier",
            "moduleName": "node_modules/react-day-picker/types/common.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "before",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                }
            ]
        },
        "ClassNames": {
            "name": "ClassNames",
            "moduleName": "node_modules/react-day-picker/types/common.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "body",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "caption",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "container",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "day",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "footer",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "interactionDisabled",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "month",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "months",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "navBar",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "navButtonInteractionDisabled",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "navButtonNext",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "navButtonPrev",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "outside",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "selected",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "today",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "todayButton",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "week",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "weekNumber",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "weekday",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "weekdays",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "weekdaysRow",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "wrapper",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "DayModifiers": {
            "name": "DayModifiers",
            "moduleName": "node_modules/react-day-picker/types/common.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "outside",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean | undefined",
                    "example": null
                },
                {
                    "name": "today",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean | undefined",
                    "example": null
                }
            ]
        },
        "DaysOfWeekModifier": {
            "name": "DaysOfWeekModifier",
            "moduleName": "node_modules/react-day-picker/types/common.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "daysOfWeek",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number[]",
                    "example": null
                }
            ]
        },
        "InputClassNames": {
            "name": "InputClassNames",
            "moduleName": "node_modules/react-day-picker/types/common.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "container",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "overlay",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "overlayWrapper",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "Modifiers": {
            "name": "Modifiers",
            "moduleName": "node_modules/react-day-picker/types/common.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "outside",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Modifier | Modifier[]",
                    "example": null
                },
                {
                    "name": "today",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Modifier | Modifier[]",
                    "example": null
                }
            ]
        },
        "RangeModifier": {
            "name": "RangeModifier",
            "moduleName": "node_modules/react-day-picker/types/common.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "from",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "to",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                }
            ]
        },
        "CaptionElementProps": {
            "name": "CaptionElementProps",
            "moduleName": "node_modules/react-day-picker/types/props.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "classNames",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ClassNames",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "locale",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "localeUtils",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "LocaleUtils",
                    "example": null
                },
                {
                    "name": "months",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.MouseEventHandler",
                    "example": null
                }
            ]
        },
        "DayPickerInputProps": {
            "name": "DayPickerInputProps",
            "moduleName": "node_modules/react-day-picker/types/props.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "classNames",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "InputClassNames",
                    "example": null
                },
                {
                    "name": "clickUnselectsDay",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "dayPickerProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "DayPickerProps",
                    "example": null
                },
                {
                    "name": "format",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "hideOnDayClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "keepFocus",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "overlayComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "showOverlay",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | Date",
                    "example": null
                }
            ]
        },
        "DayPickerProps": {
            "name": "DayPickerProps",
            "moduleName": "node_modules/react-day-picker/types/props.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "canChangeMonth",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "captionElement",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactElement | ComponentClass | React.SFC",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "classNames",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ClassNames",
                    "example": null
                },
                {
                    "name": "containerProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.DetailedHTMLProps",
                    "example": null
                },
                {
                    "name": "dir",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabledDays",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Modifier | Modifier[]",
                    "example": null
                },
                {
                    "name": "enableOutsideDaysClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "firstDayOfWeek",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "fixedWeeks",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "fromMonth",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "initialMonth",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "labels",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{nextMonth: string, previousMonth: string}",
                    "example": null
                },
                {
                    "name": "locale",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "localeUtils",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "LocaleUtils",
                    "example": null
                },
                {
                    "name": "modifiers",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Partial",
                    "example": null
                },
                {
                    "name": "modifiersStyles",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "month",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "months",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "navbarElement",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactElement | ComponentClass | React.SFC",
                    "example": null
                },
                {
                    "name": "numberOfMonths",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "pagedNavigation",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "reverseMonths",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "selectedDays",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Modifier | Modifier[]",
                    "example": null
                },
                {
                    "name": "showOutsideDays",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showWeekDays",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showWeekNumbers",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "toMonth",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "todayButton",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "weekdayElement",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactElement | ComponentClass | React.SFC",
                    "example": null
                },
                {
                    "name": "weekdaysLong",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "weekdaysShort",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                }
            ]
        },
        "NavbarElementProps": {
            "name": "NavbarElementProps",
            "moduleName": "node_modules/react-day-picker/types/props.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "classNames",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ClassNames",
                    "example": null
                },
                {
                    "name": "dir",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "labels",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{nextMonth: string, previousMonth: string}",
                    "example": null
                },
                {
                    "name": "locale",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "localeUtils",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "LocaleUtils",
                    "example": null
                },
                {
                    "name": "month",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "nextMonth",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "previousMonth",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "showNextButton",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showPreviousButton",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "WeekdayElementProps": {
            "name": "WeekdayElementProps",
            "moduleName": "node_modules/react-day-picker/types/props.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "locale",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "localeUtils",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "LocaleUtils",
                    "example": null
                },
                {
                    "name": "weekday",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "weekdaysLong",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "weekdaysShort",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                }
            ]
        },
        "DateUtils": {
            "name": "DateUtils",
            "moduleName": "node_modules/react-day-picker/types/utils.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "LocaleUtils": {
            "name": "LocaleUtils",
            "moduleName": "node_modules/react-day-picker/types/utils.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "ModifiersUtils": {
            "name": "ModifiersUtils",
            "moduleName": "node_modules/react-day-picker/types/utils.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "Action": {
            "name": "Action",
            "moduleName": "node_modules/redux/index.d",
            "title": "An *action* is a plain object that represents an intention to change the",
            "description": "state. Actions are the only way to get data into the store. Any data,\nwhether from UI events, network callbacks, or other sources such as\nWebSockets needs to eventually be dispatched as actions.\n\nActions must have a `type` field that indicates the type of action being\nperformed. Types can be defined as constants and imported from another\nmodule. It's better to use strings for `type` than Symbols because strings\nare serializable.\n\nOther than `type`, the structure of an action object is really up to you.\nIf you're interested, check out Flux Standard Action for recommendations on\nhow actions should be constructed.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "T",
                    "example": null
                }
            ]
        },
        "ActionCreator": {
            "name": "ActionCreator",
            "moduleName": "node_modules/redux/index.d",
            "title": "An *action creator* is, quite simply, a function that creates an action. Do",
            "description": "not confuse the two terms—again, an action is a payload of information, and\nan action creator is a factory that creates an action.\n\nCalling an action creator only produces an action, but does not dispatch\nit. You need to call the store's `dispatch` function to actually cause the\nmutation. Sometimes we say *bound action creators* to mean functions that\ncall an action creator and immediately dispatch its result to a specific\nstore instance.\n\nIf an action creator needs to read the current state, perform an API call,\nor cause a side effect, like a routing transition, it should return an\nasync action instead of an action.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "ActionCreatorsMapObject": {
            "name": "ActionCreatorsMapObject",
            "moduleName": "node_modules/redux/index.d",
            "title": "Object whose values are action creator functions.",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "AnyAction": {
            "name": "AnyAction",
            "moduleName": "node_modules/redux/index.d",
            "title": "An Action type which accepts any other properties.",
            "description": "This is mainly for the use of the `Reducer` type.\nThis is not part of `Action` itself to prevent types that extend `Action` from\nhaving an index signature.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Action"
            ],
            "properties": [
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "T",
                    "example": null
                }
            ]
        },
        "Dispatch": {
            "name": "Dispatch",
            "moduleName": "node_modules/redux/index.d",
            "title": "A *dispatching function* (or simply *dispatch function*) is a function that",
            "description": "accepts an action or an async action; it then may or may not dispatch one\nor more actions to the store.\n\nWe must distinguish between dispatching functions in general and the base\n`dispatch` function provided by the store instance without any middleware.\n\nThe base dispatch function *always* synchronously sends an action to the\nstore's reducer, along with the previous state returned by the store, to\ncalculate a new state. It expects actions to be plain objects ready to be\nconsumed by the reducer.\n\nMiddleware wraps the base dispatch function. It allows the dispatch\nfunction to handle async actions in addition to actions. Middleware may\ntransform, delay, ignore, or otherwise interpret actions or async actions\nbefore passing them to the next middleware.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "Middleware": {
            "name": "Middleware",
            "moduleName": "node_modules/redux/index.d",
            "title": "A middleware is a higher-order function that composes a dispatch function",
            "description": "to return a new dispatch function. It often turns async actions into\nactions.\n\nMiddleware is composable using function composition. It is useful for\nlogging actions, performing side effects like routing, or turning an\nasynchronous API call into a series of synchronous actions.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "MiddlewareAPI": {
            "name": "MiddlewareAPI",
            "moduleName": "node_modules/redux/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "D",
                    "example": null
                }
            ]
        },
        "Store": {
            "name": "Store",
            "moduleName": "node_modules/redux/index.d",
            "title": "A store is an object that holds the application's state tree.",
            "description": "There should only be a single store in a Redux app, as the composition\nhappens on the reducer level.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "Dispatches an action. It is the only way to trigger a state change.\n\nThe `reducer` function, used to create the store, will be called with the\ncurrent state tree and the given `action`. Its return value will be\nconsidered the **next** state of the tree, and the change listeners will\nbe notified.\n\nThe base implementation only supports plain object actions. If you want\nto dispatch a Promise, an Observable, a thunk, or something else, you\nneed to wrap your store creating function into the corresponding\nmiddleware. For example, see the documentation for the `redux-thunk`\npackage. Even the middleware will eventually dispatch plain object\nactions using this method.\n",
                    "required": true,
                    "type": "Dispatch",
                    "example": null
                }
            ]
        },
        "StoreCreator": {
            "name": "StoreCreator",
            "moduleName": "node_modules/redux/index.d",
            "title": "A store creator is a function that creates a Redux store. Like with",
            "description": "dispatching function, we must distinguish the base store creator,\n`createStore(reducer, preloadedState)` exported from the Redux package, from\nstore creators that are returned from the store enhancers.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "Unsubscribe": {
            "name": "Unsubscribe",
            "moduleName": "node_modules/redux/index.d",
            "title": "Function to remove listener added by `Store.subscribe()`.",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "Symbol": {
            "name": "Symbol",
            "moduleName": "node_modules/symbol-observable/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "[Symbol.observable]",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "symbol",
                    "example": null
                }
            ]
        },
        "IRoute": {
            "name": "IRoute",
            "moduleName": "reducers/router",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode",
                    "example": null
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "exact",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isNavVisible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isVisible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRoute[]",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "path",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "redirectTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "roles",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "strict",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "ICrudChildrenProps": {
            "name": "ICrudChildrenProps",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ICrudProps",
                "IConnectHocOutput",
                "IComponentsHocOutput"
            ],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "controlsGetter",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "create",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "crudId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "detail",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IDetailProps",
                    "example": null
                },
                {
                    "name": "detailComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Dispatch",
                    "example": null
                },
                {
                    "name": "form",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFormProps",
                    "example": null
                },
                {
                    "name": "formComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "grid",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IGridProps",
                    "example": null
                },
                {
                    "name": "gridComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "itemId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "PrimaryKey",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ICrudItem[] | {}",
                    "example": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"page\" | \"modal\"",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"id\" | string",
                    "example": null
                },
                {
                    "name": "restUrl",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "routeId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "update",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                }
            ]
        },
        "ICrudClickProps": {
            "name": "ICrudClickProps",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ICrudProps",
                "IConnectHocOutput",
                "IComponentsHocOutput"
            ],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "create",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "crudId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "detail",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IDetailProps",
                    "example": null
                },
                {
                    "name": "detailComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Dispatch",
                    "example": null
                },
                {
                    "name": "form",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFormProps",
                    "example": null
                },
                {
                    "name": "formComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "grid",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IGridProps",
                    "example": null
                },
                {
                    "name": "gridComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "itemId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "PrimaryKey",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ICrudItem[] | {}",
                    "example": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"page\" | \"modal\"",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"id\" | string",
                    "example": null
                },
                {
                    "name": "restUrl",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "routeId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "routeParams",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "update",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                }
            ]
        },
        "ICrudItem": {
            "name": "ICrudItem",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IControlItem",
                "'visible' | 'confirm' | 'onClick'>"
            ],
            "properties": [
                {
                    "name": "actionName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {}",
                    "example": null
                },
                {
                    "name": "controlsExclude",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "controlsInclude",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"page\" | \"modal\"",
                    "example": null
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "pkRequired",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | {}",
                    "example": null
                }
            ]
        },
        "ICrudProps": {
            "name": "ICrudProps",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "create",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "crudId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "detail",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IDetailProps",
                    "example": null
                },
                {
                    "name": "detailComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "form",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFormProps",
                    "example": null
                },
                {
                    "name": "formComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "grid",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IGridProps",
                    "example": null
                },
                {
                    "name": "gridComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ICrudItem[] | {}",
                    "example": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"page\" | \"modal\"",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"id\" | string",
                    "example": null
                },
                {
                    "name": "restUrl",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "update",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null
                }
            ]
        },
        "ICrudViewProps": {
            "name": "ICrudViewProps",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IControlItem[]",
                    "example": null
                }
            ]
        },
        "ICrudGeneratorProps": {
            "name": "ICrudGeneratorProps",
            "moduleName": "ui/crud/index",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ICrudProps"
            ],
            "properties": [
                {
                    "name": "enums",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "models",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "path",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "route",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRouteItem",
                    "example": null
                }
            ]
        },
        "IAutoCompleteFieldProps": {
            "name": "IAutoCompleteFieldProps",
            "moduleName": "ui/form/AutoCompleteField/AutoCompleteField",
            "title": "AutoComplete",
            "description": "Поле ввода текста с подсказками (auto-complete)",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IInputFieldProps",
                "IFieldHocInput",
                "IDataProviderHocInput"
            ],
            "properties": [
                {
                    "name": "searchOnFocus",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IAutoCompleteFieldViewProps": {
            "name": "IAutoCompleteFieldViewProps",
            "moduleName": "ui/form/AutoCompleteField/AutoCompleteField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput",
                "IDataProviderHocOutput"
            ],
            "properties": [
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{className: CssClassName, name: string, onBlur: {}, onChange: {}, onFocus: {}, type: string, value: string | number}",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: number | string | boolean, isHovered: boolean, isSelected: boolean, label: string, labelHighlighted: any[]}[]",
                    "example": null
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onItemMouseOver",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "selectedItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: number | string | boolean, label: string}[]",
                    "example": null
                }
            ]
        },
        "IButtonProps": {
            "name": "IButtonProps",
            "moduleName": "ui/form/Button/Button",
            "title": "Button",
            "description": "Кнопка или ссылка. Используется в интерфейсе для выполнения какого-либо действия по клику onClick),\nсмена страницы в рамках роутинга (goToRoute), переход по внешней ссылке (url) или отправки формы (submit form)",
            "tags": {},
            "defaultProps": {
                "block": false,
                "className": "",
                "color": "primary",
                "disabled": false,
                "outline": false,
                "resetFailedMs": 2000,
                "showLabelOnLoading": true,
                "submitting": false,
                "type": "button",
                "badge": {
                    "color": "secondary",
                    "enable": false,
                    "value": 0
                }
            },
            "extends": [
                "IThemeHocInput"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "ColorName",
                    "example": "success"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?"
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "string | any",
                    "example": "Save"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст кнопки или ссылки",
                    "required": false,
                    "type": "string | any",
                    "example": "Save"
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Выбор макета для распложения кнопки в форме. Если кнопка находится внутри `<Form>...</Form>`, то `layout` будет\nвзят из контекста формы и автоматически применен при отораженн. Для его отключения укажите `false`.\nДанное свойство так же может принимать объект, если нужно прокинуть дополнительные свойства в шаблон макета.\nПример: `{layout: 'horizontal', cols: [2,6]}`",
                    "required": false,
                    "type": "FormLayout",
                    "example": "horizontal"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Обработчик события нажатия. Для асинхронных событий вовзращяйте в обработчике `Promise`, тогда кнопка\nавтоматически будет переключаться в режим загрузки (`loading`) на время выполнения `Promise`.",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000"
                },
                {
                    "name": "showLabelOnLoading",
                    "decorators": [],
                    "description": "Должна ли показываться надпись на кнопке в состоянии загрузки",
                    "required": false,
                    "type": "Boolean",
                    "example": "true"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "object",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"button\" | \"a\"",
                    "example": null
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank"
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile"
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "object",
                    "example": "{userId: 52}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit"
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу, используется совместно с свойством `link`",
                    "required": false,
                    "type": "string",
                    "example": "https://ya.ru"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизациии отображения",
                    "required": false,
                    "type": "React.ComponentType",
                    "example": "MyCustomView"
                }
            ]
        },
        "IButtonViewProps": {
            "name": "IButtonViewProps",
            "moduleName": "ui/form/Button/Button",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "block": false,
                "className": "",
                "color": "primary",
                "disabled": false,
                "outline": false,
                "resetFailedMs": 2000,
                "showLabelOnLoading": true,
                "submitting": false,
                "type": "button",
                "badge": {
                    "color": "secondary",
                    "enable": false,
                    "value": 0
                }
            },
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "_badge",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IButtonBadge",
                    "example": null
                },
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "ColorName",
                    "example": "success"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?"
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "string | any",
                    "example": "Save"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст кнопки или ссылки",
                    "required": false,
                    "type": "string | any",
                    "example": "Save"
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000"
                },
                {
                    "name": "showLabelOnLoading",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "object",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "submitting",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"button\" | \"a\"",
                    "example": null
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank"
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile"
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "object",
                    "example": "{userId: 52}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit"
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизациии отображения",
                    "required": false,
                    "type": "React.ComponentType",
                    "example": "MyCustomView"
                }
            ]
        },
        "ICheckboxFieldProps": {
            "name": "ICheckboxFieldProps",
            "moduleName": "ui/form/CheckboxField/CheckboxField",
            "title": "CheckboxField",
            "description": "Одиночный чекбокс. Используется в формах для отметки булевого значения.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента <input />",
                    "required": false,
                    "type": "any",
                    "example": "{onKeyDown: ...}"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "ICheckboxFieldViewProps": {
            "name": "ICheckboxFieldViewProps",
            "moduleName": "ui/form/CheckboxField/CheckboxField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ICheckboxFieldProps",
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{checked: boolean, disabled: boolean, name: string, onChange: {}, type: string}",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "ICheckboxListFieldProps": {
            "name": "ICheckboxListFieldProps",
            "moduleName": "ui/form/CheckboxListField/CheckboxListField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput",
                "IDataProviderHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента <input />",
                    "required": false,
                    "type": "any",
                    "example": "{onKeyDown: ...}"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "ICheckboxListFieldViewProps": {
            "name": "ICheckboxListFieldViewProps",
            "moduleName": "ui/form/CheckboxListField/CheckboxListField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput",
                "IDataProviderHocOutput"
            ],
            "properties": [
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, name: string, type: string}",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: number | string | boolean, isHovered: boolean, isSelected: boolean, label: string}[]",
                    "example": null
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                }
            ]
        },
        "IDateFieldProps": {
            "name": "IDateFieldProps",
            "moduleName": "ui/form/DateField/DateField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "displayFormat",
                    "decorators": [],
                    "description": "Формат даты показываемый пользователю",
                    "required": false,
                    "type": "string",
                    "example": "DD.MM.YYYY"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "boolean | string",
                    "example": "calendar-day"
                },
                {
                    "name": "pickerProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "any",
                    "example": "Your text..."
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IDateFieldState": {
            "name": "IDateFieldState",
            "moduleName": "ui/form/DateField/DateField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "month",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                }
            ]
        },
        "IDateFieldViewProps": {
            "name": "IDateFieldViewProps",
            "moduleName": "ui/form/DateField/DateField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput",
                "IDateFieldProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "displayFormat",
                    "decorators": [],
                    "description": "Формат даты показываемый пользователю",
                    "required": false,
                    "type": "string",
                    "example": "DD.MM.YYYY"
                },
                {
                    "name": "formatDate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "boolean | string",
                    "example": "calendar-day"
                },
                {
                    "name": "localeUtils",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "name",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "parseDate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "pickerProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "any",
                    "example": "Your text..."
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IDateTimeFieldProps": {
            "name": "IDateTimeFieldProps",
            "moduleName": "ui/form/DateTimeField/DateTimeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "dateProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "displayDateFormat",
                    "decorators": [],
                    "description": "Формат даты показываемый пользователю",
                    "required": false,
                    "type": "string",
                    "example": "DD.MM.YYYY"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "timeFormat",
                    "decorators": [],
                    "description": "Формат времени",
                    "required": false,
                    "type": "string",
                    "example": "HH:mm"
                },
                {
                    "name": "timeProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueDateFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IDateTimeFieldViewProps": {
            "name": "IDateTimeFieldViewProps",
            "moduleName": "ui/form/DateTimeField/DateTimeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "dateField",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "timeField",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IDropDownFieldProps": {
            "name": "IDropDownFieldProps",
            "moduleName": "ui/form/DropDownField/DropDownField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput",
                "IDataProviderHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "noBorder",
                    "decorators": [],
                    "description": "Включает стиль без 'border'",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "searchPlaceholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "showReset",
                    "decorators": [],
                    "description": "Показать кнопку для сброса выбранного значения",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IDropDownFieldViewProps": {
            "name": "IDropDownFieldViewProps",
            "moduleName": "ui/form/DropDownField/DropDownField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput",
                "IDataProviderHocOutput"
            ],
            "properties": [
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: number | string | boolean, isHovered: boolean, isSelected: boolean, label: string}[]",
                    "example": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "noBorder",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onItemMouseOver",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onOpen",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onReset",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "searchAutoFocus",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "searchInputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{className: CssClassName, disabled: boolean, name: string, onChange: {}, placeholder: string, type: string, value: string | number}",
                    "example": null
                },
                {
                    "name": "selectedItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: number | string | boolean, label: string}[]",
                    "example": null
                },
                {
                    "name": "showReset",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IFieldPrivateProps": {
            "name": "IFieldPrivateProps",
            "moduleName": "ui/form/Field/Field",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFormHocOutput",
                "IConnectHocOutput",
                "IComponentsHocOutput"
            ],
            "properties": [
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Dispatch",
                    "example": null
                }
            ]
        },
        "IFieldProps": {
            "name": "IFieldProps",
            "moduleName": "ui/form/Field/Field",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": []
        },
        "IFieldLayoutProps": {
            "name": "IFieldLayoutProps",
            "moduleName": "ui/form/FieldLayout/FieldLayout",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "className": "",
                "required": false,
                "layout": {
                    "cols": [
                        3,
                        6
                    ],
                    "layout": "default"
                }
            },
            "extends": [],
            "properties": [
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "string | boolean | any",
                    "example": "Visible"
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormLayout",
                    "example": null
                },
                {
                    "name": "layoutView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true,\nто к названию будет добавлен модификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ]
        },
        "IFieldLayoutViewProps": {
            "name": "IFieldLayoutViewProps",
            "moduleName": "ui/form/FieldLayout/FieldLayout",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "className": "",
                "required": false,
                "layout": {
                    "cols": [
                        3,
                        6
                    ],
                    "layout": "default"
                }
            },
            "extends": [],
            "properties": [
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | boolean | any",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{className: string, cols: number[], label: boolean, layout: FormLayoutName | boolean}",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IFieldListItemViewProps": {
            "name": "IFieldListItemViewProps",
            "moduleName": "ui/form/FieldList/FieldList",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "className": "",
                "disabled": false,
                "enableKeyboardNavigation": true,
                "initialRowsCount": 1,
                "required": false,
                "showAdd": true,
                "showRemove": true
            },
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFieldListItem & {disabled: boolean, size: boolean}[]",
                    "example": null
                },
                {
                    "name": "onRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "renderField",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "rowIndex",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IFieldListProps": {
            "name": "IFieldListProps",
            "moduleName": "ui/form/FieldList/FieldList",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "className": "",
                "disabled": false,
                "enableKeyboardNavigation": true,
                "initialRowsCount": 1,
                "required": false,
                "showAdd": true,
                "showRemove": true
            },
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "enableKeyboardNavigation",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "initialRowsCount",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "initialValues",
                    "decorators": [],
                    "description": "Начальные значения в полях",
                    "required": false,
                    "type": "{}",
                    "example": "{name: 'Ivan', amount: 5}"
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "itemViewProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFieldListItem[]",
                    "example": null
                },
                {
                    "name": "showAdd",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IFieldListViewProps": {
            "name": "IFieldListViewProps",
            "moduleName": "ui/form/FieldList/FieldList",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "className": "",
                "disabled": false,
                "enableKeyboardNavigation": true,
                "initialRowsCount": 1,
                "required": false,
                "showAdd": true,
                "showRemove": true
            },
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFieldListItem & {disabled: boolean, size: boolean}[]",
                    "example": null
                },
                {
                    "name": "onAdd",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "renderField",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "showAdd",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IFieldSetProps": {
            "name": "IFieldSetProps",
            "moduleName": "ui/form/FieldSet/FieldSet",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFormContext",
                "IComponentsHocOutput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "Конфигурационный массив с полями формы",
                    "required": false,
                    "type": "IFieldProps[]",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IFieldSetViewProps": {
            "name": "IFieldSetViewProps",
            "moduleName": "ui/form/FieldSet/FieldSet",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": []
        },
        "IFileFieldItemViewProps": {
            "name": "IFileFieldItemViewProps",
            "moduleName": "ui/form/FileField/FileField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "className": "",
                "disabled": false,
                "required": false,
                "showRemove": true,
                "buttonProps": {
                    "color": "secondary",
                    "outline": true
                }
            },
            "extends": [
                "IFileFieldItemProps"
            ],
            "properties": [
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "error",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "fileId",
                    "decorators": [],
                    "description": "ID файла",
                    "required": false,
                    "type": "number | string",
                    "example": "34"
                },
                {
                    "name": "image",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{height: string, url: string, width: string}",
                    "example": null
                },
                {
                    "name": "imagesOnly",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "onRemove",
                    "decorators": [],
                    "description": "Обработчик события удаления файла",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "progress",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{bytesUploaded: number, percent: number}",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Исходное название файла",
                    "required": false,
                    "type": "string",
                    "example": "original-name"
                },
                {
                    "name": "uid",
                    "decorators": [],
                    "description": "Уникальный текстовый идентификатор",
                    "required": false,
                    "type": "string",
                    "example": "e65f5867-0083-48a7-af43-1121ed9e6280"
                }
            ]
        },
        "IFileFieldProps": {
            "name": "IFileFieldProps",
            "moduleName": "ui/form/FileField/FileField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "className": "",
                "disabled": false,
                "required": false,
                "showRemove": true,
                "buttonProps": {
                    "color": "secondary",
                    "outline": true
                }
            },
            "extends": [
                "IFieldHocInput",
                "IFileHocInput"
            ],
            "properties": [
                {
                    "name": "buttonComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode",
                    "example": null
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показать значок удаление файла",
                    "required": true,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IFileFieldViewProps": {
            "name": "IFileFieldViewProps",
            "moduleName": "ui/form/FileField/FileField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "className": "",
                "disabled": false,
                "required": false,
                "showRemove": true,
                "buttonProps": {
                    "color": "secondary",
                    "outline": true
                }
            },
            "extends": [
                "IFieldHocOutput",
                "IFileHocOutput"
            ],
            "properties": [
                {
                    "name": "buttonComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode | any",
                    "example": null
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, label: string | any, onClick: {}, size: boolean}",
                    "example": null
                },
                {
                    "name": "imagesOnly",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode | any",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IFileFieldItemProps[]",
                    "example": null
                }
            ]
        },
        "IFormProps": {
            "name": "IFormProps",
            "moduleName": "ui/form/Form/Form",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFormSubmitHocInput",
                "IThemeHocInput"
            ],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "Url на который будет отправлена форма",
                    "required": false,
                    "type": "string",
                    "example": "api/v1/handle-form"
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "Тип HTTP запроса (GET | POST | PUT | DELETE)",
                    "required": false,
                    "type": "string",
                    "example": "POST"
                },
                {
                    "name": "autoFocus",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "autoSave",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "initialValues",
                    "decorators": [],
                    "description": "Начальные значения формы",
                    "required": false,
                    "type": "any | any[]",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormLayout",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {} | any",
                    "example": null
                },
                {
                    "name": "onAfterSubmit",
                    "decorators": [],
                    "description": "Обработчик события после отправки формы",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onBeforeSubmit",
                    "decorators": [],
                    "description": "Обработчик события перед отправкой формы",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик события при каком-либо изменении в форме",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onComplete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onSubmit",
                    "decorators": [],
                    "description": "Обработчик события отправки формы",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "restoreCustomizer",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "any",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "submitLabel",
                    "decorators": [],
                    "description": "Надпись на конпке отправки формы",
                    "required": false,
                    "type": "string",
                    "example": "Submit"
                },
                {
                    "name": "syncWithAddressBar",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "useHash",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "validators",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IFormViewProps": {
            "name": "IFormViewProps",
            "moduleName": "ui/form/Form/Form",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{className: CssClassName, cols: number[], label: boolean, layout: FormLayoutName | boolean}",
                    "example": null
                },
                {
                    "name": "onSubmit",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IHtmlFieldProps": {
            "name": "IHtmlFieldProps",
            "moduleName": "ui/form/HtmlField/HtmlField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "customButtons",
                    "decorators": [],
                    "description": "Пользовательские кнопки",
                    "required": false,
                    "type": "Array",
                    "example": "[<CustomButton/>]"
                },
                {
                    "name": "editorProps",
                    "decorators": [],
                    "description": "Конфигурация wysiwyg реадактора",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onBlur",
                    "decorators": [],
                    "description": "Обработчик события при снятии фокуса с редактора",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onFocus",
                    "decorators": [],
                    "description": "Обработчик события при фокусе на редактора",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "uploadImagesProcessor",
                    "decorators": [],
                    "description": "После загрузки изображения на сервер,\nможно указать с каким процессором должно вернуться картинка",
                    "required": false,
                    "type": "string",
                    "example": "origin"
                },
                {
                    "name": "uploadUrl",
                    "decorators": [],
                    "description": "Url на который будет отправлена форма загрузки файла",
                    "required": false,
                    "type": "string",
                    "example": "/api/v1/upload-files"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IHtmlFieldViewProps": {
            "name": "IHtmlFieldViewProps",
            "moduleName": "ui/form/HtmlField/HtmlField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IHtmlFieldProps",
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "customButtons",
                    "decorators": [],
                    "description": "Пользовательские кнопки",
                    "required": false,
                    "type": "Array",
                    "example": "[<CustomButton/>]"
                },
                {
                    "name": "editorProps",
                    "decorators": [],
                    "description": "Конфигурация wysiwyg реадактора",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "editorState",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onBlur",
                    "decorators": [],
                    "description": "Обработчик события при снятии фокуса с редактора",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onEditorStateChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onFocus",
                    "decorators": [],
                    "description": "Обработчик события при фокусе на редактора",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "uploadImagesProcessor",
                    "decorators": [],
                    "description": "После загрузки изображения на сервер,\nможно указать с каким процессором должно вернуться картинка",
                    "required": false,
                    "type": "string",
                    "example": "origin"
                },
                {
                    "name": "uploadUrl",
                    "decorators": [],
                    "description": "Url на который будет отправлена форма загрузки файла",
                    "required": false,
                    "type": "string",
                    "example": "/api/v1/upload-files"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IInputFieldProps": {
            "name": "IInputFieldProps",
            "moduleName": "ui/form/InputField/InputField",
            "title": "InputField",
            "description": "Поле ввода текста",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "addonAfter",
                    "decorators": [],
                    "description": "Текст или React-нода, которая будет отрендерена справа от поля.",
                    "required": false,
                    "type": "ReactNode | string",
                    "example": "'.com'"
                },
                {
                    "name": "addonBefore",
                    "decorators": [],
                    "description": "Текст или React-нода, которая будет отрендерена слева от поля.",
                    "required": false,
                    "type": "ReactNode | string",
                    "example": "'http://'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента \\<input /\\>",
                    "required": false,
                    "type": "any",
                    "example": "{onKeyDown: ...}"
                },
                {
                    "name": "maskProps",
                    "decorators": [],
                    "description": "Конфигурация маски",
                    "required": false,
                    "type": "any",
                    "example": "{ mask: '+7 (999) 999-99-99' }"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "any",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "textAfter",
                    "decorators": [],
                    "description": "Изображение или React-нода, которая будет отрендерена справа от поля.",
                    "required": false,
                    "type": "number | ReactNode | string",
                    "example": "require('icon.png') | <component/>"
                },
                {
                    "name": "textBefore",
                    "decorators": [],
                    "description": "Изображение или React-нода, которая будет отрендерена слева от поля.",
                    "required": false,
                    "type": "number | ReactNode | string",
                    "example": "require('icon.png') | <component/>"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "IElementInputType",
                    "example": "email"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизациии отображения",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                }
            ]
        },
        "IInputFieldViewProps": {
            "name": "IInputFieldViewProps",
            "moduleName": "ui/form/InputField/InputField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "addonAfter",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode | string",
                    "example": null
                },
                {
                    "name": "addonBefore",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode | string",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: string, name: string, onChange: {}, placeholder: string, type: string, value: string | number}",
                    "example": null
                },
                {
                    "name": "isInvalid",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "maskProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onBlur",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onFocus",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onMouseDown",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "textAfter",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | ReactNode | string",
                    "example": null
                },
                {
                    "name": "textBefore",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | ReactNode | string",
                    "example": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "INumberFieldProps": {
            "name": "INumberFieldProps",
            "moduleName": "ui/form/NumberField/NumberField",
            "title": "NumberField",
            "description": "Числовое поле ввода",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IInputFieldProps",
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "max",
                    "decorators": [],
                    "description": "Максимальное значение",
                    "required": false,
                    "type": "number",
                    "example": "100"
                },
                {
                    "name": "min",
                    "decorators": [],
                    "description": "Минимальное значение",
                    "required": false,
                    "type": "number",
                    "example": "1"
                },
                {
                    "name": "step",
                    "decorators": [],
                    "description": "Шаг увеличения/уменьшения значения",
                    "required": false,
                    "type": "string | number",
                    "example": "5"
                }
            ]
        },
        "INumberFieldViewProps": {
            "name": "INumberFieldViewProps",
            "moduleName": "ui/form/NumberField/NumberField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, max: string | number, min: string | number, name: string, onChange: {}, placeholder: string, step: string | number, type: string, value: number}",
                    "example": null
                }
            ]
        },
        "IPasswordFieldProps": {
            "name": "IPasswordFieldProps",
            "moduleName": "ui/form/PasswordField/PasswordField",
            "title": "PasswordField",
            "description": "Поле ввода пароля",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IInputFieldProps",
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "security",
                    "decorators": [],
                    "description": "Если true, то отображается шкала сложности пароля и иконка 'отображения' пароля",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ]
        },
        "IPasswordFieldViewProps": {
            "name": "IPasswordFieldViewProps",
            "moduleName": "ui/form/PasswordField/PasswordField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, name: string, onChange: {}, placeholder: string, type: string, value: string | number}",
                    "example": null
                },
                {
                    "name": "isInvalid",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "onHidePassword",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onShowPassword",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "security",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "securityLevel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"success\" | \"warning\" | \"danger\"",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | string",
                    "example": null
                }
            ]
        },
        "IRadioListFieldProps": {
            "name": "IRadioListFieldProps",
            "moduleName": "ui/form/RadioListField/RadioListField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput",
                "IDataProviderHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IRadioListFieldViewProps": {
            "name": "IRadioListFieldViewProps",
            "moduleName": "ui/form/RadioListField/RadioListField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput",
                "IDataProviderHocOutput"
            ],
            "properties": [
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: string, name: string, type: string}",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: number | string | boolean, isHovered: boolean, isSelected: boolean, label: string}[]",
                    "example": null
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                }
            ]
        },
        "IRangeFieldProps": {
            "name": "IRangeFieldProps",
            "moduleName": "ui/form/RangeField/RangeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "attributeFrom",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "attributeTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "fieldComponent",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "fromProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "inputFrom",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormInputType",
                    "example": null
                },
                {
                    "name": "inputTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "FormInputType",
                    "example": null
                },
                {
                    "name": "placeholderFrom",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "placeholderTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "toProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"input\" | \"date\" | string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IRangeFieldViewProps": {
            "name": "IRangeFieldViewProps",
            "moduleName": "ui/form/RangeField/RangeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "fromField",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toField",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IReCaptchaFieldProps": {
            "name": "IReCaptchaFieldProps",
            "moduleName": "ui/form/ReCaptchaField/ReCaptchaField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IReCaptchaFieldViewProps": {
            "name": "IReCaptchaFieldViewProps",
            "moduleName": "ui/form/ReCaptchaField/ReCaptchaField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "reCaptchaProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "ISliderFieldProps": {
            "name": "ISliderFieldProps",
            "moduleName": "ui/form/SliderField/SliderField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "max",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "min",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "sliderProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "ISliderFieldViewProps": {
            "name": "ISliderFieldViewProps",
            "moduleName": "ui/form/SliderField/SliderField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "slider",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{defaultValue: number, max: number, min: number, onAfterChange: {}, onChange: {}, value: number}",
                    "example": null
                }
            ]
        },
        "ISwitcherFieldProps": {
            "name": "ISwitcherFieldProps",
            "moduleName": "ui/form/SwitcherField/SwitcherField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput",
                "IDataProviderHocInput"
            ],
            "properties": [
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "ISwitcherFieldViewProps": {
            "name": "ISwitcherFieldViewProps",
            "moduleName": "ui/form/SwitcherField/SwitcherField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput",
                "IDataProviderHocOutput"
            ],
            "properties": [
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: number | string | boolean, isHovered: boolean, isSelected: boolean, label: string}[]",
                    "example": null
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                }
            ]
        },
        "ITextFieldProps": {
            "name": "ITextFieldProps",
            "moduleName": "ui/form/TextField/TextField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "submitOnEnter",
                    "decorators": [],
                    "description": "Отправлять форму при нажатии на кнопку `enter`",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "ITextFieldViewProps": {
            "name": "ITextFieldViewProps",
            "moduleName": "ui/form/TextField/TextField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, name: string, onChange: {}, onKeyUp: {}, placeholder: string, value: string | number}",
                    "example": null
                }
            ]
        },
        "ITimeFieldProps": {
            "name": "ITimeFieldProps",
            "moduleName": "ui/form/TimeField/TimeField",
            "title": "InputField",
            "description": "Поле ввода текста",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента <input />",
                    "required": false,
                    "type": "any",
                    "example": "{onKeyDown: ...}"
                },
                {
                    "name": "pickerProps",
                    "decorators": [],
                    "description": "Объект, который будет передан в props внутреннего компонента используемого для выбора времени.",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "any",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "timeFormat",
                    "decorators": [],
                    "description": "Формат отображения времени",
                    "required": false,
                    "type": "string",
                    "example": "'HH:mm'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизациии отображения",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                }
            ]
        },
        "ITimeFieldViewProps": {
            "name": "ITimeFieldViewProps",
            "moduleName": "ui/form/TimeField/TimeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldHocOutput"
            ],
            "properties": [
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: string, name: string, onChange: {}, placeholder: string, type: string, value: string | number}",
                    "example": null
                },
                {
                    "name": "isInvalid",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "pickerProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "timeFormat",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IBooleanFormatterProps": {
            "name": "IBooleanFormatterProps",
            "moduleName": "ui/format/BooleanFormatter/BooleanFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | number | boolean",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IBooleanFormatterPropsView": {
            "name": "IBooleanFormatterPropsView",
            "moduleName": "ui/format/BooleanFormatter/BooleanFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | number | boolean",
                    "example": null
                }
            ]
        },
        "IDateTimeFormatterProps": {
            "name": "IDateTimeFormatterProps",
            "moduleName": "ui/format/DateTimeFormatter/DateTimeFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "format",
                    "decorators": [],
                    "description": "Формат даты",
                    "required": false,
                    "type": "string",
                    "example": "LLL"
                },
                {
                    "name": "timeZone",
                    "decorators": [],
                    "description": "Показывать ли дату учитываю временную зону",
                    "required": false,
                    "type": "string | boolean",
                    "example": "true"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Дата",
                    "required": false,
                    "type": "any",
                    "example": "2023-09-11"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IEnumFormatterProps": {
            "name": "IEnumFormatterProps",
            "moduleName": "ui/format/EnumFormatter/EnumFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Перечисление элементов.\n1) Может быть строкой вида: `app.geo.enums.Cities`\n2) Массивом: [{id: 1, label: \"London\"}]",
                    "required": false,
                    "type": "string | {id: number | string, label: string}[] | {getLabel: {}}",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Уникальный идентификатор элемента из `items`",
                    "required": false,
                    "type": "number | string",
                    "example": "unique label"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IFileSizeFormatterProps": {
            "name": "IFileSizeFormatterProps",
            "moduleName": "ui/format/FileSize/FileSize",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "showZero",
                    "decorators": [],
                    "description": "Если не указан размер файла, то в случае, если showZero = true\nто будет показан `0`, иначе пустая строка",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Размер файла",
                    "required": false,
                    "type": "any",
                    "example": "6920"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IFormatProps": {
            "name": "IFormatProps",
            "moduleName": "ui/format/Format/Format",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {}",
                    "example": null
                },
                {
                    "name": "emptyText",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "getFormatter",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {} | any",
                    "example": null
                },
                {
                    "name": "ui",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IMoneyFormatterProps": {
            "name": "IMoneyFormatterProps",
            "moduleName": "ui/format/MoneyFormatter/MoneyFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "currency",
                    "decorators": [],
                    "description": "Валюта @enum {eur, rub, usd}",
                    "required": false,
                    "type": "string",
                    "example": "rub"
                },
                {
                    "name": "precision",
                    "decorators": [],
                    "description": "Разрядность (при передаче int в значении)",
                    "required": false,
                    "type": "number",
                    "example": "2"
                },
                {
                    "name": "scale",
                    "decorators": [],
                    "description": "Округление числа",
                    "required": false,
                    "type": "number",
                    "example": "2"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IPhotosFormatterProps": {
            "name": "IPhotosFormatterProps",
            "moduleName": "ui/format/PhotosFormatter/PhotosFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "photoRowHeight",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{src: string, thumbnail: string, thumbnailHeight: number, thumbnailWidth: number, uid: number}[]",
                    "example": null
                },
                {
                    "name": "videoRowHeight",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IPhotosFormatterViewProps": {
            "name": "IPhotosFormatterViewProps",
            "moduleName": "ui/format/PhotosFormatter/PhotosFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IPhotosFormatterProps"
            ],
            "properties": [
                {
                    "name": "photoRowHeight",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{src: string, thumbnail: string, thumbnailHeight: number, thumbnailWidth: number, uid: number}[]",
                    "example": null
                },
                {
                    "name": "videoRowHeight",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IIconViewProps": {
            "name": "IIconViewProps",
            "moduleName": "ui/icon/Icon/Icon",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IIconProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": "require('icon.png'), <svg .../>, 'https://<site-name>/icon.png"
                },
                {
                    "name": "name",
                    "decorators": [],
                    "description": "Имя иконки (латиницей). Импорт иконок происходит на старте приложения.",
                    "required": false,
                    "type": "string",
                    "example": "create"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок, отображаемый при наведении (через нативное поле title)",
                    "required": false,
                    "type": "string",
                    "example": "Добавить запись"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизациии отображения",
                    "required": false,
                    "type": "React.ComponentType",
                    "example": "MyCustomView"
                }
            ]
        },
        "IHeaderProps": {
            "name": "IHeaderProps",
            "moduleName": "ui/layout/Header/Header",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IThemeHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "logo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{className: CssClassName, icon: string | any, linkProps: object, title: string}",
                    "example": null
                },
                {
                    "name": "nav",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "INavProps",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IHeaderViewProps": {
            "name": "IHeaderViewProps",
            "moduleName": "ui/layout/Header/Header",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IHeaderProps",
                "IBemHocOutput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "logo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{className: CssClassName, icon: string | any, linkProps: object, title: string}",
                    "example": null
                },
                {
                    "name": "nav",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "INavProps",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "ILoaderProps": {
            "name": "ILoaderProps",
            "moduleName": "ui/layout/Loader/Loader",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "INotificationsItemViewProps": {
            "name": "INotificationsItemViewProps",
            "moduleName": "ui/layout/Notifications/Notifications",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "INotificationItem"
            ],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "level",
                    "decorators": [],
                    "description": "Цвет всплывающего уведомления",
                    "required": false,
                    "type": "ColorName",
                    "example": "warning"
                },
                {
                    "name": "message",
                    "decorators": [],
                    "description": "Сообщение во всплывающем уведомлении",
                    "required": false,
                    "type": "string",
                    "example": "Сохранено!"
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "INotificationsProps": {
            "name": "INotificationsProps",
            "moduleName": "ui/layout/Notifications/Notifications",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "closeTimeoutMs",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "initialFlashes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "notifications",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "INotificationItem[]",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "INotificationsViewProps": {
            "name": "INotificationsViewProps",
            "moduleName": "ui/layout/Notifications/Notifications",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "notifications",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "INotificationItem[]",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "ITooltipProps": {
            "name": "ITooltipProps",
            "moduleName": "ui/layout/Tooltip/Tooltip",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "arrowPosition",
                    "decorators": [],
                    "description": "Стили для позиционирования стрелки",
                    "required": false,
                    "type": "TooltipArrowPosition",
                    "example": "{left: 10}"
                },
                {
                    "name": "calculatePosition",
                    "decorators": [],
                    "description": "Рассчет позиции подсказки",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Текст подсказки",
                    "required": false,
                    "type": "string | any",
                    "example": "'Это всплывающая подсказка.'"
                },
                {
                    "name": "defaultVisible",
                    "decorators": [],
                    "description": "Показывать ли подсказку сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Позиционирование подсказки, относительно целевого элемента",
                    "required": false,
                    "type": "TooltipPosition",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Стили для абсолютного позиционирования подсказки",
                    "required": false,
                    "type": "TooltipStylePosition",
                    "example": null
                }
            ]
        },
        "ITooltipViewProps": {
            "name": "ITooltipViewProps",
            "moduleName": "ui/layout/Tooltip/Tooltip",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ITooltipProps"
            ],
            "properties": [
                {
                    "name": "arrowPosition",
                    "decorators": [],
                    "description": "Стили для позиционирования стрелки",
                    "required": false,
                    "type": "TooltipArrowPosition",
                    "example": "{left: 10}"
                },
                {
                    "name": "calculatePosition",
                    "decorators": [],
                    "description": "Рассчет позиции подсказки",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | any",
                    "example": null
                },
                {
                    "name": "defaultVisible",
                    "decorators": [],
                    "description": "Показывать ли подсказку сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isTooltipVisible",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "TooltipPosition",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "TooltipStylePosition",
                    "example": null
                }
            ]
        },
        "IAccordionHeaderViewProps": {
            "name": "IAccordionHeaderViewProps",
            "moduleName": "ui/list/Accordion/Accordion",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IListHocOutput"
            ],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "PrimaryKey",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "object",
                    "example": null
                }
            ]
        },
        "IAccordionItemViewProps": {
            "name": "IAccordionItemViewProps",
            "moduleName": "ui/list/Accordion/Accordion",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IListHocOutput"
            ],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "PrimaryKey",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "object",
                    "example": null
                }
            ]
        },
        "IAccordionProps": {
            "name": "IAccordionProps",
            "moduleName": "ui/list/Accordion/Accordion",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IListHocInput"
            ],
            "properties": [
                {
                    "name": "headerLabelAttribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "headerProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "headerView",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onToggle",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "openFirst",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "openedId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IAccordionViewProps": {
            "name": "IAccordionViewProps",
            "moduleName": "ui/list/Accordion/Accordion",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IListHocOutput"
            ],
            "properties": [
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: PrimaryKey, isOpened: boolean}[]",
                    "example": null
                },
                {
                    "name": "onToggle",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "openedId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "PrimaryKey",
                    "example": null
                },
                {
                    "name": "renderHeader",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "renderItem",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                }
            ]
        },
        "ICheckboxColumnProps": {
            "name": "ICheckboxColumnProps",
            "moduleName": "ui/list/CheckboxColumn/CheckboxColumn",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "fieldProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "ICheckboxColumnViewProps": {
            "name": "ICheckboxColumnViewProps",
            "moduleName": "ui/list/CheckboxColumn/CheckboxColumn",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "fieldProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{fieldId: string}",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{name: string, onChange: any, value: any}",
                    "example": null
                }
            ]
        },
        "IControlsColumnItem": {
            "name": "IControlsColumnItem",
            "moduleName": "ui/list/ControlsColumn/ControlsColumn",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "rule",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"view\" | \"update\" | \"delete\" | string",
                    "example": null
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IControlsColumnProps": {
            "name": "IControlsColumnProps",
            "moduleName": "ui/list/ControlsColumn/ControlsColumn",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IControlItem[] | {}",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IControlsColumnViewProps": {
            "name": "IControlsColumnViewProps",
            "moduleName": "ui/list/ControlsColumn/ControlsColumn",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IControlsColumnItem[]",
                    "example": null
                }
            ]
        },
        "IDetailColumn": {
            "name": "IDetailColumn",
            "moduleName": "ui/list/Detail/Detail",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | boolean | Element",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | boolean | Element",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IDetailProps": {
            "name": "IDetailProps",
            "moduleName": "ui/list/Detail/Detail",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attributes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | IDetailColumn[]",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "emptyText",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {} | any",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Size",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IDetailViewProps": {
            "name": "IDetailViewProps",
            "moduleName": "ui/list/Detail/Detail",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IDetailColumn & {label: any, value: any}[]",
                    "example": null
                }
            ]
        },
        "IEmptyProps": {
            "name": "IEmptyProps",
            "moduleName": "ui/list/Empty/Empty",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "text",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | React.ReactNode",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IEmptyViewProps": {
            "name": "IEmptyViewProps",
            "moduleName": "ui/list/Empty/Empty",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IEmptyProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "text",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | React.ReactNode",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IGridColumn": {
            "name": "IGridColumn",
            "moduleName": "ui/list/Grid/Grid",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "format",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {component: string | {}}",
                    "example": null
                },
                {
                    "name": "headerClassName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "headerProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "headerView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode",
                    "example": null
                },
                {
                    "name": "sortable",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "valueProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IGridProps": {
            "name": "IGridProps",
            "moduleName": "ui/list/Grid/Grid",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IListHocInput"
            ],
            "properties": [
                {
                    "name": "columns",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | IGridColumn[]",
                    "example": null
                },
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IControlItem[] | {}",
                    "example": null
                },
                {
                    "name": "fetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "itemsIndexing",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onSort",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "searchForm",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFormProps",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IGridViewProps": {
            "name": "IGridViewProps",
            "moduleName": "ui/list/Grid/Grid",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IGridProps",
                "IGridPrivateProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "columns",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IGridColumn & {label: any}[]",
                    "example": null
                },
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IControlItem[] | {}",
                    "example": null
                },
                {
                    "name": "fetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "itemsIndexing",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "list",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onSort",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "renderValue",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "searchForm",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFormProps",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IListItemViewProps": {
            "name": "IListItemViewProps",
            "moduleName": "ui/list/List/List",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IListProps",
                "IListHocOutput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "contentClassName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "PrimaryKey",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: PrimaryKey, label: string | any, title: string | any}",
                    "example": null
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ComponentType",
                    "example": null
                },
                {
                    "name": "layoutSelected",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "PrimaryKey",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ComponentType",
                    "example": null
                }
            ]
        },
        "IListProps": {
            "name": "IListProps",
            "moduleName": "ui/list/List/List",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IListHocInput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "contentClassName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ComponentType",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ComponentType",
                    "example": null
                }
            ]
        },
        "IListViewProps": {
            "name": "IListViewProps",
            "moduleName": "ui/list/List/List",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IListProps",
                "IListHocOutput"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "contentClassName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "object",
                    "example": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ComponentType",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ComponentType",
                    "example": null
                }
            ]
        },
        "IPaginationProps": {
            "name": "IPaginationProps",
            "moduleName": "ui/list/Pagination/Pagination",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IThemeHocInput"
            ],
            "properties": [
                {
                    "name": "aroundCount",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | null",
                    "example": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "loadMore",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "page",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "pageSize",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ListControlPosition",
                    "example": null
                },
                {
                    "name": "total",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IPaginationViewProps": {
            "name": "IPaginationViewProps",
            "moduleName": "ui/list/Pagination/Pagination",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IPaginationProps",
                "IThemeHocOutput"
            ],
            "properties": [
                {
                    "name": "aroundCount",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | null",
                    "example": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "loadMore",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onSelect",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onSelectNext",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "page",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "pageSize",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "pages",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{isActive: boolean, label: string, page: number}[]",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ListControlPosition",
                    "example": null
                },
                {
                    "name": "total",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "totalPages",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IPaginationSizeProps": {
            "name": "IPaginationSizeProps",
            "moduleName": "ui/list/PaginationSize/PaginationSize",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "sizes": [
                    30,
                    50,
                    100
                ]
            },
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | null",
                    "example": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ListControlPosition",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Size",
                    "example": null
                },
                {
                    "name": "sizes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number[]",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IPaginationSizeViewProps": {
            "name": "IPaginationSizeViewProps",
            "moduleName": "ui/list/PaginationSize/PaginationSize",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "sizes": [
                    30,
                    50,
                    100
                ]
            },
            "extends": [
                "IPaginationSizeProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | null",
                    "example": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{isActive: boolean, label: string | number, size: number}[]",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onSelect",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ListControlPosition",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Size",
                    "example": null
                },
                {
                    "name": "sizes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number[]",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null
                }
            ]
        },
        "IModalProps": {
            "name": "IModalProps",
            "moduleName": "ui/modal/Modal/Modal",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IControlItem[]",
                    "example": null
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Size",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IModalViewProps": {
            "name": "IModalViewProps",
            "moduleName": "ui/modal/Modal/Modal",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IModalProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IControlItem[]",
                    "example": null
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Size",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IModalPortalProps": {
            "name": "IModalPortalProps",
            "moduleName": "ui/modal/ModalPortal/ModalPortal",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "animationDelayMc": 300,
                "group": "MODAL_DEFAULT_GROUP"
            },
            "extends": [],
            "properties": [
                {
                    "name": "animationDelayMc",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "IBreadcrumbsProps": {
            "name": "IBreadcrumbsProps",
            "moduleName": "ui/nav/Breadcrumbs/Breadcrumbs",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "pageId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "pageTitle",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "params",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IBreadcrumbsViewProps": {
            "name": "IBreadcrumbsViewProps",
            "moduleName": "ui/nav/Breadcrumbs/Breadcrumbs",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IBreadcrumbsProps"
            ],
            "properties": [
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "pageId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "pageTitle",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "params",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IControlItem": {
            "name": "IControlItem",
            "moduleName": "ui/nav/Controls/Controls",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"left\" | \"right\"",
                    "example": null
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "IControlsProps": {
            "name": "IControlsProps",
            "moduleName": "ui/nav/Controls/Controls",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IControlItem[]",
                    "example": null
                },
                {
                    "name": "navProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "INavProps",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IControlsViewProps": {
            "name": "IControlsViewProps",
            "moduleName": "ui/nav/Controls/Controls",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IControlsProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IControlItem & {color: ColorName, confirm: string, icon: string, label: string | any, outline: boolean, position: \"right\" | \"left\"}[]",
                    "example": null
                },
                {
                    "name": "navProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "INavProps",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "ILinkProps": {
            "name": "ILinkProps",
            "moduleName": "ui/nav/Link/Link",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "to",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "ILinkViewProps": {
            "name": "ILinkViewProps",
            "moduleName": "ui/nav/Link/Link",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonViewProps"
            ],
            "properties": []
        },
        "INavItem": {
            "name": "INavItem",
            "moduleName": "ui/nav/Nav/Nav",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "contentProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | string",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | any",
                    "example": null
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "INavProps": {
            "name": "INavProps",
            "moduleName": "ui/nav/Nav/Nav",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IThemeHocInput"
            ],
            "properties": [
                {
                    "name": "activeTab",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | string",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | INavItem[]",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"button\" | \"icon\" | \"link\" | \"tabs\" | \"navbar\" | \"list\" | string",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "routes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRoute[]",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "INavViewProps": {
            "name": "INavViewProps",
            "moduleName": "ui/nav/Nav/Nav",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "INavProps"
            ],
            "properties": [
                {
                    "name": "activeTab",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | string",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "INavItem & {isActive: boolean}[]",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"button\" | \"icon\" | \"link\" | \"tabs\" | \"navbar\" | \"list\" | string",
                    "example": null
                },
                {
                    "name": "navClassName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "routes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRoute[]",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "IRouteItem": {
            "name": "IRouteItem",
            "moduleName": "ui/nav/Router/Router",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "enums",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "exact",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "fetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFetchHocConfig",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isNavVisible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isVisible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRouteItem[] | {}",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "models",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "path",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "redirectTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean | string",
                    "example": null
                },
                {
                    "name": "roles",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ]
        },
        "IRouterProps": {
            "name": "IRouterProps",
            "moduleName": "ui/nav/Router/Router",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "INavigationHocInputProps"
            ],
            "properties": [
                {
                    "name": "autoScrollTop",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "basename",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "history",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "pathname",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "routeId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "routes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRouteItem[] | {}",
                    "example": null
                },
                {
                    "name": "store",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "wrapperProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "wrapperView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "INavigationHocInputProps": {
            "name": "INavigationHocInputProps",
            "moduleName": "ui/nav/Router/navigationHoc",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "defaultRoles",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                }
            ]
        },
        "ITreeItem": {
            "name": "ITreeItem",
            "moduleName": "ui/nav/Tree/Tree",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ]
        },
        "ITreeProps": {
            "name": "ITreeProps",
            "moduleName": "ui/nav/Tree/Tree",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "autoOpenLevels",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "autoSave",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ITreeItem[] | string",
                    "example": null
                },
                {
                    "name": "itemsKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "level",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "selectedItemId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        },
        "ITreeViewProps": {
            "name": "ITreeViewProps",
            "moduleName": "ui/nav/Tree/Tree",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ITreeProps"
            ],
            "properties": [
                {
                    "name": "autoOpenLevels",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "autoSave",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CssClassName",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ITreeItem & {className: CssClassName, hasItems: boolean, index: number, isOpened: boolean, isSelected: boolean, level: number, onClick: {}, uniqId: string}[]",
                    "example": null
                },
                {
                    "name": "itemsKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "level",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "levelPadding",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "selectedItemId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ]
        }
    },
    "declarations": {
        "Dispatch": {
            "name": "Dispatch",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        },
        "IFetchHocConfig": {
            "name": "IFetchHocConfig",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        },
        "ListControlPosition": {
            "name": "ListControlPosition",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "\"top\" | \"bottom\" | \"both\" | string",
            "example": null
        },
        "ColorName": {
            "name": "ColorName",
            "decorators": [],
            "description": "Название цвета, соответствующее ему состоянию",
            "required": true,
            "type": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | string",
            "example": null
        },
        "CssClassName": {
            "name": "CssClassName",
            "decorators": [],
            "description": "Дополнительные CSS классы",
            "required": true,
            "type": "string",
            "example": "my-block"
        },
        "CustomView": {
            "name": "CustomView",
            "decorators": [],
            "description": "Переопределение view React компонента для кастомизациии отображения",
            "required": true,
            "type": "React.ReactNode",
            "example": "MyCustomView"
        },
        "FormInputType": {
            "name": "FormInputType",
            "decorators": [],
            "description": "Объект из свойства `input` от redux-form",
            "required": true,
            "type": "{name: string, onChange: {}, value: any}",
            "example": null
        },
        "FormLayout": {
            "name": "FormLayout",
            "decorators": [],
            "description": "Свойства для настройки макета формы",
            "required": true,
            "type": "FormLayoutName | boolean | {className: string, cols: number[], label: boolean, layout: FormLayoutName | boolean}",
            "example": null
        },
        "FormLayoutName": {
            "name": "FormLayoutName",
            "decorators": [],
            "description": "Макет формы или ее части, влияющий на расположение полей",
            "required": true,
            "type": "\"default\" | \"horizontal\" | \"inline\" | string",
            "example": null
        },
        "HttpMethod": {
            "name": "HttpMethod",
            "decorators": [],
            "description": "HTTP метод",
            "required": true,
            "type": "\"get\" | \"post\" | \"put\" | \"delete\" | string",
            "example": null
        },
        "PrimaryKey": {
            "name": "PrimaryKey",
            "decorators": [],
            "description": "Уникальный ключ. ID, UUID или другое",
            "required": true,
            "type": "number | string",
            "example": null
        },
        "Size": {
            "name": "Size",
            "decorators": [],
            "description": "Размер элемента",
            "required": true,
            "type": "\"sm\" | \"md\" | \"lg\" | string",
            "example": null
        },
        "Method": {
            "name": "Method",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "\"get\" | \"GET\" | \"delete\" | \"DELETE\" | \"head\" | \"HEAD\" | \"options\" | \"OPTIONS\" | \"post\" | \"POST\" | \"put\" | \"PUT\" | \"patch\" | \"PATCH\" | \"link\" | \"LINK\" | \"unlink\" | \"UNLINK\"",
            "example": null
        },
        "ResponseType": {
            "name": "ResponseType",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "\"arraybuffer\" | \"blob\" | \"document\" | \"json\" | \"text\" | \"stream\"",
            "example": null
        },
        "ConsumerProps": {
            "name": "ConsumerProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{children: RenderFn | RenderFn, observedBits: number}",
            "example": null
        },
        "Context": {
            "name": "Context",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{Consumer: ComponentClass, Provider: ComponentClass}",
            "example": null
        },
        "ProviderProps": {
            "name": "ProviderProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{children: React.ReactNode, observedBits: any, value: T}",
            "example": null
        },
        "RenderFn": {
            "name": "RenderFn",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        },
        "FunctionModifier": {
            "name": "FunctionModifier",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        },
        "Modifier": {
            "name": "Modifier",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "Date | RangeModifier | BeforeModifier | AfterModifier | BeforeAfterModifier | DaysOfWeekModifier | FunctionModifier | undefined | null",
            "example": null
        },
        "DeepPartial": {
            "name": "DeepPartial",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        },
        "Func0": {
            "name": "Func0",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        },
        "Func1": {
            "name": "Func1",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        },
        "Func2": {
            "name": "Func2",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        },
        "Func3": {
            "name": "Func3",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        },
        "Observable": {
            "name": "Observable",
            "decorators": [],
            "description": "A minimal observable of state changes.\nFor more information, see the observable proposal:\nhttps://github.com/tc39/proposal-observable",
            "required": true,
            "type": "{subscribe: {}, [Symbol.observable]: null}",
            "example": null
        },
        "Observer": {
            "name": "Observer",
            "decorators": [],
            "description": "An Observer is used to receive data from an Observable, and is supplied as\nan argument to subscribe.",
            "required": true,
            "type": "{next: null}",
            "example": null
        },
        "Reducer": {
            "name": "Reducer",
            "decorators": [],
            "description": "A *reducer* (also called a *reducing function*) is a function that accepts\nan accumulation and a value and returns a new accumulation. They are used\nto reduce a collection of values down to a single value\n\nReducers are not unique to Redux—they are a fundamental concept in\nfunctional programming.  Even most non-functional languages, like\nJavaScript, have a built-in API for reducing. In JavaScript, it's\n`Array.prototype.reduce()`.\n\nIn Redux, the accumulated value is the state object, and the values being\naccumulated are actions. Reducers calculate a new state given the previous\nstate and an action. They must be *pure functions*—functions that return\nthe exact same output for given inputs. They should also be free of\nside-effects. This is what enables exciting features like hot reloading and\ntime travel.\n\nReducers are the most important concept in Redux.\n\n*Do not put API calls into reducers.*\n",
            "required": true,
            "type": "{}",
            "example": null
        },
        "ReducersMapObject": {
            "name": "ReducersMapObject",
            "decorators": [],
            "description": "Object whose values correspond to different reducer functions.",
            "required": true,
            "type": "{}",
            "example": null
        },
        "StoreEnhancer": {
            "name": "StoreEnhancer",
            "decorators": [],
            "description": "A store enhancer is a higher-order function that composes a store creator\nto return a new, enhanced store creator. This is similar to middleware in\nthat it allows you to alter the store interface in a composable way.\n\nStore enhancers are much the same concept as higher-order components in\nReact, which are also occasionally called “component enhancers”.\n\nBecause a store is not an instance, but rather a plain-object collection of\nfunctions, copies can be easily created and modified without mutating the\noriginal store. There is an example in `compose` documentation\ndemonstrating that.\n\nMost likely you'll never write a store enhancer, but you may use the one\nprovided by the developer tools. It is what makes time travel possible\nwithout the app being aware it is happening. Amusingly, the Redux\nmiddleware implementation is itself a store enhancer.\n",
            "required": true,
            "type": "{}",
            "example": null
        },
        "StoreEnhancerStoreCreator": {
            "name": "StoreEnhancerStoreCreator",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{}",
            "example": null
        }
    },
    "demos": {
        "crud": {
            "Crud": {
                "default": {
                    "order": "1",
                    "col": "8",
                    "title": null,
                    "description": "Default"
                }
            }
        },
        "form": {
            "AutoCompleteField": {
                "basic": {
                    "order": "1",
                    "col": "6",
                    "title": null,
                    "description": "Basic"
                }
            },
            "Button": {
                "block": {
                    "order": "3",
                    "col": "4",
                    "title": null,
                    "description": "Block button"
                },
                "disabled": {
                    "order": "4",
                    "col": "4",
                    "title": null,
                    "description": "Disabled"
                },
                "link": {
                    "order": "5",
                    "col": "4",
                    "title": null,
                    "description": "Link"
                }
            },
            "CheckboxField": {
                "basic": {
                    "order": "1",
                    "col": "3",
                    "title": null,
                    "description": "Basic"
                },
                "disabled": {
                    "order": "2",
                    "col": "3",
                    "title": null,
                    "description": "Disabled"
                },
                "errors": {
                    "order": "4",
                    "col": "3",
                    "title": null,
                    "description": "Errors"
                },
                "required": {
                    "order": "3",
                    "col": "3",
                    "title": null,
                    "description": "Required"
                }
            },
            "InputField": {
                "addons": {
                    "order": "8",
                    "col": "6",
                    "title": null,
                    "description": "Addons"
                },
                "basic": {
                    "order": "1",
                    "col": "3",
                    "title": null,
                    "description": "Basic"
                },
                "disabled": {
                    "order": "2",
                    "col": "3",
                    "title": null,
                    "description": "Disabled"
                },
                "errors": {
                    "order": "5",
                    "col": "6",
                    "title": null,
                    "description": "Errors"
                },
                "mask": {
                    "order": "7",
                    "col": "3",
                    "title": null,
                    "description": "Mask"
                },
                "placeholder": {
                    "order": "4",
                    "col": "3",
                    "title": null,
                    "description": "Placeholder"
                },
                "required": {
                    "order": "3",
                    "col": "3",
                    "title": null,
                    "description": "Required"
                },
                "textAddons": {
                    "order": "9",
                    "col": "6",
                    "title": null,
                    "description": "TextAddons"
                }
            },
            "NumberField": {
                "basic": {
                    "order": "1",
                    "col": "3",
                    "title": null,
                    "description": "Basic"
                },
                "disabled": {
                    "order": "2",
                    "col": "3",
                    "title": null,
                    "description": "Disabled"
                },
                "errors": {
                    "order": "6",
                    "col": "4",
                    "title": null,
                    "description": "Errors"
                },
                "placeholder": {
                    "order": "4",
                    "col": "3",
                    "title": null,
                    "description": "Placeholder"
                },
                "required": {
                    "order": "3",
                    "col": "3",
                    "title": null,
                    "description": "Required"
                }
            },
            "PasswordField": {
                "basic": {
                    "order": "1",
                    "col": "3",
                    "title": null,
                    "description": "Basic"
                },
                "disabled": {
                    "order": "2",
                    "col": "3",
                    "title": null,
                    "description": "Disabled"
                },
                "errors": {
                    "order": "6",
                    "col": "4",
                    "title": null,
                    "description": "Errors"
                },
                "placeholder": {
                    "order": "4",
                    "col": "3",
                    "title": null,
                    "description": "Placeholder"
                },
                "required": {
                    "order": "3",
                    "col": "3",
                    "title": null,
                    "description": "Required"
                },
                "security": {
                    "order": "7",
                    "col": "3",
                    "title": null,
                    "description": "Security"
                }
            }
        },
        "list": {
            "List": {
                "empty": {
                    "order": "3",
                    "col": "4",
                    "title": null,
                    "description": "Empty view with custom text when no items"
                },
                "pagination-layout": {
                    "order": "5",
                    "col": "6",
                    "title": null,
                    "description": "Pagination with layout switcher"
                },
                "pagination-more-size": {
                    "order": "4",
                    "col": "6",
                    "title": null,
                    "description": "Pagination with load more and show sizes switcher"
                },
                "pagination-pages": {
                    "order": "2",
                    "col": "4",
                    "title": null,
                    "description": "Pagination with page numbers and custom position (show both: top and bottom)"
                },
                "pagination-search": {
                    "order": "6",
                    "col": "6",
                    "title": null,
                    "description": "Pagination with search form, address bar and custom pagination"
                }
            }
        }
    },
    "components": {
        "base/Enum": {
            "name": "Enum",
            "moduleName": "base/Enum",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "getCssClass",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getCssClasses",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getDropdownItems",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: string, label: unknown}[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getKeys",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getLabel",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getLabels",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "components/ClientStorageComponent": {
            "name": "ClientStorageComponent",
            "moduleName": "components/ClientStorageComponent",
            "title": "Client Storage Component",
            "description": "Слой хранения данных в браузере (cookie, local/session storage) или ReactNative",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/HtmlComponent": {
            "name": "HtmlComponent",
            "moduleName": "components/HtmlComponent",
            "title": "Html Component",
            "description": "Хелпер для работы с БЭМ классами и DOM элементами",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/HttpComponent": {
            "name": "HttpComponent",
            "moduleName": "components/HttpComponent",
            "title": "Http Component",
            "description": "Обертка над Axios для запросов на бекенд. Поддерживает токен авторизации, CSRF и обработку ошибок.",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/LocaleComponent": {
            "name": "LocaleComponent",
            "moduleName": "components/LocaleComponent",
            "title": "Locale Component",
            "description": "Компонент для локализации приложения. Поддерживает конфигурацию языка и временной зоны\n\nПример строки: `{__('{count} {count, plural, one{день} few{дня} many{дней}}', {count: 2})}`\n",
            "tags": {},
            "properties": [
                {
                    "name": "language",
                    "decorators": [],
                    "description": "Язык приложения",
                    "required": true,
                    "type": "string",
                    "example": "ru"
                }
            ],
            "methods": [
                {
                    "name": "moment",
                    "decorators": [],
                    "description": "Получение экземпляра `moment` с учетом временной зоны бекенда",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "Дата",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "format",
                            "decorators": [],
                            "description": "Формат\n",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/MetaComponent": {
            "name": "MetaComponent",
            "moduleName": "components/MetaComponent",
            "title": "Meta Component",
            "description": "Компонент для работы с мета-данными моделей и типами приложения (appType)",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/ResourceComponent": {
            "name": "ResourceComponent",
            "moduleName": "components/ResourceComponent",
            "title": "Resource Component",
            "description": "Компонент для подгрузки внешних API: Google Maps, Yandex Maps, Twitter, ...",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/SocialComponent": {
            "name": "SocialComponent",
            "moduleName": "components/SocialComponent",
            "title": "Social Component",
            "description": "Провайдер для социальных сетей. Обеспечивает вызов окна соц сети для oauth авторизации",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/StoreComponent": {
            "name": "StoreComponent",
            "moduleName": "components/StoreComponent",
            "title": "Store Component",
            "description": "Обертка над Redux Store со встроенными middleware (thunk, multi, promise..) и react-router",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/UiComponent": {
            "name": "UiComponent",
            "moduleName": "components/UiComponent",
            "title": "Ui Component",
            "description": "Компонент для подгрузки и конфигурации UI компонентов приложения",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/WebSocketComponent": {
            "name": "WebSocketComponent",
            "moduleName": "components/WebSocketComponent",
            "title": "Web Socket Component",
            "description": "Компонент, обеспечивающий постоянное web-socket соединение с сервером. Поддерживает подписку на каналы, обработку\nответов и токен авторизации",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/social/FacebookProvider": {
            "name": "FacebookProvider",
            "moduleName": "components/social/FacebookProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/social/GoogleProvider": {
            "name": "GoogleProvider",
            "moduleName": "components/social/GoogleProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/social/SteamProvider": {
            "name": "Vk",
            "moduleName": "components/social/SteamProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/social/VkProvider": {
            "name": "VkProvider",
            "moduleName": "components/social/VkProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "node_modules/es6-error/typings/index.d": {
            "name": "ExtendableError",
            "moduleName": "node_modules/es6-error/typings/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "message",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "name",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "stack",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "Error",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ErrorConstructor",
                    "example": null
                }
            ],
            "methods": []
        },
        "node_modules/intl-messageformat/index.d": {
            "name": "IntlMessageFormat",
            "moduleName": "node_modules/intl-messageformat/index.d",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "defaultLocale",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "format",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "context",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "node_modules/react-day-picker/types/DayPicker.d": {
            "name": "DayPicker",
            "moduleName": "node_modules/react-day-picker/types/DayPicker.d",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "dayPicker",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "HTMLDivElement",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "DateUtils",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "DateUtils",
                    "example": null
                },
                {
                    "name": "DayModifiers",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "DayModifiers",
                    "example": null
                },
                {
                    "name": "LocaleUtils",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "LocaleUtils",
                    "example": null
                },
                {
                    "name": "Modifiers",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Modifiers",
                    "example": null
                },
                {
                    "name": "ModifiersUtils",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ModifiersUtils",
                    "example": null
                },
                {
                    "name": "VERSION",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ReactNode",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "showMonth",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "month",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Date",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "showNextMonth",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "showNextYear",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "showPreviousMonth",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "showPreviousYear",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "node_modules/react-day-picker/types/DayPickerInput.d": {
            "name": "DayPickerInput",
            "moduleName": "node_modules/react-day-picker/types/DayPickerInput.d",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getDayPicker",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "DayPicker",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getInput",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "hideDayPicker",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ReactNode",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "showDayPicker",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "ui/crud/Crud/Crud": {
            "name": "Crud",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_getControls",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_modalUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ICrudProps & ICrudPrivateProps",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "itemId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "PrimaryKey",
                            "example": null
                        },
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "crudItem",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ICrudItem",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_resolveVisible",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "currentCrudItem",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ICrudItem",
                            "example": null
                        },
                        {
                            "name": "crudItem",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ICrudItem",
                            "example": null
                        },
                        {
                            "name": "itemId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "PrimaryKey",
                            "example": null
                        },
                        {
                            "name": "isGrid",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/crud/Crud/CrudDetail": {
            "name": "CrudGrid",
            "moduleName": "ui/crud/Crud/CrudDetail",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/crud/Crud/CrudForm": {
            "name": "CrudForm",
            "moduleName": "ui/crud/Crud/CrudForm",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/crud/Crud/CrudGrid": {
            "name": "CrudGrid",
            "moduleName": "ui/crud/Crud/CrudGrid",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/AutoCompleteField/AutoCompleteField": {
            "name": "AutoCompleteField",
            "moduleName": "ui/form/AutoCompleteField/AutoCompleteField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onBlur",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onChange",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onFocus",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "handleClickOutside",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/BlankField/BlankField": {
            "name": "BlankField",
            "moduleName": "ui/form/BlankField/BlankField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/Button/Button": {
            "name": "Button",
            "moduleName": "ui/form/Button/Button",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "_failedTimer",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "_isMounted",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "defaultProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{block: boolean, className: string, color: string, disabled: boolean, outline: boolean, resetFailedMs: number, showLabelOnLoading: boolean, submitting: boolean, type: string, badge: object}",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onLinkClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderContent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "context",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IFormContext",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/CheckboxField/CheckboxField": {
            "name": "CheckboxField",
            "moduleName": "ui/form/CheckboxField/CheckboxField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "WrappedComponent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/CheckboxListField/CheckboxListField": {
            "name": "CheckboxListField",
            "moduleName": "ui/form/CheckboxListField/CheckboxListField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/DateField/DateField": {
            "name": "DateField",
            "moduleName": "ui/form/DateField/DateField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "fromMonth",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "toMonth",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "WrappedComponent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_formatDate",
                    "decorators": [],
                    "description": "Convert Date to display format",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_handleYearMonthChange",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "month",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_parseDate",
                    "decorators": [],
                    "description": "Convert date from string to Date object",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/DateTimeField/DateTimeField": {
            "name": "DateTimeField",
            "moduleName": "ui/form/DateTimeField/DateTimeField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onChange",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "data",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_parseDate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_parseToState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{date: any, time: any}",
                    "example": null,
                    "parameters": [
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/DropDownField/DropDownField": {
            "name": "DropDownField",
            "moduleName": "ui/form/DropDownField/DropDownField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onReset",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "handleClickOutside",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/Field/Field": {
            "name": "Field",
            "moduleName": "ui/form/Field/Field",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/FieldLayout/FieldLayout": {
            "name": "FieldLayout",
            "moduleName": "ui/form/FieldLayout/FieldLayout",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "defaultProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{className: string, required: boolean, layout: object}",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/FieldList/FieldList": {
            "name": "FieldList",
            "moduleName": "ui/form/FieldList/FieldList",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "defaultProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{className: string, disabled: boolean, enableKeyboardNavigation: boolean, initialRowsCount: number, required: boolean, showAdd: boolean, showRemove: boolean}",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onAdd",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "_onKeyDown",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onRemove",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "rowIndex",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_renderField",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "field",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "prefix",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/FieldSet/FieldSet": {
            "name": "FieldSet",
            "moduleName": "ui/form/FieldSet/FieldSet",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/FileField/FileField": {
            "name": "FileField",
            "moduleName": "ui/form/FileField/FileField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "defaultProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{className: string, disabled: boolean, required: boolean, showRemove: boolean, buttonProps: object}",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/Form/AutoSaveHelper": {
            "name": "AutoSaveHelper",
            "moduleName": "ui/form/Form/AutoSaveHelper",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "STORAGE_KEY_PREFIX",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "remove",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "clientStorage",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "restore",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "clientStorage",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "initialValues",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "save",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "clientStorage",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "values",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/Form/Form": {
            "name": "Form",
            "moduleName": "ui/form/Form/Form",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/Form/SyncAddressBarHelper": {
            "name": "SyncAddressBarHelper",
            "moduleName": "ui/form/Form/SyncAddressBarHelper",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "restore",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "store",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "initialValues",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "forceRestore",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        },
                        {
                            "name": "customizer",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "save",
                    "decorators": [],
                    "description": "WARNING\nMethod incorrectly saves nested objects (e.g. {foo: [{bar: 1}]}",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "store",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "values",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "useHash",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/HtmlField/HtmlField": {
            "name": "HtmlField",
            "moduleName": "ui/form/HtmlField/HtmlField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onEditorStateChange",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "editorState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/HtmlField/demo/basic": {
            "name": "CustomButton",
            "moduleName": "ui/form/HtmlField/demo/basic",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "addText",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/InputField/InputField": {
            "name": "InputField",
            "moduleName": "ui/form/InputField/InputField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "WrappedComponent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/NumberField/NumberField": {
            "name": "NumberField",
            "moduleName": "ui/form/NumberField/NumberField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/PasswordField/PasswordField": {
            "name": "PasswordField",
            "moduleName": "ui/form/PasswordField/PasswordField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/RadioListField/RadioListField": {
            "name": "RadioListField",
            "moduleName": "ui/form/RadioListField/RadioListField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/RangeField/RangeField": {
            "name": "RangeField",
            "moduleName": "ui/form/RangeField/RangeField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "_timer",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "refTo",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/ReCaptchaField/ReCaptchaField": {
            "name": "ReCaptchaField",
            "moduleName": "ui/form/ReCaptchaField/ReCaptchaField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/SliderField/SliderField": {
            "name": "SliderField",
            "moduleName": "ui/form/SliderField/SliderField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onAfterChange",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onChange",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "range",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "normalizeValue",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/SwitcherField/SwitcherField": {
            "name": "SwitcherField",
            "moduleName": "ui/form/SwitcherField/SwitcherField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/TextField/TextField": {
            "name": "TextField",
            "moduleName": "ui/form/TextField/TextField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onKeyUp",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/TimeField/TimeField": {
            "name": "TimeField",
            "moduleName": "ui/form/TimeField/TimeField",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "WrappedComponent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/format/BooleanFormatter/BooleanFormatter": {
            "name": "BooleanFormatter",
            "moduleName": "ui/format/BooleanFormatter/BooleanFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/format/DateFormatter/DateFormatter": {
            "name": "DateFormatter",
            "moduleName": "ui/format/DateFormatter/DateFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/format/DateTimeFormatter/DateTimeFormatter": {
            "name": "DateTimeFormatter",
            "moduleName": "ui/format/DateTimeFormatter/DateTimeFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/format/EnumFormatter/EnumFormatter": {
            "name": "EnumFormatter",
            "moduleName": "ui/format/EnumFormatter/EnumFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/format/FileSize/FileSize": {
            "name": "FileSize",
            "moduleName": "ui/format/FileSize/FileSize",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "asHumanFileSize",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "bytes",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "showZero",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/format/Format/Format": {
            "name": "Format",
            "moduleName": "ui/format/Format/Format",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "WrappedComponent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderContent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "context",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/format/MoneyFormatter/MoneyFormatter": {
            "name": "MoneyFormatter",
            "moduleName": "ui/format/MoneyFormatter/MoneyFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/format/PhotosFormatter/PhotosFormatter": {
            "name": "PhotosFormatter",
            "moduleName": "ui/format/PhotosFormatter/PhotosFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/icon/Icon/Icon": {
            "name": "Icon",
            "moduleName": "ui/icon/Icon/Icon",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/icon/Icon/demo/icon": {
            "name": "default",
            "moduleName": "ui/icon/Icon/demo/icon",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderIcons",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "icons",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderSelectIcons",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "icons",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/layout/Header/Header": {
            "name": "Header",
            "moduleName": "ui/layout/Header/Header",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/layout/Loader/Loader": {
            "name": "Loader",
            "moduleName": "ui/layout/Loader/Loader",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/layout/Notifications/Notifications": {
            "name": "Notifications",
            "moduleName": "ui/layout/Notifications/Notifications",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onClose",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "notificationId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "INotificationsProps & INotificationsPrivateProps",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/layout/Notifications/demo/basic": {
            "name": "NotificationsDemo",
            "moduleName": "ui/layout/Notifications/demo/basic",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/layout/Portal": {
            "name": "Portal",
            "moduleName": "ui/layout/Portal",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "el",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "HTMLDivElement",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/layout/Tooltip/Tooltip": {
            "name": "Tooltip",
            "moduleName": "ui/layout/Tooltip/Tooltip",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "_childRef",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "RefObject",
                    "example": null
                },
                {
                    "name": "_gap",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "_position",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "_timer",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "calculatePosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "tooltipDimension",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "arrowDimensions",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onHideTooltip",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onShowTooltip",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "optimizeArrowInHorizontalBottom",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "arrowHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "optimizeArrowInHorizontalTop",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "optimizeArrowInVerticalLeft",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "optimizeArrowInVerticalRight",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "arrowWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setHorizontalBottomPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentTop",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "tooltipHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "arrowHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setHorizontalPositionLeft",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentLeft",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentRight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "tooltipWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setHorizontalPositionRight",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentLeft",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentRight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "tooltipWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setHorizontalTopPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentTop",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "tooltipHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setVerticalLeftPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentLeft",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "tooltipWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setVerticalPositionBottom",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentTop",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "tooltipHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setVerticalPositionTop",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentTop",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "tooltipHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setVerticalRightPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null,
                    "parameters": [
                        {
                            "name": "parentRight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "tooltipWidth",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "arrowHeight",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "updatePosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "substr",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "newSubstr",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "sliceType",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "\"byType\" | \"byModify\"",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/layout/Tooltip/TooltipPortalInner": {
            "name": "TooltipPortal",
            "moduleName": "ui/layout/Tooltip/TooltipPortalInner",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/list/Accordion/Accordion": {
            "name": "Accordion",
            "moduleName": "ui/list/Accordion/Accordion",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onToggle",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_renderHeader",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "index",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_renderItem",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "index",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_renderItemInternal",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "index",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "ItemView",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "itemProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/list/CheckboxColumn/CheckboxColumn": {
            "name": "CheckboxColumn",
            "moduleName": "ui/list/CheckboxColumn/CheckboxColumn",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onChange",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/list/ControlsColumn/ControlsColumn": {
            "name": "ControlsColumn",
            "moduleName": "ui/list/ControlsColumn/ControlsColumn",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/list/Detail/Detail": {
            "name": "Detail",
            "moduleName": "ui/list/Detail/Detail",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderLabel",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "attribute",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderValue",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "attribute",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/list/Empty/Empty": {
            "name": "Empty",
            "moduleName": "ui/list/Empty/Empty",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/list/Grid/Grid": {
            "name": "Grid",
            "moduleName": "ui/list/Grid/Grid",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderLabel",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "column",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderValue",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "column",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/list/List/List": {
            "name": "List",
            "moduleName": "ui/list/List/List",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderItem",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "index",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/list/Pagination/Pagination": {
            "name": "Pagination",
            "moduleName": "ui/list/Pagination/Pagination",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onSelect",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "page",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onSelectNext",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "generatePages",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null,
                    "parameters": [
                        {
                            "name": "page",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "totalPages",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/list/PaginationSize/PaginationSize": {
            "name": "PaginationSize",
            "moduleName": "ui/list/PaginationSize/PaginationSize",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "defaultProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{sizes: number[]}",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onSelect",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/modal/Modal/Modal": {
            "name": "Modal",
            "moduleName": "ui/modal/Modal/Modal",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/modal/Modal/demo/basic": {
            "name": "MyModal",
            "moduleName": "ui/modal/Modal/demo/basic",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/modal/ModalPortal/ModalPortal": {
            "name": "ModalPortal",
            "moduleName": "ui/modal/ModalPortal/ModalPortal",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "defaultProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{animationDelayMc: number, group: string}",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_closeInternal",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onClose",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderModal",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "index",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/nav/Breadcrumbs/Breadcrumbs": {
            "name": "Breadcrumbs",
            "moduleName": "ui/nav/Breadcrumbs/Breadcrumbs",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/nav/Controls/Controls": {
            "name": "Controls",
            "moduleName": "ui/nav/Controls/Controls",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/nav/Link/Link": {
            "name": "Link",
            "moduleName": "ui/nav/Link/Link",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/nav/Nav/Nav": {
            "name": "Nav",
            "moduleName": "ui/nav/Nav/Nav",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_onClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "index",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderContent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/nav/Router/Router": {
            "name": "Router",
            "moduleName": "ui/nav/Router/Router",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "context",
                    "decorators": [],
                    "description": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.\n\n```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly & Readonly",
                    "example": null
                },
                {
                    "name": "refs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "state",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Readonly",
                    "example": null
                },
                {
                    "name": "contextType",
                    "decorators": [],
                    "description": "If set, `this.context` will be set at runtime to the current value of the given Context.\n\nUsage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
                    "required": false,
                    "type": "Context",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_findRedirectPathRecursive",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "route",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IRouteItem",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_renderItem",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "route",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IRouteItem",
                            "example": null
                        },
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "forceUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderContent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "setState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "state",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{} | S | Pick",
                            "example": null
                        },
                        {
                            "name": "callback",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/nav/Router/SsrProvider": {
            "name": "SsrProvider",
            "moduleName": "ui/nav/Router/SsrProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "snapshot",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "SS",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/nav/Tree/Tree": {
            "name": "Tree",
            "moduleName": "ui/nav/Tree/Tree",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "STORAGE_KEY_PREFIX",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "UNSAFE_componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "UNSAFE_componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "UNSAFE_componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_autoOpen",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null,
                    "parameters": [
                        {
                            "name": "items",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "level",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_findChildById",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "items",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "itemId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "level",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_getItems",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null,
                    "parameters": [
                        {
                            "name": "items",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "level",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_initState",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{opened: any, selectedUniqId: any}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "_onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "uniqId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "_resolveId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "index",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "parentId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidCatch",
                    "decorators": [],
                    "description": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Error",
                            "example": null
                        },
                        {
                            "name": "errorInfo",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ErrorInfo",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentDidMount",
                    "decorators": [],
                    "description": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentDidUpdate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillMount",
                    "decorators": [],
                    "description": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillReceiveProps",
                    "decorators": [],
                    "description": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "componentWillUnmount",
                    "decorators": [],
                    "description": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "componentWillUpdate",
                    "decorators": [],
                    "description": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                    "required": true,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getSnapshotBeforeUpdate",
                    "decorators": [],
                    "description": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                    "required": true,
                    "type": "SS | null",
                    "example": null,
                    "parameters": [
                        {
                            "name": "prevProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "prevState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "render",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Element",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "shouldComponentUpdate",
                    "decorators": [],
                    "description": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextState",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Readonly",
                            "example": null
                        },
                        {
                            "name": "nextContext",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        }
    }
}