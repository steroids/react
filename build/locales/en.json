{
    "Компонент для подгрузки и конфигурации UI компонентов приложения": "",
    "Обертка над корневым компонентом приложения, используется только в `Application.tsx`. Добавляет через React Context\nкомпоненты приложения и конфигурирует их.": "",
    "\nКомпонент-аккордеон позволяет создавать интерактивные списки или контейнеры,\nгде содержимое может быть развернуто или свернуто по требованию пользователя.\nКаждый элемент аккордеона может быть раскрытым или свернутым, и пользователь может\nизменять их состояние путем нажатия на соответствующий заголовок элемента.\n\nКомпонент `Accordion` обычно используется для создания разделов, подразделов или\nсписков, где необходимо показывать или скрывать дополнительную информацию по требованию.\n\nВнутри компонента `Accordion` могут быть использованы дочерние элементы `AccordionItem`,\nкаждый из которых представляет отдельный элемент аккордеона с заголовком и содержимым.\nПри нажатии на заголовок, соответствующий элемент может быть развернут или свернут.\n\nПримечание: В компоненте `Accordion` должен быть указан хотя бы один дочерний элемент `AccordionItem`.\n": "",
    "\nКомпонент оповещения, который отображает сообщения для пользователя.\nОн может быть использован для показа уведомлений, предупреждений или ошибок,\nкоторые требуют внимания пользователя.\n\nКомпонент `Alert` может содержать текстовое сообщение и дополнительное описание,\nа также опциональную кнопку для закрытия оповещения.\n\nОповещения могут иметь различные типы, такие как 'success', 'info', 'warning', 'error'\nили другие пользовательские типы.\n\nКомпонент также предлагает настройки для отображения иконки, анимации, а также\nобратного вызова при закрытии оповещения.\n": "",
    "\nКомпонент аватара, который отображает изображение пользователя или иконку.\nОн может использоваться для представления пользователя, контакта или профиля.\n\nКомпонент `Avatar` позволяет указать размер, форму, изображение или иконку,\nа также добавить альтернативный текст и статус онлайна.\n\nЕсли изображение аватара не загружается, можно показать альтернативный текст\nили иконку вместо него.\n": "",
    "\nКомпонент бэйджа, который используется для отображения информационных меток на элементах пользовательского интерфейса.\nОн может использоваться для обозначения статуса, количества, типа или любой другой важной информации.\n\nКомпонент `Badge` позволяет указать тип бэйджа, стиль скругления, наличие кнопки для закрытия,\nтекст сообщения, отображение счетчика и размер.\n\nЕсли установлен флаг `showClose`, то пользователь может закрыть бэйдж, вызывая соответствующую callback функцию `onClose`.\n": "",
    "\nКомпонент календаря, который позволяет выбирать даты или диапазоны дат.\nОн предоставляет пользователю удобный способ выбора даты и может использоваться для различных целей,\nтаких как выбор даты доставки, даты резервирования и т.д.\n\nКомпонент `Calendar` позволяет указать значение даты или диапазона дат, формат значения, callback функцию при изменении,\nсвойства для компонента `DayPicker`, отображение панели выбора месяца/года, количество отображаемых месяцев и другие свойства.\n\nЕсли установлено значение `showFooter`, то будет отображаться футер с кнопкой \"Today\".\n": "",
    "\nКомпонент карточки, который представляет контент в структурированном формате с заголовком, обложкой, описанием,\nкнопками, ссылками и другими элементами.\n\nКомпонент `Card` позволяет передать дочерние элементы, обложку, описание, заголовок, параметры заголовка,\nфутер, коллекцию ссылок и коллекцию кнопок.\n": "",
    "\nКомпонент, позволяющий копировать заданное значение в буфер обмена при клике.\n\nКомпонент `CopyToClipboard` принимает значение `value` для копирования, а также\nможет отображать иконку, дополнительный текст или другие дочерние элементы.\n\nПри успешном копировании значения, можно также отобразить уведомление с помощью\nпараметра `notification`. Можно задать текст уведомления, его уровень и параметры.\n\nКомпонент также поддерживает обработчик `onCopy`, который вызывается при копировании.\n": "",
    "\nПредставление данных в виде таблицы, в которой поля группируются по принципу \"ключ-значение\".\n\nКомпонент `Detail` принимает данные в виде дочерних компонентов `DetailItem`, которые отображаются\nв виде таблицы с ячейками \"ключ-значение\".\n\nКомпонент поддерживает различные настройки, такие как размер ячеек, вариант расположения\nячеек (\"horizontal\" или \"vertical\"), а также респонсивный режим, позволяющий перестраивать\nтаблицу при изменении размеров окна.\n\nКомпонент также может отображать заголовок таблицы и контролы, расположенные рядом с таблицей.\n": "",
    "Элемент \"ключ-значение\" в таблице Detail": "",
    "\nКомпонент, представляющий меню с элементами, которые могут быть выбраны или нажаты.\nКомпонент позволяет отображать и скрывать содержимое меню, а также управлять его позиционированием.\n": "",
    "\nКомпонент, представляющий иконку. Иконки могут быть импортированы при старте приложения.\n": "",
    "\nКомпонент-меню позволяет создавать выпадающие списки с элементами, которые могут быть выбраны\nили выполнить определенные действия при клике на них.\n\nКомпонент `Menu` обычно используется для создания навигационных меню или контекстных меню,\nгде пользователь может выбирать опции или выполнять определенные действия в зависимости от выбранного элемента.\n\nКомпонент `Menu` принимает массив `items`, каждый элемент которого представляет собой отдельный пункт меню.\nКаждый пункт меню имеет заголовок `label`, функцию `onClick`, которая будет вызываться при клике на элемент,\nкастомную иконку `icon` (необязательно) и флаг `hasBorder`, определяющий наличие нижней границы у элемента.\n\nПримечание: Компонент `Menu` требует указания хотя бы одного элемента меню в свойстве `items`.\n": "",
    "\nКомпонент слайдера позволяет создавать слайдшоу, где элементы могут быть пролистаны\nс помощью прокрутки или перетаскивания.\n\nКомпонент `Slider` принимает следующие свойства:\n\n- `sliderOptions`: опции слайдера, используемые для настройки поведения слайдера. (тип: Options)\n- `items`: элементы слайдера, представленные в виде массива записей. (тип: Record<string, any>[])\n- `itemView`: представление элемента слайдера, используемое для кастомизации отображения каждого слайда. (тип: CustomView | any)\n- дополнительные свойства: любые дополнительные свойства, которые могут быть переданы компоненту.\n\nПримечание: Компонент `Slider` требует указания опций слайдера (`sliderOptions`) и элементов слайдера (`items`).\n": "",
    "\nКомпонент CRUD (Create, Read, Update, Delete) предоставляет интерфейс для выполнения операций создания,\nчтения, обновления и удаления записей. Он позволяет создавать, просматривать, редактировать и удалять\nзаписи из некоторой модели данных.\n\nКомпонент `Crud` принимает следующие свойства:\n\n- `crudId`: идентификатор для CRUD (тип: string)\n- `mode`: режим работы CRUD (тип: 'page' | 'modal')\n- `restUrl`: ссылка на REST API (тип: string)\n- `restApi`: методы REST API (тип: IApiRest)\n- `primaryKey`: первичный ключ записей (тип: 'id' | string)\n- `queryKey`: ключ запроса (тип: 'id' | string)\n- `model`: модель данных (тип: string)\n- `searchModel`: модель данных используемая для поиска (тип: string)\n- `index`: параметры для колонки index (тип: boolean | ICrudItem)\n- `create`: параметры для колонки create (тип: boolean | ICrudItem)\n- `update`: параметры для колонки update (тип: boolean | ICrudItem)\n- `view`: параметры для колонки view (тип: boolean | ICrudItem)\n- `delete`: параметры для колонки delete (тип: boolean | ICrudItem)\n- `items`: коллекция элементов (тип: ICrudItem[] | { [key: string]: ICrudItem })\n- `grid`: параметры Grid (тип: IGridProps | React.ReactNode)\n- `form`: параметры формы (тип: IFormProps | React.ReactNode)\n- `detail`: параметры для колонки detail (тип: any)\n- `crudView`: представление для CRUD (тип: CustomView)\n- `errorHandler`: функция-обработчик ошибок (тип: (error, dispatch: any) => void)\n\nПримечание: Компонент `Crud` требует указания идентификатора CRUD (`crudId`) и ссылки на REST API (`restUrl`).\n": "",
    "\nПоле ввода текста с подсказками (auto-complete). Он позволяет пользователю вводить текст и предлагает\nварианты автозаполнения на основе предоставленных данных.\n\nКомпонент `AutoCompleteField` принимает следующие свойства:\n\n- `searchOnFocus`: при фокусировке на поле ввода будет запускаться поиск (тип: boolean)\n- все остальные свойства являются наследниками интерфейсов `IBaseFieldProps`, `IDataProviderConfig` и `IDataSelectConfig`\n\nПримечание: Компонент `AutoCompleteField` требует указания списка элементов (`items`) и предоставления\nконфигурации для провайдера данных (`dataProvider`) и выборки данных (`autoComplete` и `autoFetch`).\n": "",
    "\nПустое поле. Он отображает переданный текст или дочерние элементы.\n\nКомпонент `BlankField` принимает следующие свойства:\n\n- `text`: текст для отображения (тип: string | React.ReactNode)\n- `children`: дочерние элементы (тип: React.ReactNode)\n- все остальные свойства являются наследниками интерфейсов `IFieldWrapperInputProps` и `IUiComponent`\n": "",
    "Кнопка или ссылка. Используется в интерфейсе для выполнения какого-либо действия по клику (onClick),\nсмена страницы в рамках роутинга (goToRoute), переход по внешней ссылке (url) или отправки формы (submit form)": "",
    "\nОдиночный чекбокс. Используется в формах для отметки булевого значения.\n": "",
    "\nСписок с чекбоксами. Используется в формах для выбора нескольких значений.\n\n": "",
    "\nПоле ввода с выпадающим календарём для выбора даты.\n\nКомпонент `DateField` предоставляет возможность создания поля ввода с календарём для выбора даты.\nОн предоставляет пользователю удобный интерфейс для выбора даты с помощью календаря,\nа также поддерживает настройку формата отображения даты и другие параметры.\n": "",
    "\nПоле ввода дипазона двух дат с выпадающим календарём.\n\nКомпонент `DateRangeField` предоставляет возможность создания поля ввода диапазона двух дат с выпадающим календарём.\n Он позволяет пользователю выбрать начальную и конечную даты с помощью календаря и предоставляет удобный интерфейс для работы с диапазоном дат.\n": "",
    "\nПоля ввода с выпадающими списками для выбора даты и времени.\n\nКомпонент `DateTimeField` предоставляет возможность создания полей ввода для выбора даты и времени с помощью выпадающих списков.\n Он объединяет функциональность компонента `DateField` для выбора даты и компонента `TimePanel` для выбора времени.\n": "",
    "\nПоле ввода дипазона двух дат со временем, с выпадающим календарём.\n\nКомпонент `DateTimeRangeField` предоставляет возможность создания поля ввода для выбора диапазона двух дат с временем\nс помощью выпадающих списков и календаря.\nОн объединяет функциональность компонента `DateRangeField` для выбора диапазона дат и компонента `DateTimeField` для выбора времени.\n": "",
    "\nВыпадающий список для выбора одного или нескольких значений.\n\nКомпонент `DropDownField` предоставляет возможность создания выпадающего списка для выбора одного или нескольких значений.\nОн поддерживает различные типы контента для элементов списка, такие как флажки, радиокнопки, иконки и изображения.\n\n": "",
    "\nКомпонент, который рендерит соответствующее поле, исходя из переданной модели и названия атрибута.\nПо умолчанию будет отрендерен InputField.\nТакже можно не использовать модель, а передавать компонент поля напрямую через пропсы.\n": "",
    "\nСпециальный шаблон для поля, который настраивает его расположение внутри формы, рендерит лейбл, подсказки и ошибки.\n\n": "",
    "Создает список из сгруппированных полей формы": "",
    "Компонент для группировки полей формы": "",
    "\nКомпонент `FileField` представляет собой поле формы для загрузки файлов.\nОн использует хук `useFile` для управления состоянием файлов и выполнения операций с файлами, таких как выбор и удаление.\nКомпонент поддерживает различные варианты отображения файлов (список или стена) с помощью перечисления `FilesLayout`.\n": "",
    "\nКомпонент для создания формы. Предоставляет управление и синхронизацию состояния формы,\nа также позволяет выполнять отправку данных формы на сервер с возможностью валидации и обработки результатов.\n": "",
    "Компонент для создания HTML-разметки, использующий WYSIWYG редактор": "",
    "\nКомпонент для загрузки изображений с возможностью обрезки и предпросмотра.\n": "",
    "Поле ввода текста": "",
    "Компонент навигации как часть формы.\n\nЭтот компонент представляет собой навигационное меню, которое можно использовать\nкак часть формы для выбора различных элементов или вкладок.\n": "",
    "\nЧисловое поле ввода. Этот компонент представляет собой поле ввода для числовых значений.\n": "",
    "\nПоле ввода пароля. Этот компонент представляет собой поле ввода для паролей.\n\n": "",
    "\nКомпонент RadioField представляет собой элемент выбора типа \"radio\". Он позволяет пользователю выбрать один вариант из нескольких предложенных.\n": "",
    "Список с радиокнопками. Используется в формах для выбора одного значения.": "",
    "Поле для проставления рейтинга": "",
    "Компонент для использования ReCAPTCHA v3 от Google: https://developers.google.com/recaptcha/docs/v3.\nЧтобы добавить ReCAPTCHA в форму необходимо:\n1) Передать siteKey в ResourceComponent.\n2) Поместить на сайт скрипт от Google с помощью метода экземпляра ResourceComponent\n(скрипт анализирует поведение пользователя).\n3) Разместить ReCaptchaField внутри компонента Form. На событие формы onSubmit отправится запрос в Google для\nполучения токена. Далее этот токен с остальными данными формы отправится на бэкенд.\nСам компонент отображает ссылки на политику конфиденциальности и условия использования сервисов Google.": "",
    "Компонент с ползунком для выбора числового значения в пределах указанного промежутка": "",
    "Список с кнопками. Используется для выбора одного значения.": "",
    "Поле для ввода нескольких строк текста": "",
    "Поле для выбора времени": "",
    "\nКомпонент TimeRangeField представляет собой поле выбора временного диапазона, состоящего из двух элементов ввода времени (from и to).\n": "",
    "\nКомпонент BooleanFormatter предназначен для форматирования значения типа boolean, string или number.\nОн позволяет кастомизировать отображение значения, используя переданный view React компонент.\n": "",
    "\nКомпонент DateFormatter предназначен для форматирования даты с использованием заданного формата.\nОн позволяет кастомизировать отображение даты, используя переданный view React компонент.\n": "",
    "\nКомпонент DateTimeFormatter предназначен для форматирования даты и времени с использованием заданного формата.\nОн позволяет кастомизировать отображение даты и времени, используя переданный view React компонент.\n": "",
    "\nКомпонент EnumFormatter предназначен для форматирования перечисления элементов с использованием заданного формата.\nОн позволяет кастомизировать отображение элементов, используя переданный view React компонент.\n": "",
    "\nКомпонент FileSize предназначен для форматирования размера файла в человеко-читаемом формате.\nОн позволяет кастомизировать отображение размера файла, используя переданный view React компонент.\n": "",
    "\nКомпонент Format предназначен для форматирования значения на основе заданного форматтера.\nОн позволяет кастомизировать отображение значения, используя переданный view React компонент.\n": "",
    "\nКомпонент MoneyFormatter предназначен для форматирования денежных значений с учетом валюты и округления.\nОн позволяет кастомизировать отображение денежного значения, используя переданный view React компонент.\n": "",
    "\nКомпонент Header представляет собой верхнюю часть макета страницы.\nОн может содержать логотип и навигацию, а также кастомизироваться с помощью переданного view React компонента.\n": "",
    "\nКомпонент Loader представляет собой индикатор загрузки,\nкоторый может использоваться для обозначения процесса загрузки данных или выполнения операции.\n": "",
    "Progress bar. Отображает текущий прогресс какой-либо операции": "",
    "во время загрузки или ожидания загрузки реальных данных.": "",
    "Колонка с чекбоксом, которая позволяет выбирать одну или все записи в таблице.": "",
    "Компонент используется в качестве заглушки в случае, когда пришла пустая коллекция данных.": "",
    "Flex контейнер для элементов и компонентов.": "",
    "Компонент для представления данных коллекции в виде таблицы.": "",
    "Переключает варианты расположения элементов коллекции.\nСохраняет выбранный пользователем шаблон в LocalStorage.": "",
    "Компонент для представления коллекции в виде списка.": "",
    "Компонент с пагинацией страниц.": "",
    "Компонент для выбора количества элементов в списке": "",
    "Форма для поиска элементов в коллекции list-компонента.\nФорма хранит значения в локальном состоянии, а на onSubmit отправляет их в хранилище Redux,\nпосле чего в list-компонент подгружаются новые элементы коллекции.": "",
    "Модальное окно": "",
    "Коллекция с контролами. Можно передавать список с кастомными контролами, а можно использовать стандарные контролы\nкомпонента. Стандартные контролы подходят для CRUD-операций, все что нужно для их использования - передать\nсоответствующий id и обработчик - внешний вид (иконка и название) отобразятся автоматом.": "",
    "Ссылка": "",
    "Компонент навигации": "",
    "Маршрутизатор.\nКомпонент получает общий для приложения шаблон и дерево роутов. Из дерева роутов посредством React Router\nобразуется switch-конструкция, которая в зависимости от текущего пути рендерит соответствующий компонент страницы.\nИли осуществляет редирект на другую страницу. Все страницы оборачиваются в переданный шаблон.": "",
    "Компонент, который представляет в виде дерева список с иерархической структурой данных": "",
    "Url, который вернет коллекцию элементов.": "",
    "Тип HTTP запроса (GET | POST | PUT | DELETE)": "",
    "Функция условия, используемая для определения поведения списка на основе параметров запроса.": "",
    "Идентификатор формы, связанной с данным списком.": "",
    "Логическое значение, указывающее, был ли список получен или нет.": "",
    "Логическое значение, указывающее, находится ли список в процессе загрузки или нет.": "",
    "Логическое значение, указывающее, является ли список удаленным или нет.": "",
    "Массив элементов списка.": "",
    "Атрибут макета для списка.": "",
    "Название макета, связанного с данным списком.": "",
    "Идентификатор списка.": "",
    "Логическое значение, указывающее, можно ли загрузить еще элементы для списка.": "",
    "Дополнительные метаданные для списка.": "",
    "Обработчик события ошибки выполнения запроса": "",
    "Функция обратного вызова, вызываемая при получении списка.": "",
    "Атрибут страницы для списка.": "",
    "Атрибут размера страницы для списка.": "",
    "Первичный ключ для списка.": "",
    "Массив строк, представляющих область списка.": "",
    "Атрибут сортировки для списка.": "",
    "Массив исходных элементов списка.": "",
    "Общее количество элементов в списке.": "",
    "URL для загрузки Geetest.": "",
    "URL для загрузки Google reCAPTCHA.": "",
    "URL для загрузки Google Maps API.": "",
    "URL для загрузки Twitter виджетов.": "",
    "URL для загрузки Yandex Maps API.": "",
    "Свойство для хранения обратных вызовов.": "",
    "Свойство для хранения компонентов.": "",
    "API-ключ Google для использования Google Maps и других сервисов.": "",
    "Ключ сайта Google reCAPTCHA.": "",
    "Языковой код, используемый для загрузки ресурсов.": "",
    "Элемент портала.": "",
    "Зарегистрированные компоненты полей формы.": "",
    "Компоненты приложения.": "",
    "Компоненты полей формы для использования в приложении.": "",
    "Компоненты форматтеры для использования в приложении.": "",
    "Иконки для использования в приложении.": "",
    "Включает \"умное\" позиционирование - если компонент не может быть помещен в промежуток между целевым компонентом\nи краем viewport, тогда он будет показан в противоположном направлении от заданного в свойстве position.": "",
    "Дочерние элементы": "",
    "Задержка перед размонтированием компонента, когда он должен быть скрыт.\nВ этот момент удобно применять различные анимации ухода.": "",
    "Промежуток между компонентом и целевым элементом.\nИспользуется в рассчетах позиционирования.": "",
    "Срабатывает в \"ручном режиме\", при клике за пределами компонента и целевого элемента.\nВозвращает значение visible.": "",
    "Обработчик изменения свойства isComponentVisible (отображение на странице).\nВозвращает значение isComponentVisible.": "",
    "Позиционирование компонента, относительно целевого элемента": "",
    "Отобразить или скрыть компонент.\nВключает \"ручной режим\", при котором можно задать логику отображения компонента извне,\nчерез измененение данного свойства.": "",
    "Нужно ли рендерить компонент": "",
    "Нужно ли показывать компонент на странице": "",
    "Объект стилей для абсолютного позиционирования": "",
    "Флаг для управления включением синхронизации с addressBar": "",
    "Модель": "",
    "Использовать ли #": "",
    "These fetch configurations will be used to preload and store for no matter what route matched in case of SSR": "",
    "Задержка в миллисекундах перед осуществлением запроса": "",
    "Подключить autocomplete?": "",
    "Минимальная длина запроса": "",
    "URL для подгрузки новой коллекции данных": "",
    "Обработчик, который вызывается для подгрузки данных.\nЕсли обработчик не передан, то по умолчанию отправится post-запрос.": "",
    "Параметры запроса": "",
    "Уникальный (глобально) идентификатор, под которых будут храниться\nподгруженные данные в redux (при включенном флаге useRedux). Если\nне задан - данные будут храниться в локальном стейте": "",
    "Настройки поиска": "",
    "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.": "",
    "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.": "",
    "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`": "",
    "Коллекция элементов": "",
    "Текст запроса": "",
    "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится": "",
    "Значение поля в форме": "",
    "Список с видимыми элементами": "",
    "Возможность множественного выбора": "",
    "Первичный ключ для item": "",
    "Сделать активным первый элемент в списке": "",
    "Список с идентификаторами выбранных элементов": "",
    " Список со всеми элементами": "",
    "Идентификатор элемента": "",
    "Отображаемое название для IDataSelectItem": "",
    "Экшен для отправки на бэкенд": "",
    "Точные размеры изображений": "",
    "Использовать только изображения": "",
    "Начальные файлы": "",
    "Параметры для input элемента": "",
    "Список mime-типов": "",
    "Множественный выбор файлов": "",
    "Позволяет указать uploader": "",
    "Параметры для uploader": "",
    "Url, который вернет коллекцию элементов": "",
    "Синхронизация значений формы списка с адресной строкой": "",
    "Удаление данных списка из хранилища Redux при размонтировании компонента": "",
    "Отправлять запрос на обновление данных при изменении данных формы. По-умолчанию - включено.": "",
    "Обработчик, который составляет список условий для локальной фильтрации элементов коллекции": "",
    "Заглушка в случае отсутствия элементов": "",
    "Начальные элементы. Используется для подгрузки нескольких списков в один запрос, при этом не отменяя пагинацию\nи последующие запросы на бекенд для 2-й и следующих страниц": "",
    "Количество элементов всего в списке (для отрисовки пагинации), заданное вручную": "",
    "Состояние загрузки элементов списка": "",
    "Элементы коллекции": "",
    "Варианты расположения элементов коллекции": "",
    "Идентификатор списка": "",
    "Обработчик, который вызывается при изменении значений формы, и нужен для подгрузки новых элементов коллекции": "",
    "Подключение пагинации": "",
    "Переключение количества элементов в списке": "",
    "Дополнительные параметры, значения которых нужно передавать в запросе для получения данных": "",
    "Параметр для загрузки данных списка с сервера": "",
    "Форма для поиска элементов": "",
    "Модель для синхронизации значений формы с адресной строкой": "",
    "Подключение сортировки": "",
    "Аттрибут (название) поля сортировки в форме": "",
    "Значение сортировки по умолчанию. Нужно указать название свойства, по которому items будут сортироваться,\nа с помощью знака \"-\" задать тип сортировки (со знаком минус - сортировать по убыванию, иначе по возрастанию).": "",
    "Включить сортировку": "",
    "Дополнительный CSS-класс для элемента отображения": "",
    "Объект CSS стилей": "",
    "Переопределение view React компонента для кастомизации отображения": "",
    "Пользовательская иконка закрытия": "",
    "Пользовательская иконка открытия": "",
    "Номер активного AccordionItem, который может меняться динамический или быть статичным": "",
    "Переводит Accordion в выключенное состояние": "",
    "Включает режим в котором можно открыть только один AccordionItem": "",
    "Пользовательская иконка svg или название иконки или объект с иконками open и close": "",
    "Вызываемая функция при каждом изменении состояния": "",
    "Стилизация позиционирования.\nПри значении \"top\" верхняя часть шапки будет закруглена.": "",
    "Отображать ли иконку у AccordionItem": "",
    "Тема аккордеона": "",
    "Название AccordionItem": "",
    "Флаг, который включает анимацию": "",
    "Время анимации в миллисекундах": "",
    "Дополнительное содрежание сообщения.": "",
    "Основное сообщения Оповещения": "",
    "Callback функция вызываемая при нажатии на кнопку закрытия": "",
    " Нужно ли отображать кнопку, чтобы закрыть Оповещение": "",
    "Нужно ли отображать иконку, соответствующую типа Оповещения": "",
    "Типы Оповещений": "",
    "Альтернативный текст для изображения": "",
    "Наличие обводки вокруг аватара": "",
    "Форма аватара": "",
    "Размер аватара": "",
    "Ссылка на изображение для аватара": "",
    "Набор адаптивных изображений": "",
    "Статус онлайна": "",
    "Заголовок аватарки": "",
    "Нужно ли отображать счетчик": "",
    "Текст для badge": "",
    "Стиль скругления": "",
    "Нужно ли отображать кнопку, чтобы закрыть badge": "",
    "Размер для badge": "",
    "Тип badge": "",
    "Содержимое счетчика": "",
    "Состояние счетчика": "",
    "Количество отображаемых за раз месяцев": "",
    "Функция возвращает выбранную в календаре дату": "",
    "Свойства для компонента DayPickerInput": "",
    "Отображать Footer для календаря (содержит todayButton)": "",
    "Значение задает выбранные в календаре дату или диапазон дат.\nНеобходимо передать валидную дату в виде строки (массива строк)": "",
    "Формат даты отправляемый на сервер": "",
    "Пропсы для компонента отображения": "",
    "Самый крайний год в прошлом": "",
    "Отображает панель для выбора месяца/года": "",
    "Текущий месяц календаря, также задает выбранный в календаре год": "",
    "Функция обновляет значение выбранного месяца": "",
    "Хранит выбранную дату или диапазон дат": "",
    "Самый крайний год в будущем": "",
    "Функция изменения состояние отображения панели для выбора месяца/года": "",
    "Параметры для аватара": "",
    "Текст шапки (заголовок)": "",
    "Свойства для компонента <Menu/>": "",
    "Коллекция кнопок": "",
    "Обложка для карточки, нужно передать ссылку на изображение": "",
    "Описание карточки": "",
    "Контент футера": "",
    "Контент хедера": "",
    "Коллекция ссылок": "",
    "Заголовок карточки": "",
    "Дочерний элемент": "",
    "Переводит состояние компонента в выключенное": "",
    "Иконка": "",
    "Параметры для уведомления, которое появляется после копирования": "",
    "Callback который вызывается при копировании": "",
    "Позволяет включить или выключить отображение иконки": "",
    "Значение, которое будет использоваться при копировании": "",
    "Значение": "",
    "Дополнительный CSS-класс для ячейки со значением": "",
    "Наименование": "",
    "Дополнительный CSS-класс для ячейки с наименованием": "",
    "Количество колонок, которое занимает элемент": "",
    "Максимальная ширина таблицы в px": "",
    "Количество колонок, которое будет применяться, начиная от указанной ширины и меньше": "",
    "Дочерние компоненты": "",
    "Максимальное количество колонок": "",
    "Контролы, которые нужно расположить рядом с таблицей": "",
    "Вариант расположения ячеек \"ключ-значение\"": "",
    "Перестраивать таблицу при ресайзе": "",
    "Размер ячеек в таблице": "",
    "Заголовок таблицы": "",
    "Брейкпоинты": "",
    "Дополнительный CSS-класс": "",
    "В каком случае закрывать DropDown. По-умолчанию - `click-away`": "",
    "Содержимое DropDown (компонент или jsx-код)": "",
    "Позволяет управлять отображением указателя": "",
    "Переопределение view React компонента для кастомизациии отображения": "",
    "Рассчет абсолютной позиции": "",
    "Ссылка на view": "",
    "Имя иконки (латиницей). Импорт иконок происходит на старте приложения.": "",
    "Функция которая вызывается при клике по иконке": "",
    " Должен ли данный элемент участвовать в последовательной навигации": "",
    "Заголовок, отображаемый при наведении (через нативное поле title)": "",
    "Нижний border": "",
    "Кастомная иконка": "",
    "Заголовок элемента меню": "",
    "Функция вызываемая при клике": "",
    "Пропсы для DropDown": "",
    "Кастомная иконка, по клику на которую открывается меню": "",
    "Переопределение view React элемента меню для кастомизации отображения": "",
    "  Элементы меню": "",
    "Представление элемента слайдера.": "",
    "Элементы слайдера.": "",
    "Опции слайдера.": "",
    "Параметры для колонки create": "",
    "Id для Crud": "",
    "Представление для Crud": "",
    "Параметры для колонки delete": "",
    "Параметры для колонки detail": "",
    "Функция-обработчик ошибок": "",
    "Параметры формы": "",
    "Параметры Grid": "",
    "Параметры для колонки index": "",
    "Режим работы Crud": "",
    "Первичный ключ": "",
    "Ключ запроса": "",
    "Методы rest api": "",
    "Ссылка на rest": "",
    "Модель используемая для поиска": "",
    "Параметры для колонки update": "",
    "Представление": "",
    "Компонент страницы, который отобразится, если путь будет соответствовать location.pathname": "",
    "Свойства для компонента страницы": "",
    "Название или список с названиями перечислений, полученных с бэкенда": "",
    "Если true, то путь должен точно соответствовать location.pathname": "",
    "Идентификатор роута": "",
    "Отображать ссылку или кнопку в навигации для перехода на данный роут": "",
    "Отображать или показывать роут": "",
    "Вложенные роуты": "",
    "Текст, который отобразится на кнопке навигации для данного роута": "",
    "Тип шаблона для данного роута": "",
    "Название или список с названиями моделей, полученных с бэкенда": "",
    "Путь до роута": "",
    "Обработчик, который принимает параметры URL и возвращает массив с пропсами для хука useFetch и компонента\nList.\nФункция запускается перед рендерингом приложения в режиме SSR и используется для предварительной\nзагрузки данных, необходимых на текущей странице.\nХук useFetch и компонент List не будут повторно инициализироваться и делать запросы на клиенте,\nесли подгруженные данные существуют.": "",
    "В свойстве можно передать как путь, на который осуществится редирект, так и булево значение.\nЕсли свойство равно true - то редирект произойдет на первый из вложенных роутов.": "",
    "Назначение страницы, указывается, чтобы приложение автоматически могло найти страницу авторизации или 404-ю..": "",
    "Список с ролями, который показывает, кому из пользователей будет доступен просмотр страницы": "",
    "Заголовок страницы": "",
    "Название для action": "",
    "Компонент": "",
    "Свойства компонента": "",
    "Сообщение о подтверждении": "",
    "Коллекция исключенных Controls": "",
    "Коллекция Controls": "",
    "Режим отображения": "",
    "Функция обратного вызова, срабатывает после нажатия": "",
    "Обязателен ли Personal Key": "",
    "Заголовок": "",
    "Управление отображением": "",
    "Аттрибут (название) поля в форме": "",
    "Переводит элемент в состояние \"не активен\"": "",
    "Ошибки в поле": "",
    "Дополнительный CSS-класс для обертки FieldLayout": "",
    "Подсказка, которая отобразится рядом с полем": "",
    "Input ID для связи поля с label": "",
    "Свойства для элемента input": "",
    "Возможность отрендерить поле без обертки в компонент FieldLayout": "",
    "Название поля либо отмена отображение поля (false)": "",
    "Модель с полями формы": "",
    "Callback-функция, которая вызывается при изменении данных": "",
    "Подсказка для поля": "",
    "Префикс, который добавится к аттрибуту (названию) поля в форме": "",
    "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)": "",
    "При фокусировке на поле ввода будет запускаться поиск": "",
    "Показывать иконку очищения поля": "",
    "Размер поля": "",
    "Значение для поля": "",
    "Свойства для компонента отображения": "",
    "Текст для отображения": "",
    "Цвет": "",
    "Включить/выключить badge": "",
    "Значение badge": "",
    "Цифра (к примеру, новые сообщения)": "",
    "Включает стиль `block`, делая размер кнопки на 100% ширины блока": "",
    "Вложенные элементы": "",
    "Цвет состояния": "",
    "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.": "",
    "Темная тема": "",
    "Переводит кнопку в состояние \"не активна\"": "",
    "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.": "",
    "Подсказка, отображается при наведении (через тег title)": "",
    "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)": "",
    "Отображать индикатор загрузки?": "",
    "Текст кнопки или ссылки": "",
    "Отображать как ссылку?": "",
    "Обработчик события нажатия. Для асинхронных событий вовзращяйте в обработчике `Promise`, тогда кнопка\nавтоматически будет переключаться в режим загрузки (`loading`) на время выполнения `Promise`.": "",
    "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным": "",
    "Через сколько миллисекунд должно исчезнуть состояние \"failed\"": "",
    "Размер": "",
    "Выбор html-тэга, который будет вставлен в DOM": "",
    "HTML аттрибут `target`, доступен только для ссылок": "",
    "Цвет текста кнопки или ссылки": "",
    "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`": "",
    "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.": "",
    "HTML Тип": "",
    "Ссылка на внешнюю страницу, используется совместно с свойством `link`": "",
    "Флаг определяющий включен ли элемент": "",
    "Id компонента": "",
    "Id формы": "",
    "Ориентация списка": "",
    "Коллекция ошибок": "",
    "Свойства для компонента Calendar": "",
    "Задано ли значение даты в часовом поясе UTC\n(пример: с бэкенда приходит дата в UTC, но нужно отбразить ее в локальном времени.\nВ этом случае dateInUTC = true, а useUTC = false)": "",
    "Формат даты показываемый пользователю": "",
    "Иконка, отображаемая в правой части поля": "",
    "Свойства поля props.input": "",
    "Свойства, передаваемые для поля во view": "",
    "Опции маски для поля ввода": "",
    "Дополнительная функция, срабатывающая при изменении props.input": "",
    "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние": "",
    "Приводить значение даты к часовому поясу UTC\n(пример: с бэкенда приходит дата в какой-либо временной зоне (не UTC), но нужно отбразить ее\nв часовом поясе UTC. В этом случае dateInUTC = false, а useUTC = true)": "",
    "Свойства для view компонента": "",
    "Свойства для поля во view": "",
    "Показать или скрыть выпадающую панель": "",
    "Ref для input элемента, который накладывает маску": "",
    "Функция очищает значение поля": "",
    "Функция закрывает выпадающую панель": "",
    "Функция возвращает текущее значение времени (дата + время)": "",
    "Свойства для input элемента from": "",
    "Свойства для input элемента to": "",
    "Placeholder подсказка": "",
    "Отображение кнопки для сброса значения поля": "",
    "Свойства для компонента панели времени": "",
    "Свойства для поля 'from'": "",
    "Свойства для поля 'to'": "",
    "Источник контента": "",
    "Тип контента для элемента": "",
    "Отображаемое название": "",
    "Свойство, которое устанавливает один type и src контента для всех пунктов": "",
    "Параметры для элемента input": "",
    "Добавляет кнопку при нажатии на которую выбираются все элементы, работает только при multiple: true": "",
    "Элементы вложенные внутрь DropDownField": "",
    "Включает стиль `outline`, когда у DropDownField остается только `border`, а задний фон становится прозрачным": "",
    "Нужно ли использовать троеточие при переполнении DropDownField": "",
    "Показать иконку сброса для выбранных значений": "",
    "Компонент поля": "",
    "Подсказка, которая отображается, когда в поле нет ошибок": "",
    "Обязательное ли поле? Если true,\nто к названию будет добавлен модификатор 'required' - красная звездочка (по умолчанию)": "",
    "Отображать ли состояние successful на поле": "",
    "Какой компонент для item использовать?": "",
    "Дополнительный CSS-класс для заголовка": "",
    "Заголовок для колонки таблицы.": "",
    "Будет ли отображён item ?": "",
    "При фокусировке на одном из элементов формы и нажатию на клавиши стрелок вверх/вниз + Shift\nпроисходит добавление группы полей сверху или снизу соответственно": "",
    "Добавляет эффект зебры к таблице": "",
    "Изначальное количество групп с полями": "",
    "Начальные значения в полях": "",
    "Переопределение view React компонента для кастомизации отображения группы полей": "",
    "Пропсы для компонента отображения группы полей - FieldListItemView": "",
    "Список с полями формы": "",
    "Отображение кнопки для добавления ещё одной группы с полями": "",
    "Возможность удаления группы с полями (добавляет крестик справа от группы)": "",
    "Дополнительный CSS-класс для таблицы": "",
    "Пропсы для компонента отображения списка с группами полей - FieldListView": "",
    "Дополнительный CSS-класс для \\<fieldset\\>...\\<\\/fieldset\\>": "",
    "Диспатч": "",
    "Конфигурационный массив с полями формы": "",
    "Заголовок для группы полей в форме": "",
    "Префикс для полей формы": "",
    "Провайдер": "",
    "Редьюсер": "",
    "Размер компонента": "",
    "Кастомная иконка для удаление файла": "",
    "ID файла": "",
    "Вариант отображения файлов": "",
    "Обработчик события удаления файла": "",
    "Показать значок удаление файла": "",
    "Исходное название файла": "",
    "Уникальный текстовый идентификатор": "",
    "Пропсы для кнопки": "",
    "View компонент для кнопки": "",
    "Пропсы для элемента файла": "",
    "View компонент для элемента списка файлов": "",
    "Url на который будет отправлена форма": "",
    "Синхронизация значений формы с адресной строкой": "",
    "Очищать ли данные формы с redux хранилища при размонтировании компонента. По-умолчанию - false": "",
    "Если в форме есть элементы \\<input\\>, то произойдет автоматическая фокусировка на первом из них": "",
    "Сохраняет значения полей формы в LocalStorage": "",
    "Автоматически стартовать 2fa аутентификацию (отправлять код)": "",
    "Название действия, которое передаётся в API Google reCAPTCHA v3, для более детального анализа\nповедения пользователя (https://developers.google.com/recaptcha/docs/v3)": "",
    "Поля, которые необходимо поместить в форму": "",
    "Идентификатор формы": "",
    "Начальные значения формы": "",
    "Обработчик события после отправки формы": "",
    "Обработчик события перед отправкой формы": "",
    "Обработчик события при каком-либо изменении в форме": "",
    "Обработчик успешного выполнения формы (без ошибок)": "",
    "Обработчик события отправки формы": "",
    "Обработчик, который вызывается при запросе 2FA": "",
    "Префикс": "",
    "Текст ошибки при неудачной отправке данных. По-умолчанию: \"Ошибка сервера\"": "",
    "Надпись на кнопке отправки формы": "",
    "Использовать для данных глобальное хранилище (redux)": "",
    "Набор с правилами для проверки соответствия значений полей формы определенному формату.\nПроверка запускается в момент отправки формы (в обработчике onSubmit).": "",
    "Свойства для представления": "",
    "Конфигурация wysiwyg реадактора": "",
    "Обработчик события при снятии фокуса с редактора": "",
    "Обработчик события при фокусе на редактора": "",
    "После загрузки изображения на сервер,\nможно указать с каким процессором должно вернуться картинка": "",
    "Url на который будет отправлена форма загрузки файла": "",
    "Экшн для отправки параметров обрезки на бэкенд": "",
    "Изначальные параметры обрезки изображения": "",
    "Пропсы для модуля react-image-crop": "",
    "Коллекция кнопок, которая отобразится в нижней секции Modal": "",
    "Кастомный CSS-класс": "",
    "Время в миллисекундах, через которое автоматически произойдет закрытие Modal.": "",
    "Время, в течение которого будет происходить анимация закрытия Modal.\nПереопределяет отрезок времени, заданный в ModalPortal": "",
    "Компонент, который отрендерится внутри Modal": "",
    "Свойства для внутреннего компонента": "",
    "Группа Modal": "",
    "Порядковый номер Modal": "",
    "Значение свойства отслеживается для показа/закрытия Modal.\nЕсли для компонента ModalPortal установлено значение задержки (animationDelayMc), то после закрытия\nпользователем Modal, оно исчезнет не сразу, а через указанный в animationDelayMc промежуток времени.\nВ течение этого времени флаг isClosing будет равен true.\nЕсли задержка не установлена, Modal закроется сразу же и флаг isClosing всегда будет равен false.": "",
    "Обработчик срабатывает при закрытии Modal": "",
    "Закрытие Modal при нажатии на клавишу 'ESC'": "",
    "Закрытие Modal при клике на компонент overlay внутри Modal (темный фон, отделяющий контент страницы от Modal)": "",
    "Размер Modal": "",
    "Заголовок Modal": "",
    "Переопределение React-компонента для кастомизации view-отображения": "",
    "Параметры обрезки": "",
    "Название кнопки": "",
    "Пропсы для модального окна": "",
    "Переопределение внешнего вида модального окна": "",
    "Текст или React-нода, которая будет отрендерена справа от поля.": "",
    "Текст или React-нода, которая будет отрендерена слева от поля.": "",
    "Пользовательская иконка svg или название иконки": "",
    "Конфигурация маски": "",
    "Изображение или React-нода, которая будет отрендерена справа от поля.": "",
    "Изображение или React-нода, которая будет отрендерена слева от поля.": "",
    "Свойства для компонента Nav": "",
    "Максимальное значение": "",
    "Минимальное значение": "",
    "Шаг увеличения/уменьшения значения": "",
    "Если true, то отображается шкала сложности пароля": "",
    "Если true, то отображается иконка скрытия/показа пароля": "",
    "Возможность полностью сбрасывать рейтинг, при повторном нажатии на звезду": "",
    "Значок (бэйдж) с заголовком.": "",
    "Количество звезд по умолчанию": "",
    "Максимальное количество звезд": "",
    "Функция, вызываемая после загрузки асинхронного скрипта.": "",
    "Положение значка ReCaptcha. Может быть 'bottomright' (внизу справа), 'bottomleft' (внизу слева) или 'inline' (встроенный).": "",
    "Языковой код для ReCaptcha.": "",
    "Флаг, указывающий на изоляцию ReCaptcha.": "",
    "Обработчик события изменения ReCaptcha.": "",
    "Обработчик события ошибки ReCaptcha.": "",
    "Обработчик события истечения срока действия ReCaptcha.": "",
    "Ссылка на ref-объект React для ReCaptcha.": "",
    "Ключ сайта ReCaptcha. По умолчанию process.env.APP_RECAPTCHA_SITE_KEY": "",
    "Защищенный токен для ReCaptcha.": "",
    "Значение tabindex для ReCaptcha.": "",
    "Тип ReCaptcha. Может быть 'image' (изображение) или 'audio' (аудио).": "",
    "Значение по-умолчанию при первом рендере. Для isRange=false используется number, для isRange=true - number[]": "",
    "Делает слайдер с двумя значениями": "",
    "Метки на ползунке. В объекте ({key: value}) key определяет положение, а value определяет, что будет отображаться.\nЕсли вы хотите задать стиль определенной точки метки, значением должен быть объект,\nсодержащий свойства style и label.": "",
    "Максимальное значение в слайдере": "",
    "Минимальное значение в слайдере": "",
    "Функция, вызываемая после отпускания tip'а у слайдера (при событии onmouseup)": "",
    "Свойства для компонента слайдера": "",
    "Длина шага слайдера": "",
    "Любое строковое значение после значения состояния слайдера в всплывающем окошке.": "",
    "Отправлять форму при нажатии на кнопку `enter`": "",
    "Отключить border вокруг элемента": "",
    "Значение для BooleanFormatter": "",
    "Формат даты": "",
    "Дата": "",
    "Переопределение view React компонента для кастомизации отображения колонки": "",
    "Показывать ли дату учитываю временную зону": "",
    "Перечисление элементов.\n1) Может быть строкой вида: `app.geo.enums.Cities`\n2) Массивом: [{id: 1, label: \"London\"}]": "",
    "Уникальный идентификатор элемента из `items`": "",
    "Если не указан размер файла, то в случае, если showZero = true\nто будет показан `0`, иначе пустая строка": "",
    "Размер файла": "",
    "Валюта @enum {eur, rub, usd}": "",
    "Разрядность (при передаче int в значении)": "",
    "Округление числа": "",
    "Значение для MoneyFormatter": "",
    "Параметры авторизации.": "",
    "Свойства для бургер-меню.": "",
    "Свойства для логотипа.": "",
    "Свойства для навигации": "",
    "Информация о пользователе.": "",
    "Название цвета": "",
    "Размер элемента": "",
    "Идентификатор уведомления": "",
    "Цвет всплывающего уведомления": "",
    "Сообщение во всплывающем уведомлении": "",
    "Задержка перед закрытием": "",
    "Исходные уведомления": "",
    "Переопределение view React компонента для кастомизации отображения элемента": "",
    "Коллекция уведомлений": "",
    "Позиционирование элемента уведомления": "",
    "Функция, позволяющая задавать собственные иконки в зависимости от прогресса и статуса": "",
    "Функция, позволяющая изменить генерацию лейбла": "",
    "Прогресс в процентах": "",
    "Флаг, определяющий показывать ли лейбл": "",
    "Статус компонента": "",
    "Тип компонента - круг или линия": "",
    "Наличие верней границы у элемента": "",
    "CSS-класс для элемента отображения": "",
    "Контент, который отобразиться, если элемент навигации будет активен": "",
    "Свойства для компонента с контентом": "",
    "Props для пункта": "",
    "Текст элемента": "",
    "Обработчик события нажатия": "",
    "Ссылка на внешнюю страницу": "",
    "Видимость элемента": "",
    "Массив объектов с информацией об иконках для футера.": "",
    "Флаг, определяющий, следует ли разделять элементы навигации.": "",
    "Флаг, определяющий, будет ли сайдбар открытым по умолчанию.": "",
    "Элементы навигации для компонента Nav.": "",
    "Объект с информацией о логотипе.": "",
    "Props для компонента Menu.": "",
    "Callback-функция, вызывается при клике на элемент навигации.": "",
    "Callback-функция, вызывается при переключении сайдбара.": "",
    "Объект с информацией о пользователе.": "",
    "Тип анимации": "",
    "Дополнительные CSS классы": "",
    "Высота элемента": "",
    "Тип компонента": "",
    "Ширина элемента": "",
    "Позиция стрелки снизу": "",
    "Позиция стрелки слева": "",
    "Позиция стрелки справа": "",
    "Позиция стрелки сверху": "",
    "Стили для позиционирования стрелки": "",
    "Рассчет позиции подсказки": "",
    "Текст подсказки": "",
    "Показывать ли подсказку сразу после рендера страницы": "",
    "Отступ от элемента": "",
    "Позиционирование подсказки, относительно целевого элемента": "",
    "Стили для абсолютного позиционирования подсказки": "",
    "Позиция Tooltip слева": "",
    "Позиция Tooltip справа": "",
    "Позиция Tooltip сверху": "",
    "Свойства для CheckboxField": "",
    "Элемент коллекции item": "",
    "Первичный ключ для доступа к идентификатору item": "",
    "Атрибут колонки, по которому происходит поиск нужного свойства в items и нужного поля в SearchForm": "",
    "CSS-класс для ячейки со значением": "",
    "Диаграмма.\nЦвет должен соответствовать success | warning | danger | secondary.\nЦвета можно расширить или изменить через стили (см. colors.scss в react-bootstrap)": "",
    "Свойства для компонента форматирования": "",
    "CSS-класс для ячейки с заголовком колонки <th>...</th>": "",
    "Свойства для компонента отображения заголовка колонки": "",
    "Компонент для кастомизации отображения заголовка колонки": "",
    "Подсказка": "",
    "Параметры для иконки в колонке": "",
    "Заголовок колонки": "",
    "Параметры для ссылки в колонке": "",
    " Параметры для картинки в колонке": "",
    "Включить возможность сортировки по данным в колонке": "",
    "Название свойства в items, которое будет использовано как subtitle": "",
    "Свойства для компонента отображения значения в ячейке": "",
    "Компонент для кастомизации отображения значения в ячейке": "",
    "Скрыть или показать колонку": "",
    "Коллекция с контролами": "",
    "Элемент, для которого будет отображаться список с контролами, в нём можно задать видимость контрола\nс помощью свойства 'can' + _upperFirst(control.id)": "",
    "Показывать заглушку?": "",
    "Текст заглушки": "",
    "Количество колонок, которое занимает элемент, максимум 12": "",
    "Содержимое элемента FlexGrid": "",
    "Количество колонок, которое занимает элемент на экранах размером lg, максимум 12": "",
    "Количество колонок, которое занимает элемент на экранах размером md, максимум 12": "",
    "Количество колонок для смещения столбца слева": "",
    "Порядок элемента в FlexGrid": "",
    "Количество колонок, которое занимает элемент на экранах размером sm, максимум 12": "",
    "Значение для css-свойства align-items": "",
    "Значение для css-свойства flex-direction": "",
    "Расстояние между элементами в px.\nЕсли передано число, то установится расстояние между строками и между колонками.\nЕсли передан массив, то первый элемент - расстояние между колонками, второй - между строками.": "",
    "Дополнительный CSS-класс для элементов FlexGrid": "",
    "Элементы FlexGrid": "",
    "Значение для css-свойства justify-content": "",
    "Автоматический перенос на новую строку": "",
    "Коллекция с наименованиями и свойствами колонок в таблице": "",
    "Коллекция с элементами управления. Данная коллекция отобразится в колонке рядом с каждой записью в таблице.\nНапример, кнопки для удаления и детального просмотра записи.": "",
    "Включает переменные цвета для строк в таблице": "",
    "Нужно ли отображать колонку с порядковым номером элемента? Если да, то для каждого элемента в коллекции items\nдолжно быть задано свойство index": "",
    "Размер Grid": "",
    "Название ключа, под которым в LocalStorage сохранится значение выбранного шаблона": "",
    "Шаблон по умолчанию": "",
    "Отобразить переключатель": "",
    "Коллекция с шаблонами": "",
    "Данные списка": "",
    "Расположение переключателя": "",
    "Дополнительный CSS-класс для элемента с контентом": "",
    "Свойства для элемента коллекции": "",
    "Переопределение view React компонента для кастомизации отображения элемента коллекции": "",
    "Указывает, какое количество кнопок с номерами страниц будет доступно до и после выбранной страницы,\nвключая выбранную. Остальные будут спрятаны в элемент \"...\"": "",
    "Аттрибут (название) в форме для поля пагинации": "",
    "Параметры кнопки": "",
    "Значение по-умолчанию": "",
    "Подключить пагинацию": "",
    "Список, для которого используется пагинация": "",
    "Вместо списка с номерами страниц будет кнопка \"Загрузить еще\"": "",
    "Обработчик, который вызывается после смены страницы": "",
    "Нужно ли отображать кнопки с шагом до первой / последней страницы": "",
    "Нужно ли отображать кнопки с шагом в одну страницу": "",
    "Аттрибут (название) в форме для поля с количеством элементов на странице": "",
    "Свойства для кнопок пагинации": "",
    "Подключить выбор количества элементов": "",
    "Расположение элемента в списке": "",
    "Список с количествами элементов на странице": "",
    "Id списка": "",
    "Время, через которое произойдет закрытие Modal": "",
    "Функция, которая вызывается при закрытии модального окна": "",
    "Имя провайдера": "",
    "Кастомная иконка, заменяющая первый роут": "",
    "Коллекция элементов навигационной цепочки": "",
    "Вместо items можно передать идентификатор роута, от которого компонент самостоятельно построит\nнавигационную цепочку": "",
    "Заголовок последней в списке страницы (обычно, это текущая страница, на которой находится пользователь).\nЕсли заголовок не задан, то подставится item.title": "",
    "Показать иконку заменяющую первый роут": "",
    "При указании в связке с onClick предоставляет возможность реализовать two-way binding": "",
    "Общие свойства для всех кнопок группы": "",
    "Кнопка по умолчанию.": "",
    "Элементы для группы кнопок": "",
    "Функция, которая будет вызываться при клике по кнопке": "",
    "Идентификатор контрола": "",
    "Расположение контрола": "",
    "Скрыть или показать контрол": "",
    "Коллекция контролов": "",
    "Пропсы для компонента Nav, в который передаются контролы в качестве items": "",
    "Идентификатор активного элемента. По умолчанию будет активен первый элемент.": "",
    "Коллекция с элементами навигации. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в навигации.": "",
    "Шаблон отображения элементов навигации": "",
    "Обработчик, который вызывается при смене активного элемента навигации": "",
    "Прокрутить страницу к началу при смене url": "",
    "Контент, который отобразится под каждой страницей приложения": "",
    "Если у роута не задано свойство roles, которое определяет, кому из пользователей будет доступен контент\nна соответствующей странице, то подставится стандартный список с ролями": "",
    "Дерево роутов": "",
    "Свойства шаблона": "",
    "Общий шаблон, который оборачивает страницы приложения": "",
    "Идентификатор узла": "",
    "Вложенные элементы\n[{id: 2, label: 'Nested element', items: [...]}]": "",
    "Скрыть или показать узел": "",
    "Максимальный уровень вложенности, до которого все узлы будут отображаться в развёрнутом виде": "",
    "Отображать раскрытыми узлы из LocalStorage": "",
    "Идентификатор (ключ) для сохранения в LocalStorage коллекции с раскрытыми узлами": "",
    "Коллекция с узлами. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в виде дерева.": "",
    "Ключ для доступа к вложенным элементам узла": "",
    "Ограничивает максимальный уровень вложенности дерева": "",
    "Обработчик на клик по узлу": "",
    "Идентификатор узла, которой нужно отобразить в раскрытом виде": "",
    "Цвет текста": "",
    "Текст": "",
    "HTML тег": "",
    "Тип текста": "",
    "Цвет заголовка": "",
    "Текст заголовка": "",
    "Тип заголовка": "",
    "Название цвета, соответствующее ему состоянию": "",
    "Дополнительные стили": "",
    "Объект из свойства `input` от redux-form": "",
    "HTTP метод": "",
    "Ориентация элемента": "",
    "Уникальный ключ. ID, UUID или другое": "",
    "MaskField\n\nКомпонент поля ввода текста с маской.\n": "",
    "Обертка над Axios для запросов на бекенд. Поддерживает токен авторизации, CSRF и обработку ошибок.": "",
    "Слой хранения данных в браузере (cookie, local/session storage) или ReactNative": "",
    "Хелпер для работы с БЭМ классами и DOM элементами": "",
    "Компонент для локализации приложения. Поддерживает конфигурацию языка и временной зоны\n\nПример строки: `{__('{count} {count, plural, one{день} few{дня} many{дней}}', {count: 2})}`\n": "",
    "Получение экземпляра `moment` с учетом временной зоны бекенда": "",
    "Язык приложения": "",
    "Компонент для работы с мета-данными моделей и типами приложения (appType)": "",
    "Компонент для подгрузки внешних API: Google Maps, Yandex Maps, Twitter, ...": "",
    "Метод для загрузки Geetest.": "",
    "Метод для загрузки Google reCAPTCHA.": "",
    "Метод для загрузки Google Maps API.": "",
    "Метод для загрузки скрипта по указанному URL.": "",
    "Метод для загрузки Twitter виджетов.": "",
    "Метод для загрузки Yandex Maps API.": "",
    "Метод для ожидания выполнения определенного условия.": "",
    "Провайдер для социальных сетей. Обеспечивает вызов окна соц сети для oauth авторизации": "",
    "Обертка над Redux Store со встроенными middleware (thunk, multi, promise..) и react-router": "",
    "Добавляет компоненты полей формы.": "",
    "Добавляет компоненты форматтеров.": "",
    "Добавляет иконки.": "",
    "Добавляет модели.": "",
    "Возвращает компонент поля формы по указанному пути.": "",
    "Возвращает свойства конфигурации компонента поля формы по указанному пути.": "",
    "Возвращает компонент форматтера по указанному пути.": "",
    "Возвращает свойства конфигурации компонента форматтера по указанному пути.": "",
    "Возвращает иконку по указанному имени.": "",
    "Возвращает элемент портала.": "",
    "Возвращает зарегистрированные поля формы для указанного идентификатора формы.": "",
    "Возвращает компонент представления по указанному пути.": "",
    "Регистрирует поле формы.": "sdfsdfsdfsdf",
    "Задает элемент портала.": "",
    "Добавляет компоненты представлений.": "",
    "Рендерит компонент представления.": ""
}