{
    "interfaces": {
        "IList": {
            "name": "IList",
            "moduleName": "actions/list",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "Url, который вернет коллекцию элементов.",
                    "required": false,
                    "type": "string",
                    "example": "api/v1/articles"
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "Тип HTTP запроса (GET | POST | PUT | DELETE)",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Идентификатор формы, связанной с данным списком.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isFetched",
                    "decorators": [],
                    "description": "Логическое значение, указывающее, был ли список получен или нет.",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Логическое значение, указывающее, находится ли список в процессе загрузки или нет.",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isRemote",
                    "decorators": [],
                    "description": "Логическое значение, указывающее, является ли список удаленным или нет.",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Массив элементов списка.",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "layoutAttribute",
                    "decorators": [],
                    "description": "Атрибут макета для списка.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "layoutName",
                    "decorators": [],
                    "description": "Название макета, связанного с данным списком.",
                    "required": false,
                    "type": "null",
                    "example": null
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "Идентификатор списка.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "loadMore",
                    "decorators": [],
                    "description": "Логическое значение, указывающее, можно ли загрузить еще элементы для списка.",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "meta",
                    "decorators": [],
                    "description": "Дополнительные метаданные для списка.",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "pageAttribute",
                    "decorators": [],
                    "description": "Атрибут страницы для списка.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "pageSizeAttribute",
                    "decorators": [],
                    "description": "Атрибут размера страницы для списка.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для списка.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "scope",
                    "decorators": [],
                    "description": "Массив строк, представляющих область списка.",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "sortAttribute",
                    "decorators": [],
                    "description": "Атрибут сортировки для списка.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": "Массив исходных элементов списка.",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "total",
                    "decorators": [],
                    "description": "Общее количество элементов в списке.",
                    "required": false,
                    "type": "number",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "condition",
                    "decorators": [],
                    "description": "Функция условия, используемая для определения поведения списка на основе параметров запроса.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "query",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onError",
                    "decorators": [],
                    "description": "Обработчик события ошибки выполнения запроса",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "Функция обратного вызова, вызываемая при получении списка.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "list",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IList",
                            "example": null
                        },
                        {
                            "name": "query",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IShowNotificationParameters": {
            "name": "IShowNotificationParameters",
            "moduleName": "actions/notifications",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "timeOut",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                }
            ],
            "methods": []
        },
        "IClientStorageComponent": {
            "name": "IClientStorageComponent",
            "moduleName": "components/ClientStorageComponent",
            "title": "Интерфейс для ClientStorageComponent",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IClientStorageComponentConfig"
            ],
            "properties": [
                {
                    "name": "domain",
                    "decorators": [],
                    "description": "Кастомный домен",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "ssrCookie",
                    "decorators": [],
                    "description": "Куки для режима ssr",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "decorators": [],
                    "description": "Получить значение из хранилища.",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "Имя записи.",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "storageName",
                            "decorators": [],
                            "description": "(Необязательный) Имя хранилища (local, session, или cookie).",
                            "required": false,
                            "type": "\"local\" | \"session\" | \"cookie\"",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "remove",
                    "decorators": [],
                    "description": "Удалить значение из хранилища.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "Имя записи.",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "storageName",
                            "decorators": [],
                            "description": "(Необязательный) Имя хранилища (local, session, или cookie).\n",
                            "required": false,
                            "type": "\"local\" | \"session\" | \"cookie\"",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "set",
                    "decorators": [],
                    "description": "Установить значение в хранилище.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "Имя записи.",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "Значение записи.",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "storageName",
                            "decorators": [],
                            "description": "(Необязательный) Имя хранилища (local, session, или cookie).",
                            "required": false,
                            "type": "\"local\" | \"session\" | \"cookie\"",
                            "example": null
                        },
                        {
                            "name": "expires",
                            "decorators": [],
                            "description": "(Необязательный) Срок действия записи в днях.\n",
                            "required": false,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IClientStorageComponentConfig": {
            "name": "IClientStorageComponentConfig",
            "moduleName": "components/ClientStorageComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "domain",
                    "decorators": [],
                    "description": "Кастомный домен",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "ssrCookie",
                    "decorators": [],
                    "description": "Куки для режима ssr",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": []
        },
        "IHtmlComponent": {
            "name": "IHtmlComponent",
            "moduleName": "components/HtmlComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [],
            "methods": [
                {
                    "name": "addClass",
                    "decorators": [],
                    "description": "Метод для добавления css-класса к элементу",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "node",
                            "decorators": [],
                            "description": "Элемент, к которому нужно добавить класс",
                            "required": true,
                            "type": "ReactNode",
                            "example": null
                        },
                        {
                            "name": "className",
                            "decorators": [],
                            "description": "Название класса\n",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "bem",
                    "decorators": [],
                    "description": "Утилита для создания css-классов по БЭМ",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "blockName",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "classNames",
                    "decorators": [],
                    "description": "Метод для соединения нескольких classNames",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "names",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "removeClass",
                    "decorators": [],
                    "description": "Метод для удаления css-класса у элемента",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "node",
                            "decorators": [],
                            "description": "Элемент, у которого нужно удалить класс",
                            "required": true,
                            "type": "ReactNode",
                            "example": null
                        },
                        {
                            "name": "className",
                            "decorators": [],
                            "description": "Название класса\n",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IHttpComponent": {
            "name": "IHttpComponent",
            "moduleName": "components/HttpComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IHttpComponentConfig"
            ],
            "properties": [
                {
                    "name": "accessTokenKey",
                    "decorators": [],
                    "description": "Ключ для хранения токена в куках",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "apiUrl",
                    "decorators": [],
                    "description": "Url для http запросов",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "clientStorageExpiresIn",
                    "decorators": [],
                    "description": "Срок хранения токена в хранилище в днях",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "clientStorageName",
                    "decorators": [],
                    "description": "Имя хранилища для токена (local, session, или cookie)",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "afterRequest",
                    "decorators": [],
                    "description": "Метод, который вызывается после запроса",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "response",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "config",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "Вызов метода delete",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "get",
                    "decorators": [],
                    "description": "Вызов метода get",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getAccessToken",
                    "decorators": [],
                    "description": "Получение токена",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getAxiosConfig",
                    "decorators": [],
                    "description": "Получение конфига для axios",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getAxiosInstance",
                    "decorators": [],
                    "description": "Получение экземпляра axios",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getUrl",
                    "decorators": [],
                    "description": "Получение url по методу",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "method",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onLogin",
                    "decorators": [],
                    "description": "Метод, который можно вызвать при login",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "{accessToken: string}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onLogout",
                    "decorators": [],
                    "description": "Метод, который можно вызвать при logout",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "post",
                    "decorators": [],
                    "description": "Вызов метода post",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "removeAccessToken",
                    "decorators": [],
                    "description": "Удаление токена",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "resetConfig",
                    "decorators": [],
                    "description": "Сбросить конфиг",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "send",
                    "decorators": [],
                    "description": "Вызов http-метода",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "method",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setAccessToken",
                    "decorators": [],
                    "description": "Изменение токена",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setCsrfToken",
                    "decorators": [],
                    "description": "Изменение csrf токена",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IHttpComponentConfig": {
            "name": "IHttpComponentConfig",
            "moduleName": "components/HttpComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "accessTokenKey",
                    "decorators": [],
                    "description": "Ключ для хранения токена в куках",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "apiUrl",
                    "decorators": [],
                    "description": "Url для http запросов",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "clientStorageExpiresIn",
                    "decorators": [],
                    "description": "Срок хранения токена в хранилище в днях",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "clientStorageName",
                    "decorators": [],
                    "description": "Имя хранилища для токена (local, session, или cookie)",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IJwtHttpComponentConfig": {
            "name": "IJwtHttpComponentConfig",
            "moduleName": "components/JwtHttpComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "refreshTokenKey",
                    "decorators": [],
                    "description": "Ключ токена авторизации для локального хранилища",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "refreshTokenRequest",
                    "decorators": [],
                    "description": "Запрос на обновление токена авторизации",
                    "required": false,
                    "type": "IRefreshTokenRequest",
                    "example": null
                }
            ],
            "methods": []
        },
        "IRefreshTokenRequest": {
            "name": "IRefreshTokenRequest",
            "moduleName": "components/JwtHttpComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [],
            "methods": []
        },
        "ILocaleComponent": {
            "name": "ILocaleComponent",
            "moduleName": "components/LocaleComponent",
            "title": "Интерфейс для LocaleComponent",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ILocaleComponentConfig"
            ],
            "properties": [
                {
                    "name": "backendTimeDiff",
                    "decorators": [],
                    "description": "Разница времени с бекендом (в микросекундах)",
                    "required": false,
                    "type": "null",
                    "example": null
                },
                {
                    "name": "backendTimeZone",
                    "decorators": [],
                    "description": "Временная зона бекенда",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "language",
                    "decorators": [],
                    "description": "Язык приложения",
                    "required": false,
                    "type": "string",
                    "example": "ru"
                },
                {
                    "name": "sourceLanguage",
                    "decorators": [],
                    "description": "Исходный язык",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "translations",
                    "decorators": [],
                    "description": "Переводы сообщений",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "dayjs",
                    "decorators": [],
                    "description": "Получение экземпляра `dayjs` с учетом временной зоны бекенда",
                    "required": false,
                    "type": "Dayjs",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "Дата",
                            "required": false,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "format",
                            "decorators": [],
                            "description": "Формат даты",
                            "required": false,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "t",
                    "decorators": [],
                    "description": "Алиас для метода `translate`",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "message",
                            "decorators": [],
                            "description": "Сообщение для перевода",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "Параметры перевода",
                            "required": false,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "translate",
                    "decorators": [],
                    "description": "Перевод сообщения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "message",
                            "decorators": [],
                            "description": "Сообщение для перевода",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "Параметры перевода",
                            "required": false,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ILocaleComponentConfig": {
            "name": "ILocaleComponentConfig",
            "moduleName": "components/LocaleComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "backendTimeDiff",
                    "decorators": [],
                    "description": "Разница времени с бекендом (в микросекундах)",
                    "required": false,
                    "type": "null",
                    "example": null
                },
                {
                    "name": "backendTimeZone",
                    "decorators": [],
                    "description": "Временная зона бекенда",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "language",
                    "decorators": [],
                    "description": "Язык приложения",
                    "required": false,
                    "type": "string",
                    "example": "ru"
                },
                {
                    "name": "sourceLanguage",
                    "decorators": [],
                    "description": "Исходный язык",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "translations",
                    "decorators": [],
                    "description": "Переводы сообщений",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": []
        },
        "IMetaComponent": {
            "name": "IMetaComponent",
            "moduleName": "components/MetaComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [],
            "methods": [
                {
                    "name": "getModel",
                    "decorators": [],
                    "description": "Получить модель",
                    "required": false,
                    "type": "Model",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getType",
                    "decorators": [],
                    "description": "Получить тип",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "normalizeModel",
                    "decorators": [],
                    "description": "Форматирование модели модели",
                    "required": false,
                    "type": "Model",
                    "example": null,
                    "parameters": [
                        {
                            "name": "inputModel",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Model",
                            "example": null
                        },
                        {
                            "name": "defaultModel",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "normalizeName",
                    "decorators": [],
                    "description": "Форматирование названия модели",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setModel",
                    "decorators": [],
                    "description": "Изменить модель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Model",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setType",
                    "decorators": [],
                    "description": "Изменить тип",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "config",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "Model": {
            "name": "Model",
            "moduleName": "components/MetaComponent",
            "title": "Мета информация о моделе",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [],
            "methods": []
        },
        "ModelAttribute": {
            "name": "ModelAttribute",
            "moduleName": "components/MetaComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [],
            "methods": []
        },
        "IMetricsComponent": {
            "name": "IMetricsComponent",
            "moduleName": "components/MetricsComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "unlisten",
                    "decorators": [],
                    "description": "Отменить прослушивание метрик",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "unsubscribe",
                    "decorators": [],
                    "description": "Отписаться от метрик",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "setCounters",
                    "decorators": [],
                    "description": "Поменять счетчики",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "values",
                            "decorators": [],
                            "description": "Значения\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IResourceComponent": {
            "name": "IResourceComponent",
            "moduleName": "components/ResourceComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IResourceComponentConfig"
            ],
            "properties": [
                {
                    "name": "RESOURCE_GEETEST_API",
                    "decorators": [],
                    "description": "URL для загрузки Geetest.",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "RESOURCE_GOOGLE_CAPTCHA",
                    "decorators": [],
                    "description": "URL для загрузки Google reCAPTCHA.",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "RESOURCE_GOOGLE_MAP_API",
                    "decorators": [],
                    "description": "URL для загрузки Google Maps API.",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "RESOURCE_TWITTER_WIDGET",
                    "decorators": [],
                    "description": "URL для загрузки Twitter виджетов.",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "RESOURCE_YANDEX_MAP_API",
                    "decorators": [],
                    "description": "URL для загрузки Yandex Maps API.",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "googleApiKey",
                    "decorators": [],
                    "description": "API-ключ Google для использования Google Maps и других сервисов.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "googleCaptchaSiteKey",
                    "decorators": [],
                    "description": "Ключ сайта Google reCAPTCHA.",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "language",
                    "decorators": [],
                    "description": "Языковой код, используемый для загрузки ресурсов.",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "loadGeetest",
                    "decorators": [],
                    "description": "Метод для загрузки Geetest.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "loadGoogleCaptcha",
                    "decorators": [],
                    "description": "Метод для загрузки Google reCAPTCHA.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "loadGoogleMapApi",
                    "decorators": [],
                    "description": "Метод для загрузки Google Maps API.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "loadScript",
                    "decorators": [],
                    "description": "Метод для загрузки скрипта по указанному URL.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "URL скрипта для загрузки.",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "Параметры запроса для URL скрипта.",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "firstResolver",
                            "decorators": [],
                            "description": "Функция, которая возвращает объект, разрешающий промис.",
                            "required": true,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "loadTwitterWidget",
                    "decorators": [],
                    "description": "Метод для загрузки Twitter виджетов.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "loadYandexMap",
                    "decorators": [],
                    "description": "Метод для загрузки Yandex Maps API.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "wait",
                    "decorators": [],
                    "description": "Метод для ожидания выполнения определенного условия.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "condition",
                            "decorators": [],
                            "description": "Условие, которое должно быть выполнено.",
                            "required": true,
                            "type": "{}",
                            "example": null
                        },
                        {
                            "name": "timeout",
                            "decorators": [],
                            "description": "(Необязательный) Таймаут ожидания в миллисекундах (по умолчанию 5000 мс).",
                            "required": false,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IResourceComponentConfig": {
            "name": "IResourceComponentConfig",
            "moduleName": "components/ResourceComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "googleApiKey",
                    "decorators": [],
                    "description": "API-ключ Google для использования Google Maps и других сервисов.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "language",
                    "decorators": [],
                    "description": "Языковой код, используемый для загрузки ресурсов.",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "ISocialComponent": {
            "name": "ISocialComponent",
            "moduleName": "components/SocialComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "providers",
                    "decorators": [],
                    "description": "Провайдеры",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "decorators": [],
                    "description": "Инициализация компонента",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "start",
                    "decorators": [],
                    "description": "Старт",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "socialName",
                            "decorators": [],
                            "description": "Название social\n",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IStoreComponent": {
            "name": "IStoreComponent",
            "moduleName": "components/StoreComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "reducers",
                    "decorators": [],
                    "description": "Редьюсеры",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "store",
                    "decorators": [],
                    "description": "Хранилище",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "addReducers",
                    "decorators": [],
                    "description": "Добавление редьюсеров",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "asyncReducers",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "configurate",
                    "decorators": [],
                    "description": "Конфигурация",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "Метод для dispatch",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "action",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "decorators": [],
                    "description": "Метод, который вызывается при ошибке",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "action",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getState",
                    "decorators": [],
                    "description": "Получение состояние",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "init",
                    "decorators": [],
                    "description": "Инициализация",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "initStore",
                    "decorators": [],
                    "description": "Инициализация хранилища",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "subscribe",
                    "decorators": [],
                    "description": "Подписка",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "handler",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IUiApplicationComponent": {
            "name": "IUiApplicationComponent",
            "moduleName": "components/UiComponent",
            "title": "Ui Component",
            "description": "Компонент для подгрузки и конфигурации UI компонентов приложения",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "components",
                    "decorators": [],
                    "description": "Компоненты приложения.",
                    "required": true,
                    "type": "IComponents",
                    "example": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "Компоненты полей формы для использования в приложении.",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "formatters",
                    "decorators": [],
                    "description": "Компоненты форматтеры для использования в приложении.",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "icons",
                    "decorators": [],
                    "description": "Иконки для использования в приложении.",
                    "required": true,
                    "type": "{}",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "addFields",
                    "decorators": [],
                    "description": "Добавляет компоненты полей формы.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "Компоненты полей формы.\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "addFormatters",
                    "decorators": [],
                    "description": "Добавляет компоненты форматтеров.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "Компоненты форматтеров.\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "addIcons",
                    "decorators": [],
                    "description": "Добавляет иконки.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "icons",
                            "decorators": [],
                            "description": "Иконки.\n",
                            "required": true,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "addModels",
                    "decorators": [],
                    "description": "Добавляет модели.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "models",
                            "decorators": [],
                            "description": "Модели.\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "addViews",
                    "decorators": [],
                    "description": "Добавляет компоненты представлений.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "Компоненты представлений.\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getField",
                    "decorators": [],
                    "description": "Возвращает компонент поля формы по указанному пути.",
                    "required": false,
                    "type": "ComponentType",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "Путь к компоненту поля формы.",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getFieldProps",
                    "decorators": [],
                    "description": "Возвращает свойства конфигурации компонента поля формы по указанному пути.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "Путь к компоненту поля формы.",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "model",
                            "decorators": [],
                            "description": "Модель.",
                            "required": false,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "attribute",
                            "decorators": [],
                            "description": "Атрибут.",
                            "required": false,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getFormatter",
                    "decorators": [],
                    "description": "Возвращает компонент форматтера по указанному пути.",
                    "required": false,
                    "type": "ComponentType",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "Путь к компоненту форматтера.",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getFormatterProps",
                    "decorators": [],
                    "description": "Возвращает свойства конфигурации компонента форматтера по указанному пути.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "Путь к компоненту форматтера.",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getIcon",
                    "decorators": [],
                    "description": "Возвращает иконку по указанному имени.",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "Имя иконки.",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getPortalElement",
                    "decorators": [],
                    "description": "Возвращает элемент портала.",
                    "required": false,
                    "type": "HTMLElement",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getRegisteredFields",
                    "decorators": [],
                    "description": "Возвращает зарегистрированные поля формы для указанного идентификатора формы.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "Идентификатор формы.",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getView",
                    "decorators": [],
                    "description": "Возвращает компонент представления по указанному пути.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "Путь к компоненту представления.",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "registerField",
                    "decorators": [],
                    "description": "Регистрирует поле формы.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "Идентификатор формы.",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "attribute",
                            "decorators": [],
                            "description": "Атрибут.",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "type",
                            "decorators": [],
                            "description": "Тип.\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderView",
                    "decorators": [],
                    "description": "Рендерит компонент представления.",
                    "required": false,
                    "type": "ReactElement",
                    "example": null,
                    "parameters": [
                        {
                            "name": "Component",
                            "decorators": [],
                            "description": "Компонент или путь к компоненту представления.",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "Свойства компонента.",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "forceNode",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setPortalElement",
                    "decorators": [],
                    "description": "Задает элемент портала.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "element",
                            "decorators": [],
                            "description": "Элемент портала.\n",
                            "required": true,
                            "type": "HTMLElement",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IWebSocketComponent": {
            "name": "IWebSocketComponent",
            "moduleName": "components/WebSocketComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IWebSocketComponentConfig"
            ],
            "properties": [
                {
                    "name": "streams",
                    "decorators": [],
                    "description": "Массив streams",
                    "required": false,
                    "type": "TStreams",
                    "example": null
                },
                {
                    "name": "wsUrl",
                    "decorators": [],
                    "description": "url для websocket",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "authHandler",
                    "decorators": [],
                    "description": "Хендлер для авторизации",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "close",
                    "decorators": [],
                    "description": "Закрытие websocket соединения",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция, которая вызывается на закрытие соединения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onMessage",
                    "decorators": [],
                    "description": "Функция, которая вызывается на отправку сообщения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "data",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onOpen",
                    "decorators": [],
                    "description": "Функция, которая вызывается на открытие соединения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "open",
                    "decorators": [],
                    "description": "Открытие websocket соединения",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "closePrevious",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "decorators": [],
                    "description": "Подписка на streams",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "streams",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "TStreams",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "subscribeStream",
                    "decorators": [],
                    "description": "Подписка на stream",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "stream",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "TStream",
                            "example": null
                        },
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string | number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "unsubscribe",
                    "decorators": [],
                    "description": "Отписка от streams",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "streams",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "TStreams",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "unsubscribeStream",
                    "decorators": [],
                    "description": "Отписка от stream",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "stream",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "TStream",
                            "example": null
                        },
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string | number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IWebSocketComponentConfig": {
            "name": "IWebSocketComponentConfig",
            "moduleName": "components/WebSocketComponent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "streams",
                    "decorators": [],
                    "description": "Массив streams",
                    "required": false,
                    "type": "TStreams",
                    "example": null
                },
                {
                    "name": "wsUrl",
                    "decorators": [],
                    "description": "url для websocket",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "authHandler",
                    "decorators": [],
                    "description": "Хендлер для авторизации",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция, которая вызывается на закрытие соединения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onMessage",
                    "decorators": [],
                    "description": "Функция, которая вызывается на отправку сообщения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "data",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onOpen",
                    "decorators": [],
                    "description": "Функция, которая вызывается на открытие соединения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IAbsolutePositioningInputProps": {
            "name": "IAbsolutePositioningInputProps",
            "moduleName": "hooks/useAbsolutePositioning",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "autoPositioning",
                    "decorators": [],
                    "description": "Включает \"умное\" позиционирование - если компонент не может быть помещен в промежуток между целевым компонентом\nи краем viewport, тогда он будет показан в противоположном направлении от заданного в свойстве position.",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "componentDestroyDelay",
                    "decorators": [],
                    "description": "Задержка перед размонтированием компонента, когда он должен быть скрыт.\nВ этот момент удобно применять различные анимации ухода.",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "defaultVisible",
                    "decorators": [],
                    "description": "Показывать ли компонент сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "gap",
                    "decorators": [],
                    "description": "Промежуток между компонентом и целевым элементом.\nИспользуется в рассчетах позиционирования.",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Позиционирование компонента, относительно целевого элемента",
                    "required": true,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Отобразить или скрыть компонент.\nВключает \"ручной режим\", при котором можно задать логику отображения компонента извне,\nчерез измененение данного свойства.",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Срабатывает в \"ручном режиме\", при клике за пределами компонента и целевого элемента.\nВозвращает значение visible.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onVisibleChange",
                    "decorators": [],
                    "description": "Обработчик изменения свойства isComponentVisible (отображение на странице).\nВозвращает значение isComponentVisible.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "isComponentVisible",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IAbsolutePositioningOutputProps": {
            "name": "IAbsolutePositioningOutputProps",
            "moduleName": "hooks/useAbsolutePositioning",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "arrowPosition",
                    "decorators": [],
                    "description": "Объект стилей для позиционирования стрелки",
                    "required": false,
                    "type": "IComponentArrowPosition",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isComponentExist",
                    "decorators": [],
                    "description": "Нужно ли рендерить компонент",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isComponentVisible",
                    "decorators": [],
                    "description": "Нужно ли показывать компонент на странице",
                    "required": true,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект стилей для абсолютного позиционирования",
                    "required": true,
                    "type": "IComponentStylePosition",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IComponentArrowPosition": {
            "name": "IComponentArrowPosition",
            "moduleName": "hooks/useAbsolutePositioning",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "bottom",
                    "decorators": [],
                    "description": "Позиция стрелки снизу",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "left",
                    "decorators": [],
                    "description": "Позиция стрелки слева",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "right",
                    "decorators": [],
                    "description": "Позиция стрелки справа",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "top",
                    "decorators": [],
                    "description": "Позиция стрелки сверху",
                    "required": false,
                    "type": "string | number",
                    "example": null
                }
            ],
            "methods": []
        },
        "IComponentStylePosition": {
            "name": "IComponentStylePosition",
            "moduleName": "hooks/useAbsolutePositioning",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "left",
                    "decorators": [],
                    "description": "Позиция компонента слева",
                    "required": true,
                    "type": "number | \"unset\"",
                    "example": null
                },
                {
                    "name": "right",
                    "decorators": [],
                    "description": "Позиция компонента справа",
                    "required": true,
                    "type": "number | \"unset\"",
                    "example": null
                },
                {
                    "name": "top",
                    "decorators": [],
                    "description": "Позиция компонента сверху",
                    "required": true,
                    "type": "number | \"unset\"",
                    "example": null
                }
            ],
            "methods": []
        },
        "IAddressBarConfig": {
            "name": "IAddressBarConfig",
            "moduleName": "hooks/useAddressBar",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Флаг для управления включением синхронизации с addressBar",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель",
                    "required": false,
                    "type": "Model",
                    "example": null
                },
                {
                    "name": "useHash",
                    "decorators": [],
                    "description": "Использовать ли #",
                    "required": false,
                    "type": "boolean",
                    "example": "false"
                }
            ],
            "methods": []
        },
        "IAddressBarOutput": {
            "name": "IAddressBarOutput",
            "moduleName": "hooks/useAddressBar",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "initialQuery",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "updateQuery",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "values",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IApplicationHookConfig": {
            "name": "IApplicationHookConfig",
            "moduleName": "hooks/useApplication",
            "title": "Application HOC",
            "description": "Обертка над корневым компонентом приложения, используется только в `Application.tsx`. Добавляет через React Context\nкомпоненты приложения и конфигурирует их.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "components",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{clientStorage: IClientStorageComponentConfig & IComponentConfig, html: IComponentConfig, http: IHttpComponentConfig & IJwtHttpComponentConfig & IComponentConfig, locale: ILocaleComponentConfig & IComponentConfig, meta: IComponentConfig, pushNotification: IComponentConfig, resource: IResourceComponentConfig & IComponentConfig, store: IComponentConfig, ui: IComponentConfig, ws: IWebSocketComponentConfig & IComponentConfig}",
                    "example": null
                },
                {
                    "name": "defaultFetches",
                    "decorators": [],
                    "description": "These fetch configurations will be used to preload and store for no matter what route matched in case of SSR",
                    "required": false,
                    "type": "IFetchConfig[]",
                    "example": null
                },
                {
                    "name": "layoutProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "reducers",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "routerProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRouterProps",
                    "example": null
                },
                {
                    "name": "screen",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Omit",
                    "example": null
                },
                {
                    "name": "theme",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Omit",
                    "example": null
                },
                {
                    "name": "useGlobal",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "layoutView",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CustomView",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onInit",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "routes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRouteItem",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IApplicationHookResult": {
            "name": "IApplicationHookResult",
            "moduleName": "hooks/useApplication",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "components",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IComponents",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "renderApplication",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "children",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IComponentConfig": {
            "name": "IComponentConfig",
            "moduleName": "hooks/useApplication",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null
                }
            ],
            "methods": []
        },
        "IBem": {
            "name": "IBem",
            "moduleName": "hooks/useBem",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [],
            "methods": [
                {
                    "name": "block",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "classes",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "element",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "classes",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IAutoCompleteConfig": {
            "name": "IAutoCompleteConfig",
            "moduleName": "hooks/useDataProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "delay",
                    "decorators": [],
                    "description": "Задержка в миллисекундах перед осуществлением запроса",
                    "required": false,
                    "type": "number",
                    "example": "100"
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Подключить autocomplete?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "minLength",
                    "decorators": [],
                    "description": "Минимальная длина запроса",
                    "required": false,
                    "type": "number",
                    "example": "2"
                }
            ],
            "methods": []
        },
        "IDataProvider": {
            "name": "IDataProvider",
            "moduleName": "hooks/useDataProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "URL для подгрузки новой коллекции данных",
                    "required": false,
                    "type": "string",
                    "example": "'/api/v1/search'"
                },
                {
                    "name": "params",
                    "decorators": [],
                    "description": "Параметры запроса",
                    "required": false,
                    "type": "Record",
                    "example": "{pageSize: 3}"
                },
                {
                    "name": "reduxId",
                    "decorators": [],
                    "description": "Уникальный (глобально) идентификатор, под которых будут храниться\nподгруженные данные в redux (при включенном флаге useRedux). Если\nне задан - данные будут храниться в локальном стейте",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onSearch",
                    "decorators": [],
                    "description": "Обработчик, который вызывается для подгрузки данных.\nЕсли обработчик не передан, то по умолчанию отправится post-запрос.",
                    "required": false,
                    "type": "unknown[] | Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "action",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDataProviderConfig": {
            "name": "IDataProviderConfig",
            "moduleName": "hooks/useDataProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "Настройки поиска",
                    "required": false,
                    "type": "boolean | IAutoCompleteConfig",
                    "example": "{\n enable: true,\n minLength: 2,\n delay: 100\n}"
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.",
                    "required": false,
                    "type": "IDataProvider",
                    "example": null
                },
                {
                    "name": "initialSelectedIds",
                    "decorators": [],
                    "description": "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`",
                    "required": false,
                    "type": "number[]",
                    "example": "[1, 22]"
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": false,
                    "type": "string | {} | string | number | {id: string | number | boolean, label: string | any}[]",
                    "example": "[\n {\n  id: 1,\n  label: 'Krasnoyarsk'\n },\n {\n  id: 2,\n  label: 'Moscow'\n }\n]"
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Текст запроса",
                    "required": false,
                    "type": "string",
                    "example": "'some text'"
                }
            ],
            "methods": []
        },
        "IDataProviderResult": {
            "name": "IDataProviderResult",
            "moduleName": "hooks/useDataProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "isAutoComplete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: string | number | boolean, label: string}[]",
                    "example": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: string | number | boolean, label: string}[]",
                    "example": null
                }
            ],
            "methods": []
        },
        "IDataSelectConfig": {
            "name": "IDataSelectConfig",
            "moduleName": "hooks/useDataSelect",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "groupAttribute",
                    "decorators": [],
                    "description": "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится",
                    "required": false,
                    "type": "string",
                    "example": "items"
                },
                {
                    "name": "inputValue",
                    "decorators": [],
                    "description": "Значение поля в форме",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Список с видимыми элементами",
                    "required": false,
                    "type": "IDataSelectItem[]",
                    "example": "[{id: 1, label: 'Krasnoyarsk'}, {id: 2, label: 'Moscow'}]"
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Возможность множественного выбора",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": false,
                    "type": "string",
                    "example": "id"
                },
                {
                    "name": "selectFirst",
                    "decorators": [],
                    "description": "Сделать активным первый элемент в списке",
                    "required": false,
                    "type": "any",
                    "example": "true"
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "Список с идентификаторами выбранных элементов",
                    "required": false,
                    "type": "any",
                    "example": "[1, 4]"
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": " Список со всеми элементами",
                    "required": false,
                    "type": "IDataSelectItem[]",
                    "example": null
                }
            ],
            "methods": []
        },
        "IDataSelectItem": {
            "name": "IDataSelectItem",
            "moduleName": "hooks/useDataSelect",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор элемента",
                    "required": true,
                    "type": "string | number | boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Отображаемое название для IDataSelectItem",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IDataSelectResult": {
            "name": "IDataSelectResult",
            "moduleName": "hooks/useDataSelect",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "hoveredId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number | string",
                    "example": null
                },
                {
                    "name": "isFocused",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isSelectedAll",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "PrimaryKey[]",
                    "example": null
                },
                {
                    "name": "selectedItems",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IDataSelectItem[]",
                    "example": null
                },
                {
                    "name": "setSelectedAll",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "setHoveredId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "PrimaryKey",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setIsFocused",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setIsOpened",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setSelectedIds",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "ids",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "PrimaryKey | PrimaryKey[]",
                            "example": null
                        },
                        {
                            "name": "skipToggle",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFetchConfig": {
            "name": "IFetchConfig",
            "moduleName": "hooks/useFetch",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "method",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "params",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "config",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IFetchConfig",
                            "example": null
                        },
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IComponents",
                            "example": null
                        },
                        {
                            "name": "addCancelToken",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFetchResult": {
            "name": "IFetchResult",
            "moduleName": "hooks/useFetch",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "axiosError",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "AxiosError",
                    "example": null
                },
                {
                    "name": "data",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "T | {providerData: {type: string, value: string}}",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "newParams",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFileInput": {
            "name": "IFileInput",
            "moduleName": "hooks/useFile",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "backendUrl",
                    "decorators": [],
                    "description": "Экшен для отправки на бэкенд",
                    "required": false,
                    "type": "any",
                    "example": "'/api/v1/user/avatar/crop'"
                },
                {
                    "name": "imagesExactSize",
                    "decorators": [],
                    "description": "Точные размеры изображений",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesOnly",
                    "decorators": [],
                    "description": "Использовать только изображения",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesProcessor",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "initialFiles",
                    "decorators": [],
                    "description": "Начальные файлы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "mimeTypes",
                    "decorators": [],
                    "description": "Список mime-типов",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Множественный выбор файлов",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "uploader",
                    "decorators": [],
                    "description": "Позволяет указать uploader",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "uploaderConfig",
                    "decorators": [],
                    "description": "Параметры для uploader",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": []
        },
        "IFileOutput": {
            "name": "IFileOutput",
            "moduleName": "hooks/useFile",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "files",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "onAdd",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onBrowse",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "onRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "uploader",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": []
        },
        "ILayout": {
            "name": "ILayout",
            "moduleName": "hooks/useLayout",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "data",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "error",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "status",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IListConfig": {
            "name": "IListConfig",
            "moduleName": "hooks/useList",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "Url, который вернет коллекцию элементов",
                    "required": false,
                    "type": "string",
                    "example": "api/v1/articles"
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "Тип HTTP запроса (GET | POST | PUT | DELETE)",
                    "required": false,
                    "type": "string",
                    "example": "GET"
                },
                {
                    "name": "addressBar",
                    "decorators": [],
                    "description": "Синхронизация значений формы списка с адресной строкой",
                    "required": false,
                    "type": "boolean | IAddressBarConfig",
                    "example": "true"
                },
                {
                    "name": "autoDestroy",
                    "decorators": [],
                    "description": "Удаление данных списка из хранилища Redux при размонтировании компонента",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "autoFetchOnFormChanges",
                    "decorators": [],
                    "description": "Отправлять запрос на обновление данных при изменении данных формы. По-умолчанию - включено.",
                    "required": false,
                    "type": "boolean",
                    "example": "false"
                },
                {
                    "name": "empty",
                    "decorators": [],
                    "description": "Заглушка в случае отсутствия элементов",
                    "required": false,
                    "type": "string | boolean | IEmptyProps",
                    "example": "{\n text: 'Записи не найдены'\n}"
                },
                {
                    "name": "initialItems",
                    "decorators": [],
                    "description": "Начальные элементы. Используется для подгрузки нескольких списков в один запрос, при этом не отменяя пагинацию\nи последующие запросы на бекенд для 2-й и следующих страниц",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "initialTotal",
                    "decorators": [],
                    "description": "Количество элементов всего в списке (для отрисовки пагинации), заданное вручную",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Состояние загрузки элементов списка",
                    "required": false,
                    "type": "boolean",
                    "example": "false"
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы коллекции",
                    "required": false,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Варианты расположения элементов коллекции",
                    "required": false,
                    "type": "boolean | ILayoutNamesProps",
                    "example": "{\n items: [\n  {\n   id: 'list',\n   label: 'List'\n  },\n  {\n   id: 'grid',\n   label: 'Grid'\n  }\n ]\n}"
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "Идентификатор списка",
                    "required": false,
                    "type": "string",
                    "example": "ArticlesList"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "pagination",
                    "decorators": [],
                    "description": "Подключение пагинации",
                    "required": false,
                    "type": "boolean | IPaginationProps",
                    "example": "{\n loadMore: true\n}"
                },
                {
                    "name": "paginationSize",
                    "decorators": [],
                    "description": "Переключение количества элементов в списке",
                    "required": false,
                    "type": "boolean | IPaginationSizeProps",
                    "example": "{\n sizes: [3, 6, 9],\n defaultValue: 3\n}"
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": false,
                    "type": "string",
                    "example": "id"
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Дополнительные параметры, значения которых нужно передавать в запросе для получения данных",
                    "required": false,
                    "type": "Record",
                    "example": "{\n tagName: 'MarketReviews'\n}"
                },
                {
                    "name": "scope",
                    "decorators": [],
                    "description": "Параметр для загрузки данных списка с сервера",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "searchForm",
                    "decorators": [],
                    "description": "Форма для поиска элементов",
                    "required": false,
                    "type": "IFormProps",
                    "example": "{\n fields: ['title'],\n model: {\n  attributes: [\n   'title:string:Название'\n  ]\n }\n}"
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "Модель для синхронизации значений формы с адресной строкой",
                    "required": false,
                    "type": "string",
                    "example": "{\n attributes: [\n  {\n   attribute: 'isMilesAvailable',\n   type: boolean\n  }\n ]\n}"
                },
                {
                    "name": "sort",
                    "decorators": [],
                    "description": "Подключение сортировки",
                    "required": false,
                    "type": "boolean | ISortConfig",
                    "example": "{\n enable: true,\n defaultSort: 'startDate'\n}"
                }
            ],
            "methods": [
                {
                    "name": "condition",
                    "decorators": [],
                    "description": "Обработчик, который составляет список условий для локальной фильтрации элементов коллекции",
                    "required": false,
                    "type": "any[]",
                    "example": null,
                    "parameters": [
                        {
                            "name": "query",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onError",
                    "decorators": [],
                    "description": "Обработчик события ошибки выполнения запроса",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "Обработчик, который вызывается при изменении значений формы, и нужен для подгрузки новых элементов коллекции",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "list",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IList",
                            "example": null
                        },
                        {
                            "name": "query",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "http",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IListOutput": {
            "name": "IListOutput",
            "moduleName": "hooks/useList",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "layoutNamesPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "list",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IList",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Model",
                    "example": null
                },
                {
                    "name": "paginationPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "paginationSizePosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Model",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onSort",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderEmpty",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderLayoutNames",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderList",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "children",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderPagination",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderPaginationSize",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderSearchForm",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "ISortConfig": {
            "name": "ISortConfig",
            "moduleName": "hooks/useList",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля сортировки в форме",
                    "required": false,
                    "type": "string",
                    "example": "sort"
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Значение сортировки по умолчанию. Нужно указать название свойства, по которому items будут сортироваться,\nа с помощью знака \"-\" задать тип сортировки (со знаком минус - сортировать по убыванию, иначе по возрастанию).",
                    "required": false,
                    "type": "string | string[]",
                    "example": "-price"
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Включить сортировку",
                    "required": false,
                    "type": "boolean",
                    "example": "false"
                }
            ],
            "methods": []
        },
        "IPreparedTreeItem": {
            "name": "IPreparedTreeItem",
            "moduleName": "hooks/useTree",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ITreeItem"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?"
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "hasItems",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор узла",
                    "required": true,
                    "type": "string | number | boolean",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isSelected",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "ITreeItem[]",
                    "example": "[\n {\n  id: 2,\n  label: 'Nested element',\n  items: [...]\n }\n]"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "level",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "Выбор html-тэга, который будет вставлен в DOM",
                    "required": false,
                    "type": "\"a\" | \"button\"",
                    "example": "button"
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank"
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "Цвет текста кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile"
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "Record",
                    "example": "{userId: 52}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit"
                },
                {
                    "name": "uniqueId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу, используется совместно с свойством `link`",
                    "required": false,
                    "type": "string",
                    "example": "https://kozhindev.com"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Скрыть или показать узел",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Обработчик события нажатия. Для асинхронных событий вовзращяйте в обработчике `Promise`, тогда кнопка\nавтоматически будет переключаться в режим загрузки (`loading`) на время выполнения `Promise`.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITreeConfig": {
            "name": "ITreeConfig",
            "moduleName": "hooks/useTree",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "alwaysOpened",
                    "decorators": [],
                    "description": " Используется для управления раскрытием всех элементов в дереве",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "autoOpenLevels",
                    "decorators": [],
                    "description": "Максимальный уровень вложенности, до которого все узлы будут отображаться в развёрнутом виде",
                    "required": false,
                    "type": "number",
                    "example": "1"
                },
                {
                    "name": "currentPage",
                    "decorators": [],
                    "description": " Текущая страница, используется для корректного отображения пагинации",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция с узлами. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в виде дерева.",
                    "required": false,
                    "type": "string | ITreeItem[]",
                    "example": "[\n {\n  id: 1,\n  label: 'Root',\n  items: [...]\n }\n] | 'root'"
                },
                {
                    "name": "itemsKey",
                    "decorators": [],
                    "description": "Ключ для доступа к вложенным элементам узла",
                    "required": false,
                    "type": "string",
                    "example": "'items'"
                },
                {
                    "name": "itemsOnPage",
                    "decorators": [],
                    "description": " Количество элементов на странице, используется для корректного отображения пагинации",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "level",
                    "decorators": [],
                    "description": "Ограничивает максимальный уровень вложенности дерева",
                    "required": false,
                    "type": "number",
                    "example": "2"
                },
                {
                    "name": "routerParams",
                    "decorators": [],
                    "description": " Параметры роутинга",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "selectedItemId",
                    "decorators": [],
                    "description": "Идентификатор узла, которой нужно отобразить в раскрытом виде",
                    "required": false,
                    "type": "string | number",
                    "example": "2"
                }
            ],
            "methods": [
                {
                    "name": "onExpand",
                    "decorators": [],
                    "description": "Обработчик на клик по узлу",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITreeItem": {
            "name": "ITreeItem",
            "moduleName": "hooks/useTree",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?"
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор узла",
                    "required": true,
                    "type": "string | number | boolean",
                    "example": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "ITreeItem[]",
                    "example": "[\n {\n  id: 2,\n  label: 'Nested element',\n  items: [...]\n }\n]"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "Выбор html-тэга, который будет вставлен в DOM",
                    "required": false,
                    "type": "\"a\" | \"button\"",
                    "example": "button"
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank"
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "Цвет текста кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile"
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "Record",
                    "example": "{userId: 52}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit"
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу, используется совместно с свойством `link`",
                    "required": false,
                    "type": "string",
                    "example": "https://kozhindev.com"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Скрыть или показать узел",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Обработчик события нажатия. Для асинхронных событий вовзращяйте в обработчике `Promise`, тогда кнопка\nавтоматически будет переключаться в режим загрузки (`loading`) на время выполнения `Promise`.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "=> fetch(...)\n",
                            "required": true,
                            "type": "Event | MouseEvent",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITreeOutput": {
            "name": "ITreeOutput",
            "moduleName": "hooks/useTree",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "treeItems",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IPreparedTreeItem[]",
                    "example": null
                }
            ],
            "methods": []
        },
        "IUiComponent": {
            "name": "IUiComponent",
            "moduleName": "index",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": []
        },
        "IComponents": {
            "name": "IComponents",
            "moduleName": "providers/ComponentsProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "clientStorage",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IClientStorageComponent",
                    "example": null
                },
                {
                    "name": "html",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IHtmlComponent",
                    "example": null
                },
                {
                    "name": "http",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IHttpComponent",
                    "example": null
                },
                {
                    "name": "locale",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ILocaleComponent",
                    "example": null
                },
                {
                    "name": "meta",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IMetaComponent",
                    "example": null
                },
                {
                    "name": "pushNotification",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "resource",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IResourceComponent",
                    "example": null
                },
                {
                    "name": "store",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IStoreComponent",
                    "example": null
                },
                {
                    "name": "ui",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IUiApplicationComponent",
                    "example": null
                },
                {
                    "name": "ws",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IWebSocketComponent",
                    "example": null
                }
            ],
            "methods": []
        },
        "IComponentsProviderProps": {
            "name": "IComponentsProviderProps",
            "moduleName": "providers/ComponentsProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "PropsWithChildren<any>"
            ],
            "properties": [
                {
                    "name": "components",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IComponents",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IScreen": {
            "name": "IScreen",
            "moduleName": "providers/ScreenProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "media",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "setMedia",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "width",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "getDeviceType",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "isDesktop",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "isPhone",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "isTablet",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IScreenProviderProps": {
            "name": "IScreenProviderProps",
            "moduleName": "providers/ScreenProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "PropsWithChildren<any>"
            ],
            "properties": [
                {
                    "name": "media",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "skipTimeout",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IPreloadedData": {
            "name": "IPreloadedData",
            "moduleName": "providers/SsrProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [],
            "methods": []
        },
        "ISsr": {
            "name": "ISsr",
            "moduleName": "providers/SsrProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "history",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{initialEntries: string[]}",
                    "example": null
                },
                {
                    "name": "preloadedData",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IPreloadedData",
                    "example": null
                },
                {
                    "name": "staticContext",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "StaticRouterContext",
                    "example": null
                }
            ],
            "methods": []
        },
        "ISsrProviderProps": {
            "name": "ISsrProviderProps",
            "moduleName": "providers/SsrProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ISsr",
                "PropsWithChildren<any>"
            ],
            "properties": [
                {
                    "name": "history",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{initialEntries: string[]}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "preloadedData",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IPreloadedData",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "staticContext",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "StaticRouterContext",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "ITheme": {
            "name": "ITheme",
            "moduleName": "providers/ThemeProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "setTheme",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Dispatch",
                    "example": null
                },
                {
                    "name": "theme",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "toggleTheme",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                }
            ],
            "methods": []
        },
        "IThemeProviderProps": {
            "name": "IThemeProviderProps",
            "moduleName": "providers/ThemeProvider",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "React.PropsWithChildren<any>"
            ],
            "properties": [
                {
                    "name": "themeStorageKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "themes",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IFieldsState": {
            "name": "IFieldsState",
            "moduleName": "reducers/fields",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "meta",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                }
            ],
            "methods": []
        },
        "IModal": {
            "name": "IModal",
            "moduleName": "reducers/modal",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "modal",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "props",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": []
        },
        "IRouterInitialState": {
            "name": "IRouterInitialState",
            "moduleName": "reducers/router",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "activeIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "configs",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "counters",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "data",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "location",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{hash: string, pathname: string, query: Record, search: string}",
                    "example": null
                },
                {
                    "name": "match",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{isExact: string, params: Record, path: string, url: string}",
                    "example": null
                },
                {
                    "name": "params",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "routesMap",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "routesTree",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IRouteItem",
                    "example": null
                }
            ],
            "methods": []
        },
        "IAccordionIcon": {
            "name": "IAccordionIcon",
            "moduleName": "ui/content/Accordion/Accordion",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "close",
                    "decorators": [],
                    "description": "Пользовательская иконка закрытия",
                    "required": true,
                    "type": "string | ReactElement",
                    "example": "'user'"
                },
                {
                    "name": "open",
                    "decorators": [],
                    "description": "Пользовательская иконка открытия",
                    "required": true,
                    "type": "string | ReactElement",
                    "example": "'user'"
                }
            ],
            "methods": []
        },
        "IAccordionProps": {
            "name": "IAccordionProps",
            "moduleName": "ui/content/Accordion/Accordion",
            "title": "Accordion",
            "description": "\nКомпонент-аккордеон позволяет создавать интерактивные списки или контейнеры,\nгде содержимое может быть развернуто или свернуто по требованию пользователя.\nКаждый элемент аккордеона может быть раскрытым или свернутым, и пользователь может\nизменять их состояние путем нажатия на соответствующий заголовок элемента.\n\nКомпонент `Accordion` обычно используется для создания разделов, подразделов или\nсписков, где необходимо показывать или скрывать дополнительную информацию по требованию.\n\nВнутри компонента `Accordion` могут быть использованы дочерние элементы `AccordionItem`,\nкаждый из которых представляет отдельный элемент аккордеона с заголовком и содержимым.\nПри нажатии на заголовок, соответствующий элемент может быть развернут или свернут.\n\nПримечание: В компоненте `Accordion` должен быть указан хотя бы один дочерний элемент `AccordionItem`.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "activeKey",
                    "decorators": [],
                    "description": "Номер активного AccordionItem, который может меняться динамический или быть статичным",
                    "required": false,
                    "type": "number",
                    "example": "1",
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит Accordion в выключенное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "hasOneOpenItem",
                    "decorators": [],
                    "description": "Включает режим в котором можно открыть только один AccordionItem",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Пользовательская иконка svg или название иконки или объект с иконками open и close",
                    "required": false,
                    "type": "string | ReactElement | IAccordionIcon",
                    "example": "'circle'",
                    "defaultValue": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Стилизация позиционирования.\nПри значении \"top\" верхняя часть шапки будет закруглена.",
                    "required": false,
                    "type": "\"top\" | \"bottom\" | \"middle\"",
                    "example": "'top'",
                    "defaultValue": null
                },
                {
                    "name": "showIcon",
                    "decorators": [],
                    "description": "Отображать ли иконку у AccordionItem",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "theme",
                    "decorators": [],
                    "description": "Тема аккордеона",
                    "required": false,
                    "type": "\"light\" | \"dark\" | \"intermediate\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Название AccordionItem",
                    "required": false,
                    "type": "string",
                    "example": "'Подробнее'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Вызываемая функция при каждом изменении состояния",
                    "required": false,
                    "type": "void",
                    "example": "{\n () => { console.log('success') }\n}",
                    "parameters": []
                }
            ]
        },
        "IAccordionViewProps": {
            "name": "IAccordionViewProps",
            "moduleName": "ui/content/Accordion/Accordion",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IAccordionProps"
            ],
            "properties": [
                {
                    "name": "activeKey",
                    "decorators": [],
                    "description": "Номер активного AccordionItem, который может меняться динамический или быть статичным",
                    "required": false,
                    "type": "number",
                    "example": "1"
                },
                {
                    "name": "childIndex",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит Accordion в выключенное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "hasOneOpenItem",
                    "decorators": [],
                    "description": "Включает режим в котором можно открыть только один AccordionItem",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Пользовательская иконка svg или название иконки или объект с иконками open и close",
                    "required": false,
                    "type": "string | ReactElement | IAccordionIcon",
                    "example": "'circle'"
                },
                {
                    "name": "isShowMore",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Стилизация позиционирования.\nПри значении \"top\" верхняя часть шапки будет закруглена.",
                    "required": false,
                    "type": "\"top\" | \"bottom\" | \"middle\"",
                    "example": "'top'"
                },
                {
                    "name": "showIcon",
                    "decorators": [],
                    "description": "Отображать ли иконку у AccordionItem",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "theme",
                    "decorators": [],
                    "description": "Тема аккордеона",
                    "required": false,
                    "type": "\"light\" | \"dark\" | \"intermediate\"",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Название AccordionItem",
                    "required": false,
                    "type": "string",
                    "example": "'Подробнее'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Вызываемая функция при каждом изменении состояния",
                    "required": false,
                    "type": "void",
                    "example": "{\n () => { console.log('success') }\n}",
                    "parameters": []
                },
                {
                    "name": "toggleAccordion",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "number",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "toggleCollapse",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "number",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IAlertProps": {
            "name": "IAlertProps",
            "moduleName": "ui/content/Alert/Alert",
            "title": "Alert",
            "description": "\nКомпонент оповещения, который отображает сообщения для пользователя.\nОн может быть использован для показа уведомлений, предупреждений или ошибок,\nкоторые требуют внимания пользователя.\n\nКомпонент `Alert` может содержать текстовое сообщение и дополнительное описание,\nа также опциональную кнопку для закрытия оповещения.\n\nОповещения могут иметь различные типы, такие как 'success', 'info', 'warning', 'error'\nили другие пользовательские типы.\n\nКомпонент также предлагает настройки для отображения иконки, анимации, а также\nобратного вызова при закрытии оповещения.\n",
            "tags": {},
            "defaultProps": {
                "animation": "false",
                "animationDuration": "390",
                "showClose": "false",
                "showIcon": "true",
                "type": "'default'"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "animation",
                    "decorators": [],
                    "description": "Флаг, который включает анимацию",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "false"
                },
                {
                    "name": "animationDuration",
                    "decorators": [],
                    "description": "Время анимации в миллисекундах",
                    "required": false,
                    "type": "number",
                    "example": "1000",
                    "defaultValue": "390"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": "{ <span>children</span> }",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "description",
                    "decorators": [],
                    "description": "Дополнительное содрежание сообщения.",
                    "required": false,
                    "type": "string",
                    "example": "'Please, check your email.'",
                    "defaultValue": null
                },
                {
                    "name": "message",
                    "decorators": [],
                    "description": "Основное сообщения Оповещения",
                    "required": false,
                    "type": "string",
                    "example": "'Sending is confirmed!'",
                    "defaultValue": null
                },
                {
                    "name": "showClose",
                    "decorators": [],
                    "description": " Нужно ли отображать кнопку, чтобы закрыть Оповещение",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "false"
                },
                {
                    "name": "showIcon",
                    "decorators": [],
                    "description": "Нужно ли отображать иконку, соответствующую типа Оповещения",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "true"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Типы Оповещений",
                    "required": false,
                    "type": "string",
                    "example": "'info'",
                    "defaultValue": "'default'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Callback функция вызываемая при нажатии на кнопку закрытия",
                    "required": false,
                    "type": "void",
                    "example": "{\n () => console.log('this is callback')\n}",
                    "parameters": []
                }
            ]
        },
        "IAlertViewProps": {
            "name": "IAlertViewProps",
            "moduleName": "ui/content/Alert/Alert",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IAlertProps"
            ],
            "properties": [
                {
                    "name": "animation",
                    "decorators": [],
                    "description": "Флаг, который включает анимацию",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "animationDuration",
                    "decorators": [],
                    "description": "Время анимации в миллисекундах",
                    "required": false,
                    "type": "number",
                    "example": "1000"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": "{ <span>children</span> }"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "description",
                    "decorators": [],
                    "description": "Дополнительное содрежание сообщения.",
                    "required": false,
                    "type": "string",
                    "example": "'Please, check your email.'"
                },
                {
                    "name": "isExist",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isVisible",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "message",
                    "decorators": [],
                    "description": "Основное сообщения Оповещения",
                    "required": false,
                    "type": "string",
                    "example": "'Sending is confirmed!'"
                },
                {
                    "name": "showClose",
                    "decorators": [],
                    "description": " Нужно ли отображать кнопку, чтобы закрыть Оповещение",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showIcon",
                    "decorators": [],
                    "description": "Нужно ли отображать иконку, соответствующую типа Оповещения",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Типы Оповещений",
                    "required": false,
                    "type": "string",
                    "example": "'info'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "MouseEvent",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Callback функция вызываемая при нажатии на кнопку закрытия",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IAvatarProps": {
            "name": "IAvatarProps",
            "moduleName": "ui/content/Avatar/Avatar",
            "title": "Avatar",
            "description": "\nКомпонент аватара, который отображает изображение пользователя или иконку.\nОн может использоваться для представления пользователя, контакта или профиля.\n\nКомпонент `Avatar` позволяет указать размер, форму, изображение или иконку,\nа также добавить альтернативный текст и статус онлайна.\n\nЕсли изображение аватара не загружается, можно показать альтернативный текст\nили иконку вместо него.\n",
            "tags": {},
            "defaultProps": {
                "shape": "'circle'",
                "size": "'md'",
                "status": "false"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "alt",
                    "decorators": [],
                    "description": "Альтернативный текст для изображения",
                    "required": false,
                    "type": "string",
                    "example": "'default image'",
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hasBorder",
                    "decorators": [],
                    "description": "Наличие обводки вокруг аватара",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "shape",
                    "decorators": [],
                    "description": "Форма аватара",
                    "required": false,
                    "type": "string",
                    "example": "'circle'",
                    "defaultValue": "'circle'"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер аватара",
                    "required": false,
                    "type": "string | number",
                    "example": "'md'",
                    "defaultValue": "'md'"
                },
                {
                    "name": "src",
                    "decorators": [],
                    "description": "Ссылка на изображение для аватара",
                    "required": false,
                    "type": "string",
                    "example": "'https://user/avatar.png'",
                    "defaultValue": null
                },
                {
                    "name": "srcSet",
                    "decorators": [],
                    "description": "Набор адаптивных изображений",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "status",
                    "decorators": [],
                    "description": "Статус онлайна",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "false"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок аватарки",
                    "required": false,
                    "type": "string",
                    "example": "'Avatar'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IAvatarViewProps": {
            "name": "IAvatarViewProps",
            "moduleName": "ui/content/Avatar/Avatar",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IAvatarProps"
            ],
            "properties": [
                {
                    "name": "alt",
                    "decorators": [],
                    "description": "Альтернативный текст для изображения",
                    "required": false,
                    "type": "string",
                    "example": "'default image'"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hasBorder",
                    "decorators": [],
                    "description": "Наличие обводки вокруг аватара",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isError",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "shape",
                    "decorators": [],
                    "description": "Форма аватара",
                    "required": false,
                    "type": "string",
                    "example": "'circle'"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер аватара",
                    "required": false,
                    "type": "string | number",
                    "example": "'md'"
                },
                {
                    "name": "src",
                    "decorators": [],
                    "description": "Ссылка на изображение для аватара",
                    "required": false,
                    "type": "string",
                    "example": "'https://user/avatar.png'"
                },
                {
                    "name": "srcSet",
                    "decorators": [],
                    "description": "Набор адаптивных изображений",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "status",
                    "decorators": [],
                    "description": "Статус онлайна",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок аватарки",
                    "required": false,
                    "type": "string",
                    "example": "'Avatar'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "formattedTitle",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onError",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "AvatarGroupProps": {
            "name": "AvatarGroupProps",
            "moduleName": "ui/content/Avatar/AvatarGroup",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode[]",
                    "example": null
                },
                {
                    "name": "maxCount",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CSSProperties",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": null
                }
            ],
            "methods": []
        },
        "IBadgeProps": {
            "name": "IBadgeProps",
            "moduleName": "ui/content/Badge/Badge",
            "title": "Badge",
            "description": "\nКомпонент бэйджа, который используется для отображения информационных меток на элементах пользовательского интерфейса.\nОн может использоваться для обозначения статуса, количества, типа или любой другой важной информации.\n\nКомпонент `Badge` позволяет указать тип бэйджа, стиль скругления, наличие кнопки для закрытия,\nтекст сообщения, отображение счетчика и размер.\n\nЕсли установлен флаг `showClose`, то пользователь может закрыть бэйдж, вызывая соответствующую callback функцию `onClose`.\n",
            "tags": {},
            "defaultProps": {
                "counter": "false",
                "roundingStyle": "'squarer'",
                "showClose": "false",
                "size": "'md'",
                "type": "'primary'"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "counter",
                    "decorators": [],
                    "description": "Нужно ли отображать счетчик",
                    "required": true,
                    "type": "boolean | ICounter",
                    "example": "{\n isEnable: true,\n content: 'Hello from counter!',\n}",
                    "defaultValue": "false"
                },
                {
                    "name": "message",
                    "decorators": [],
                    "description": "Текст для badge",
                    "required": false,
                    "type": "string",
                    "example": "'Sending is confirmed!'",
                    "defaultValue": null
                },
                {
                    "name": "roundingStyle",
                    "decorators": [],
                    "description": "Стиль скругления",
                    "required": true,
                    "type": "\"rounder\" | \"squarer\"",
                    "example": null,
                    "defaultValue": "'squarer'"
                },
                {
                    "name": "showClose",
                    "decorators": [],
                    "description": "Нужно ли отображать кнопку, чтобы закрыть badge",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "false"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер для badge",
                    "required": true,
                    "type": "string",
                    "example": "'md'",
                    "defaultValue": "'md'"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Тип badge",
                    "required": true,
                    "type": "string",
                    "example": "'primary'",
                    "defaultValue": "'primary'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Callback функция вызываемая при нажатии на кнопку закрытия",
                    "required": false,
                    "type": "void",
                    "example": "() => console.log('Hello from onClose!')",
                    "parameters": []
                }
            ]
        },
        "IBadgeViewProps": {
            "name": "IBadgeViewProps",
            "moduleName": "ui/content/Badge/Badge",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IBadgeProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "counter",
                    "decorators": [],
                    "description": "Нужно ли отображать счетчик",
                    "required": true,
                    "type": "boolean | ICounter",
                    "example": "{\n isEnable: true,\n content: 'Hello from counter!',\n}"
                },
                {
                    "name": "isExist",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "message",
                    "decorators": [],
                    "description": "Текст для badge",
                    "required": false,
                    "type": "string",
                    "example": "'Sending is confirmed!'"
                },
                {
                    "name": "roundingStyle",
                    "decorators": [],
                    "description": "Стиль скругления",
                    "required": true,
                    "type": "\"rounder\" | \"squarer\"",
                    "example": null
                },
                {
                    "name": "showClose",
                    "decorators": [],
                    "description": "Нужно ли отображать кнопку, чтобы закрыть badge",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер для badge",
                    "required": true,
                    "type": "string",
                    "example": "'md'"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Тип badge",
                    "required": true,
                    "type": "string",
                    "example": "'primary'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Callback функция вызываемая при нажатии на кнопку закрытия",
                    "required": false,
                    "type": "void",
                    "example": "() => console.log('Hello from onClose!')",
                    "parameters": []
                }
            ]
        },
        "ICounter": {
            "name": "ICounter",
            "moduleName": "ui/content/Badge/Badge",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Содержимое счетчика",
                    "required": true,
                    "type": "string | number",
                    "example": "'Counter'"
                },
                {
                    "name": "isEnable",
                    "decorators": [],
                    "description": "Состояние счетчика",
                    "required": true,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": []
        },
        "ICalendarProps": {
            "name": "ICalendarProps",
            "moduleName": "ui/content/Calendar/Calendar",
            "title": "Calendar",
            "description": "\nКомпонент календаря, который позволяет выбирать даты или диапазоны дат.\nОн предоставляет пользователю удобный способ выбора даты и может использоваться для различных целей,\nтаких как выбор даты доставки, даты резервирования и т.д.\n\nКомпонент `Calendar` позволяет указать значение даты или диапазона дат, формат значения, callback функцию при изменении,\nсвойства для компонента `DayPicker`, отображение панели выбора месяца/года, количество отображаемых месяцев и другие свойства.\n\nЕсли установлено значение `showFooter`, то будет отображаться футер с кнопкой \"Today\".\n",
            "tags": {},
            "defaultProps": {
                "numberOfMonths": "1",
                "showFooter": "true",
                "valueFormat": "'YYYY-MM-DD'"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "numberOfMonths",
                    "decorators": [],
                    "description": "Количество отображаемых за раз месяцев",
                    "required": false,
                    "type": "number",
                    "example": "1",
                    "defaultValue": "1"
                },
                {
                    "name": "pickerProps",
                    "decorators": [],
                    "description": "Свойства для компонента DayPickerInput",
                    "required": false,
                    "type": "any",
                    "example": "{\n dayPickerProps: {\n  showWeekNumbers: true\n }\n}",
                    "defaultValue": null
                },
                {
                    "name": "showFooter",
                    "decorators": [],
                    "description": "Отображать Footer для календаря (содержит todayButton)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "true"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение задает выбранные в календаре дату или диапазон дат.\nНеобходимо передать валидную дату в виде строки (массива строк)",
                    "required": false,
                    "type": "string | string[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD",
                    "defaultValue": "'YYYY-MM-DD'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Пропсы для компонента отображения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Функция возвращает выбранную в календаре дату",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onMonthChange",
                    "decorators": [],
                    "description": "Callback вызываемый при нажатии на смену года или месяца в шапке Calendar",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "newDate",
                            "decorators": [],
                            "description": "дата первого дня нового месяца\n",
                            "required": true,
                            "type": "Date",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICalendarViewProps": {
            "name": "ICalendarViewProps",
            "moduleName": "ui/content/Calendar/Calendar",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ICalendarProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "fromYear",
                    "decorators": [],
                    "description": "Самый крайний год в прошлом",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "isCaptionPanelVisible",
                    "decorators": [],
                    "description": "Отображает панель для выбора месяца/года",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "month",
                    "decorators": [],
                    "description": "Текущий месяц календаря, также задает выбранный в календаре год",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "numberOfMonths",
                    "decorators": [],
                    "description": "Количество отображаемых за раз месяцев",
                    "required": false,
                    "type": "number",
                    "example": "1"
                },
                {
                    "name": "pickerProps",
                    "decorators": [],
                    "description": "Свойства для компонента DayPickerInput",
                    "required": false,
                    "type": "any",
                    "example": "{\n dayPickerProps: {\n  showWeekNumbers: true\n }\n}"
                },
                {
                    "name": "selectedDates",
                    "decorators": [],
                    "description": "Хранит выбранную дату или диапазон дат",
                    "required": true,
                    "type": "Date[]",
                    "example": null
                },
                {
                    "name": "showFooter",
                    "decorators": [],
                    "description": "Отображать Footer для календаря (содержит todayButton)",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "toYear",
                    "decorators": [],
                    "description": "Самый крайний год в будущем",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение задает выбранные в календаре дату или диапазон дат.\nНеобходимо передать валидную дату в виде строки (массива строк)",
                    "required": false,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Пропсы для компонента отображения",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Функция возвращает выбранную в календаре дату",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onDaySelect",
                    "decorators": [],
                    "description": "Функция возвращает выбранную в календаре дату",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Date",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onMonthChange",
                    "decorators": [],
                    "description": "Callback вызываемый при нажатии на смену года или месяца в шапке Calendar",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "newDate",
                            "decorators": [],
                            "description": "дата первого дня нового месяца\n",
                            "required": true,
                            "type": "Date",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onMonthSelect",
                    "decorators": [],
                    "description": "Функция обновляет значение выбранного месяца",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Date",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "toggleCaptionPanel",
                    "decorators": [],
                    "description": "Функция изменения состояние отображения панели для выбора месяца/года",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "CalendarSystemEventGroupModalViewProps": {
            "name": "CalendarSystemEventGroupModalViewProps",
            "moduleName": "ui/content/CalendarSystem/CalendarSystem",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IModalProps"
            ],
            "properties": [
                {
                    "name": "buttons",
                    "decorators": [],
                    "description": "Коллекция кнопок, которая отобразится в нижней секции Modal",
                    "required": false,
                    "type": "IButtonProps[]",
                    "example": "[\n {\n  label: __(('Закрыть')),\n  onClick: () => props.onClose()\n }\n]"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Кастомный CSS-класс",
                    "required": false,
                    "type": "string",
                    "example": "'CustomCssClassName'"
                },
                {
                    "name": "closeAfterMs",
                    "decorators": [],
                    "description": "Время в миллисекундах, через которое автоматически произойдет закрытие Modal.",
                    "required": false,
                    "type": "number",
                    "example": "1000"
                },
                {
                    "name": "closeTimeoutMs",
                    "decorators": [],
                    "description": "Время, в течение которого будет происходить анимация закрытия Modal.\nПереопределяет отрезок времени, заданный в ModalPortal",
                    "required": false,
                    "type": "number",
                    "example": "300"
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "Свойства для внутреннего компонента",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "eventGroupInitialValues",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{color: string, label: string}",
                    "example": null
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "Группа Modal",
                    "required": false,
                    "type": "string",
                    "example": "'modal'"
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "Порядковый номер Modal",
                    "required": false,
                    "type": "number",
                    "example": "0"
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "Значение свойства отслеживается для показа/закрытия Modal.\nЕсли для компонента ModalPortal установлено значение задержки (animationDelayMc), то после закрытия\nпользователем Modal, оно исчезнет не сразу, а через указанный в animationDelayMc промежуток времени.\nВ течение этого времени флаг isClosing будет равен true.\nЕсли задержка не установлена, Modal закроется сразу же и флаг isClosing всегда будет равен false.",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isCreate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "shouldCloseOnEsc",
                    "decorators": [],
                    "description": "Закрытие Modal при нажатии на клавишу 'ESC'",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "shouldCloseOnOverlayClick",
                    "decorators": [],
                    "description": "Закрытие Modal при клике на компонент overlay внутри Modal (темный фон, отделяющий контент страницы от Modal)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер Modal",
                    "required": false,
                    "type": "string",
                    "example": "'middle'"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок Modal",
                    "required": false,
                    "type": "string",
                    "example": "'Заявка отправлена на модерацию'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение React-компонента для кастомизации view-отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент, который отрендерится внутри Modal",
                    "required": false,
                    "type": "Element",
                    "example": "() => <InnerModalComponent />",
                    "parameters": [
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Обработчик срабатывает при закрытии Modal",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onEventGroupSubmit",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "fields",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICalendarSystemModalViewProps": {
            "name": "ICalendarSystemModalViewProps",
            "moduleName": "ui/content/CalendarSystem/CalendarSystem",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IModalProps"
            ],
            "properties": [
                {
                    "name": "buttons",
                    "decorators": [],
                    "description": "Коллекция кнопок, которая отобразится в нижней секции Modal",
                    "required": false,
                    "type": "IButtonProps[]",
                    "example": "[\n {\n  label: __(('Закрыть')),\n  onClick: () => props.onClose()\n }\n]"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Кастомный CSS-класс",
                    "required": false,
                    "type": "string",
                    "example": "'CustomCssClassName'"
                },
                {
                    "name": "closeAfterMs",
                    "decorators": [],
                    "description": "Время в миллисекундах, через которое автоматически произойдет закрытие Modal.",
                    "required": false,
                    "type": "number",
                    "example": "1000"
                },
                {
                    "name": "closeTimeoutMs",
                    "decorators": [],
                    "description": "Время, в течение которого будет происходить анимация закрытия Modal.\nПереопределяет отрезок времени, заданный в ModalPortal",
                    "required": false,
                    "type": "number",
                    "example": "300"
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "Свойства для внутреннего компонента",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "eventGroups",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IEventGroup[]",
                    "example": null
                },
                {
                    "name": "eventInitialValues",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "Группа Modal",
                    "required": false,
                    "type": "string",
                    "example": "'modal'"
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "Порядковый номер Modal",
                    "required": false,
                    "type": "number",
                    "example": "0"
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "Значение свойства отслеживается для показа/закрытия Modal.\nЕсли для компонента ModalPortal установлено значение задержки (animationDelayMc), то после закрытия\nпользователем Modal, оно исчезнет не сразу, а через указанный в animationDelayMc промежуток времени.\nВ течение этого времени флаг isClosing будет равен true.\nЕсли задержка не установлена, Modal закроется сразу же и флаг isClosing всегда будет равен false.",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isCreate",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "shouldCloseOnEsc",
                    "decorators": [],
                    "description": "Закрытие Modal при нажатии на клавишу 'ESC'",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "shouldCloseOnOverlayClick",
                    "decorators": [],
                    "description": "Закрытие Modal при клике на компонент overlay внутри Modal (темный фон, отделяющий контент страницы от Modal)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер Modal",
                    "required": false,
                    "type": "string",
                    "example": "'middle'"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок Modal",
                    "required": false,
                    "type": "string",
                    "example": "'Заявка отправлена на модерацию'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение React-компонента для кастомизации view-отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент, который отрендерится внутри Modal",
                    "required": false,
                    "type": "Element",
                    "example": "() => <InnerModalComponent />",
                    "parameters": [
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Обработчик срабатывает при закрытии Modal",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onEventSubmit",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "fields",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "eventInitialValues",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "IEventInitialValues",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICalendarSystemProps": {
            "name": "ICalendarSystemProps",
            "moduleName": "ui/content/CalendarSystem/CalendarSystem",
            "title": "CalendarSystem",
            "description": "\nКомплексный компонент календарь служит для планирования событий и их отображения в календаре.\n\nКомпонент умеет отображать события с помощью недельной сетки с шагом в 1 час,\nа также переключать отображение на сетку по месяцам с шагом 1 день.\nПрисутствует возможность добавлять в календарь события и создавать новые группы событий.\n\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "calendarModalProps",
                    "decorators": [],
                    "description": "Свойства для модального окна",
                    "required": false,
                    "type": "IModalProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "eventBlock",
                    "decorators": [],
                    "description": "Параметры для групп событий",
                    "required": true,
                    "type": "{eventGroups: IEventGroup[], title: string}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "eventGroupModalProps",
                    "decorators": [],
                    "description": "Свойства для модалного окна группы событий",
                    "required": false,
                    "type": "IModalProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChangeCalendarType",
                    "decorators": [],
                    "description": "Функция, которая вызовется при смене типа календаря",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "newType",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICalendarSystemViewProps": {
            "name": "ICalendarSystemViewProps",
            "moduleName": "ui/content/CalendarSystem/CalendarSystem",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<ICalendarSystemProps",
                "'calendarGroups'>"
            ],
            "properties": [
                {
                    "name": "allHours",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "calendarType",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "default",
                    "example": null
                },
                {
                    "name": "currentWeekDays",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IDay[]",
                    "example": null
                },
                {
                    "name": "dateToDisplay",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "eventGroups",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IEventGroup[]",
                    "example": null
                },
                {
                    "name": "eventGroupsTitle",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "monthCalendarDays",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IDay[]",
                    "example": null
                },
                {
                    "name": "openCreateEventGroupModal",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "selectedCalendarGroupsIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number[]",
                    "example": null
                },
                {
                    "name": "weekDays",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string[]",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "applyControl",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "MouseEvent",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getEventsFromDate",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IEvent[]",
                    "example": null,
                    "parameters": [
                        {
                            "name": "dateFromDay",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Date",
                            "example": null
                        },
                        {
                            "name": "currentCalendarType",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "default",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onChangeCalendarType",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "newType",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onChangeEventGroupsIds",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "selectedIds",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onMonthChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "newDate",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Date",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "openCreateModal",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "eventInitialDay",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "IDay",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "openEditModal",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IEvent",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDay": {
            "name": "IDay",
            "moduleName": "ui/content/CalendarSystem/CalendarSystem",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "dayNumber",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "formattedDisplay",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isToday",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "outOfRange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": []
        },
        "IEvent": {
            "name": "IEvent",
            "moduleName": "ui/content/CalendarSystem/CalendarSystem",
            "title": "Событие",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "Дата",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "description",
                    "decorators": [],
                    "description": "Внутреннее описания события",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IEventGroup": {
            "name": "IEventGroup",
            "moduleName": "ui/content/CalendarSystem/CalendarSystem",
            "title": "Группа событий",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет",
                    "required": false,
                    "type": "string",
                    "example": "'#000000'"
                },
                {
                    "name": "events",
                    "decorators": [],
                    "description": "События группы",
                    "required": true,
                    "type": "Omit[]",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название группы",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IEventInitialValues": {
            "name": "IEventInitialValues",
            "moduleName": "ui/content/CalendarSystem/CalendarSystem",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IEvent"
            ],
            "properties": [
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "Дата",
                    "required": true,
                    "type": "Date",
                    "example": null
                },
                {
                    "name": "description",
                    "decorators": [],
                    "description": "Внутреннее описания события",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "eventGroupId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IPresentDateInfo": {
            "name": "IPresentDateInfo",
            "moduleName": "ui/content/CalendarSystem/CalendarSystem",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "currentMonth",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "currentYear",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "dateToDisplay",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "ICardHeader": {
            "name": "ICardHeader",
            "moduleName": "ui/content/Card/Card",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "avatar",
                    "decorators": [],
                    "description": "Параметры для аватара",
                    "required": false,
                    "type": "IAvatarProps",
                    "example": "{\n  src: 'Kate.png',\n  status: true,\n}"
                },
                {
                    "name": "head",
                    "decorators": [],
                    "description": "Текст шапки (заголовок)",
                    "required": false,
                    "type": "string",
                    "example": "'Steroids.js head'"
                },
                {
                    "name": "menu",
                    "decorators": [],
                    "description": "Свойства для компонента <Menu/>",
                    "required": false,
                    "type": "IMenuProps",
                    "example": null
                },
                {
                    "name": "subhead",
                    "decorators": [],
                    "description": "Текст шапки (заголовок)",
                    "required": false,
                    "type": "string",
                    "example": "'Steroids.js subhead'"
                }
            ],
            "methods": []
        },
        "ICardProps": {
            "name": "ICardProps",
            "moduleName": "ui/content/Card/Card",
            "title": "Card",
            "description": "\nКомпонент карточки, который представляет контент в структурированном формате с заголовком, обложкой, описанием,\nкнопками, ссылками и другими элементами.\n\nКомпонент `Card` позволяет передать дочерние элементы, обложку, описание, заголовок, параметры заголовка,\nфутер, коллекцию ссылок и коллекцию кнопок.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "buttons",
                    "decorators": [],
                    "description": "Коллекция кнопок",
                    "required": false,
                    "type": "IButtonProps[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "cover",
                    "decorators": [],
                    "description": "Обложка для карточки, нужно передать ссылку на изображение",
                    "required": false,
                    "type": "string",
                    "example": "'https://cat/cat.png'",
                    "defaultValue": null
                },
                {
                    "name": "description",
                    "decorators": [],
                    "description": "Описание карточки",
                    "required": false,
                    "type": "string",
                    "example": "'Scroll to see more...'",
                    "defaultValue": null
                },
                {
                    "name": "footer",
                    "decorators": [],
                    "description": "Контент футера",
                    "required": false,
                    "type": "{head: string, subhead: string}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "header",
                    "decorators": [],
                    "description": "Контент хедера",
                    "required": false,
                    "type": "ICardHeader",
                    "example": "avatar: {\n src: 'Kate.png',\n status: true,\n},\nhead: 'Header',\nsubhead: 'Subhead',\nmenu: {\n dropDownProps: {\n  position: 'bottom',\n  closeMode: 'click-any',\n },\n items: [\n  {\n   label: 'Вырезать',\n   icon: 'cut',\n   onClick: voidFunction\n  },\n  {\n   label: 'Копировать',\n   icon: 'copy',\n   hasBorder: true\n   onClick: voidFunction\n  },\n ],\n icon: 'menu_dots',\n},",
                    "defaultValue": null
                },
                {
                    "name": "links",
                    "decorators": [],
                    "description": "Коллекция ссылок",
                    "required": false,
                    "type": "ILinkProps[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок карточки",
                    "required": false,
                    "type": "string",
                    "example": "'Main card'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IChartProps": {
            "name": "IChartProps",
            "moduleName": "ui/content/Chart/Chart",
            "title": "Chart",
            "description": "Этот компонент позволяет создавать в проекте графики разных типов, используя библиотеки nivo, react-vis и другие.\n Под капотом для графиков могут использоваться различные библиотеки в зависимости от предпочтений и потребностей проекта.\n Для работы с nivo графиками, необходимо установить в проекте зависимости @nivo/core и соответствующий пакет графика, например @nivo/line.\n Компонент графика, независимо от выбранной библиотеки, нужно передать в пропс chartComponent.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "buttonGroup",
                    "decorators": [],
                    "description": "Кнопки\nМогут служить в качестве настаиваемых контроллов для создания функционала",
                    "required": false,
                    "type": "IButtonGroupProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "chartComponent",
                    "decorators": [],
                    "description": "Компонент графика из библиотеки nivo",
                    "required": true,
                    "type": "any",
                    "example": "ResponsiveLine",
                    "defaultValue": null
                },
                {
                    "name": "chartHeight",
                    "decorators": [],
                    "description": "Фиксированная высота обертки в пикселях",
                    "required": false,
                    "type": "number",
                    "example": "500",
                    "defaultValue": null
                },
                {
                    "name": "checkboxes",
                    "decorators": [],
                    "description": "Чекбоксы\nМогут служить в качестве настаиваемых контроллов для создания функционала",
                    "required": false,
                    "type": "ICheckboxListFieldProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "config",
                    "decorators": [],
                    "description": "Конфигурация, настройки отображения графика",
                    "required": false,
                    "type": "Record",
                    "example": "{\n lineWidth: 3,\n pointSize: 10\n}",
                    "defaultValue": null
                },
                {
                    "name": "data",
                    "decorators": [],
                    "description": "Данные для графика",
                    "required": false,
                    "type": "Record[]",
                    "example": "[\n {id: 1, value: 15},\n {id: 2, value: 30}\n]",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок графика",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "useDefaultLineChartConfig",
                    "decorators": [],
                    "description": "Использовать ли дефолтную конфигурацию для графика типа line",
                    "required": false,
                    "type": "boolean",
                    "example": "ResponsiveLine",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "wrapperHeight",
                    "decorators": [],
                    "description": "Фиксированная высота обертки в пикселях",
                    "required": false,
                    "type": "number",
                    "example": "500",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IChatMessage": {
            "name": "IChatMessage",
            "moduleName": "ui/content/Chat/Chat",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "text",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "timestamp",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | Date",
                    "example": null
                },
                {
                    "name": "user",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IChatUser",
                    "example": null
                }
            ],
            "methods": []
        },
        "IChatProps": {
            "name": "IChatProps",
            "moduleName": "ui/content/Chat/Chat",
            "title": "Chat",
            "description": "\nКомплексный компонент `Chat` предназначен для коммуникации пользователей с помощью текстовых сообщений.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "chatId",
                    "decorators": [],
                    "description": "Идентификатор чата",
                    "required": true,
                    "type": "string",
                    "example": "TaskChat",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "currentUser",
                    "decorators": [],
                    "description": "Данные о текущем пользователе, нужны для отправки сообщений и определения сообщений пользователя",
                    "required": true,
                    "type": "IChatUser",
                    "example": "{\n id: 1,\n firstName: 'Olga',\n lastName: 'Petrova',\n avatar: {\n   src: 'images.com/image.png',\n   status: true,\n },\n}",
                    "defaultValue": null
                },
                {
                    "name": "messages",
                    "decorators": [],
                    "description": "Коллекция сообщений",
                    "required": true,
                    "type": "IChatMessage[]",
                    "example": "[\n {\n  id: 1,\n  text: 'Всем привет!',\n  user: {\n    id: 1,\n    firstName: 'Olga',\n    lastName: 'Petrova',\n    avatar: {\n      src: 'images.com/image.png',\n      status: true,\n    },\n  },\n  timestamp: '2023-10-25T12:38:00',\n },\n]",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onSendMessage",
                    "decorators": [],
                    "description": "Обработчик события отправки сообщения",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "chatId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "message",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IChatMessage",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IChatUser": {
            "name": "IChatUser",
            "moduleName": "ui/content/Chat/Chat",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "avatar",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IAvatarProps",
                    "example": null
                },
                {
                    "name": "firstName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "lastName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IChatViewProps": {
            "name": "IChatViewProps",
            "moduleName": "ui/content/Chat/Chat",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IChatProps",
                "'messages'>"
            ],
            "properties": [
                {
                    "name": "chatId",
                    "decorators": [],
                    "description": "Идентификатор чата",
                    "required": true,
                    "type": "string",
                    "example": "TaskChat"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "currentUser",
                    "decorators": [],
                    "description": "Данные о текущем пользователе, нужны для отправки сообщений и определения сообщений пользователя",
                    "required": true,
                    "type": "IChatUser",
                    "example": "{\n id: 1,\n firstName: 'Olga',\n lastName: 'Petrova',\n avatar: {\n   src: 'images.com/image.png',\n   status: true,\n },\n}"
                },
                {
                    "name": "groupedMessagesByDates",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onSendMessage",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "data",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IGroupedMessage": {
            "name": "IGroupedMessage",
            "moduleName": "ui/content/Chat/hooks/useChat",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IChatMessage"
            ],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isFirstMessage",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isLastMessage",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "text",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "timestamp",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | Date",
                    "example": null
                },
                {
                    "name": "user",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IChatUser",
                    "example": null
                }
            ],
            "methods": []
        },
        "ICopyToClipboardProps": {
            "name": "ICopyToClipboardProps",
            "moduleName": "ui/content/CopyToClipboard/CopyToClipboard",
            "title": "CopyToClipboard",
            "description": "\nКомпонент, позволяющий копировать заданное значение в буфер обмена при клике.\n\nКомпонент `CopyToClipboard` принимает значение `value` для копирования, а также\nможет отображать иконку, дополнительный текст или другие дочерние элементы.\n\nПри успешном копировании значения, можно также отобразить уведомление с помощью\nпараметра `notification`. Можно задать текст уведомления, его уровень и параметры.\n\nКомпонент также поддерживает обработчик `onCopy`, который вызывается при копировании.\n",
            "tags": {},
            "defaultProps": {
                "showCopyIcon": "true"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерний элемент",
                    "required": false,
                    "type": "ReactNode",
                    "example": "<h1>This message will be copied!</h1>",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит состояние компонента в выключенное",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string | ReactElement",
                    "example": "calendar-day",
                    "defaultValue": null
                },
                {
                    "name": "notification",
                    "decorators": [],
                    "description": "Параметры для уведомления, которое появляется после копирования",
                    "required": false,
                    "type": "string | {level: string, message: string, params: IShowNotificationParameters}",
                    "example": "{\n  message: 'Some value has been copied to buffer',\n  level: 'info',\n  params: {\n    position: 'top-left',\n    timeOut: 100,\n  }\n}",
                    "defaultValue": null
                },
                {
                    "name": "onCopy",
                    "decorators": [],
                    "description": "Callback который вызывается при копировании",
                    "required": false,
                    "type": "VoidFunction",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "showCopyIcon",
                    "decorators": [],
                    "description": "Позволяет включить или выключить отображение иконки",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": "true"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение, которое будет использоваться при копировании",
                    "required": true,
                    "type": "string",
                    "example": "'Steroids.js'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "ICopyToClipboardViewProps": {
            "name": "ICopyToClipboardViewProps",
            "moduleName": "ui/content/CopyToClipboard/CopyToClipboard",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ICopyToClipboardProps"
            ],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерний элемент",
                    "required": false,
                    "type": "ReactNode",
                    "example": "<h1>This message will be copied!</h1>"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит состояние компонента в выключенное",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string | ReactElement",
                    "example": "calendar-day"
                },
                {
                    "name": "notification",
                    "decorators": [],
                    "description": "Параметры для уведомления, которое появляется после копирования",
                    "required": false,
                    "type": "string | {level: string, message: string, params: IShowNotificationParameters}",
                    "example": "{\n  message: 'Some value has been copied to buffer',\n  level: 'info',\n  params: {\n    position: 'top-left',\n    timeOut: 100,\n  }\n}"
                },
                {
                    "name": "onCopy",
                    "decorators": [],
                    "description": "Callback который вызывается при копировании",
                    "required": false,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "showCopyIcon",
                    "decorators": [],
                    "description": "Позволяет включить или выключить отображение иконки",
                    "required": false,
                    "type": "boolean",
                    "example": "false"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение, которое будет использоваться при копировании",
                    "required": true,
                    "type": "string",
                    "example": "'Steroids.js'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IDashboardItem": {
            "name": "IDashboardItem",
            "moduleName": "ui/content/Dashboard/Dashboard",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFlexGridItem"
            ],
            "properties": [
                {
                    "name": "col",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент, максимум 12",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Содержимое элемента FlexGrid",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "iconName",
                    "decorators": [],
                    "description": "Иконка, которая отобразится слева от заголовка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "lg",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент на экранах размером lg, максимум 12",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "md",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент на экранах размером md, максимум 12",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "offset",
                    "decorators": [],
                    "description": "Количество колонок для смещения столбца слева",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "order",
                    "decorators": [],
                    "description": "Порядок элемента в FlexGrid",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "sm",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент на экранах размером sm, максимум 12",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок для элемента",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IDashboardItemViewProps": {
            "name": "IDashboardItemViewProps",
            "moduleName": "ui/content/Dashboard/Dashboard",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Pick<IDashboardItem",
                "'title' | 'iconName'>"
            ],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "iconName",
                    "decorators": [],
                    "description": "Иконка, которая отобразится слева от заголовка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок для элемента",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IDashboardProps": {
            "name": "IDashboardProps",
            "moduleName": "ui/content/Dashboard/Dashboard",
            "title": "Dashboard",
            "description": "\nКомпонент в котором можно расположить различные элементы, например графики, таблицы на доске\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent",
                "IFlexGridProps"
            ],
            "properties": [
                {
                    "name": "align",
                    "decorators": [],
                    "description": "Значение для css-свойства align-items",
                    "required": false,
                    "type": "\"center\" | \"end\" | \"start\" | \"stretch\" | \"flex-start\" | \"flex-end\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "direction",
                    "decorators": [],
                    "description": "Значение для css-свойства flex-direction",
                    "required": false,
                    "type": "\"column\" | \"row\" | \"column-reverse\" | \"row-reverse\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "gap",
                    "decorators": [],
                    "description": "Расстояние между элементами в px.\nЕсли передано число, то установится расстояние между строками и между колонками.\nЕсли передан массив, то первый элемент - расстояние между колонками, второй - между строками.",
                    "required": false,
                    "type": "number | number[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элементов FlexGrid",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "Кастомная вьюшка для элемента",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы дашборда",
                    "required": true,
                    "type": "IDashboardItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "justify",
                    "decorators": [],
                    "description": "Значение для css-свойства justify-content",
                    "required": false,
                    "type": "\"right\" | \"left\" | \"center\" | \"end\" | \"start\" | \"stretch\" | \"flex-start\" | \"flex-end\" | \"space-between\" | \"space-around\" | \"space-evenly\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "wrap",
                    "decorators": [],
                    "description": "Автоматический перенос на новую строку",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IDetailItemOutputProps": {
            "name": "IDetailItemOutputProps",
            "moduleName": "ui/content/Detail/Detail",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "column": "3",
                "layout": "DetailLayoutEnum",
                "responsive": "true",
                "size": "'sm'"
            },
            "extends": [
                "IDetailItemProps"
            ],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Значение",
                    "required": true,
                    "type": "ReactNode",
                    "example": "'Cloud Database'",
                    "defaultValue": null
                },
                {
                    "name": "colspan",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "contentClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для ячейки со значением",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Наименование",
                    "required": true,
                    "type": "ReactNode",
                    "example": "'Product'",
                    "defaultValue": null
                },
                {
                    "name": "labelClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для ячейки с наименованием",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "span",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент",
                    "required": false,
                    "type": "number",
                    "example": "3",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IDetailMedia": {
            "name": "IDetailMedia",
            "moduleName": "ui/content/Detail/Detail",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "breakpoint",
                    "decorators": [],
                    "description": "Максимальная ширина таблицы в px",
                    "required": true,
                    "type": "number",
                    "example": "600"
                },
                {
                    "name": "column",
                    "decorators": [],
                    "description": "Количество колонок, которое будет применяться, начиная от указанной ширины и меньше",
                    "required": true,
                    "type": "number",
                    "example": "2"
                }
            ],
            "methods": []
        },
        "IDetailProps": {
            "name": "IDetailProps",
            "moduleName": "ui/content/Detail/Detail",
            "title": "Detail",
            "description": "\nПредставление данных в виде таблицы, в которой поля группируются по принципу \"ключ-значение\".\n\nКомпонент `Detail` принимает данные в виде дочерних компонентов `DetailItem`, которые отображаются\nв виде таблицы с ячейками \"ключ-значение\".\n\nКомпонент поддерживает различные настройки, такие как размер ячеек, вариант расположения\nячеек (\"horizontal\" или \"vertical\"), а также респонсивный режим, позволяющий перестраивать\nтаблицу при изменении размеров окна.\n\nКомпонент также может отображать заголовок таблицы и контролы, расположенные рядом с таблицей.\n",
            "tags": {},
            "defaultProps": {
                "column": "3",
                "layout": "DetailLayoutEnum",
                "responsive": "true",
                "size": "'sm'"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние компоненты",
                    "required": false,
                    "type": "ReactNode | ReactNode[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "column",
                    "decorators": [],
                    "description": "Максимальное количество колонок",
                    "required": false,
                    "type": "number",
                    "example": "3",
                    "defaultValue": "3"
                },
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "Контролы, которые нужно расположить рядом с таблицей",
                    "required": false,
                    "type": "IControlItem[]",
                    "example": "[{\n label: __(('Edit')),\n onClick: () => props.onClick()\n}]",
                    "defaultValue": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Вариант расположения ячеек \"ключ-значение\"",
                    "required": false,
                    "type": "DetailLayoutEnum",
                    "example": "'horizontal'",
                    "defaultValue": "DetailLayoutEnum"
                },
                {
                    "name": "responsive",
                    "decorators": [],
                    "description": "Перестраивать таблицу при ресайзе",
                    "required": false,
                    "type": "boolean | IDetailResponsive",
                    "example": "{\n enable: true,\n media: [\n  {\n   breakpoint: 600,\n   column: 2\n  }\n ]\n}",
                    "defaultValue": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер ячеек в таблице",
                    "required": false,
                    "type": "string",
                    "example": "'sm'",
                    "defaultValue": "'sm'"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок таблицы",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'User info'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IDetailResponsive": {
            "name": "IDetailResponsive",
            "moduleName": "ui/content/Detail/Detail",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Перестраивать таблицу при ресайзе",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "media",
                    "decorators": [],
                    "description": "Брейкпоинты",
                    "required": true,
                    "type": "IDetailMedia[]",
                    "example": null
                }
            ],
            "methods": []
        },
        "IDetailViewProps": {
            "name": "IDetailViewProps",
            "moduleName": "ui/content/Detail/Detail",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDetailProps"
            ],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние компоненты",
                    "required": false,
                    "type": "ReactNode | ReactNode[]",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "column",
                    "decorators": [],
                    "description": "Максимальное количество колонок",
                    "required": false,
                    "type": "number",
                    "example": "3"
                },
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "Контролы, которые нужно расположить рядом с таблицей",
                    "required": false,
                    "type": "IControlItem[]",
                    "example": "[{\n label: __(('Edit')),\n onClick: () => props.onClick()\n}]"
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Вариант расположения ячеек \"ключ-значение\"",
                    "required": false,
                    "type": "DetailLayoutEnum",
                    "example": "'horizontal'"
                },
                {
                    "name": "responsive",
                    "decorators": [],
                    "description": "Перестраивать таблицу при ресайзе",
                    "required": false,
                    "type": "boolean | IDetailResponsive",
                    "example": "{\n enable: true,\n media: [\n  {\n   breakpoint: 600,\n   column: 2\n  }\n ]\n}"
                },
                {
                    "name": "rows",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IDetailItemOutputProps[][]",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер ячеек в таблице",
                    "required": false,
                    "type": "string",
                    "example": "'sm'"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок таблицы",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'User info'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "resizedNodeRef",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "node",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "HTMLDivElement",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDetailItemProps": {
            "name": "IDetailItemProps",
            "moduleName": "ui/content/Detail/DetailItem",
            "title": "DetailItem",
            "description": "Элемент \"ключ-значение\" в таблице Detail",
            "tags": {},
            "defaultProps": {
                "span": "1"
            },
            "extends": [],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Значение",
                    "required": true,
                    "type": "ReactNode",
                    "example": "'Cloud Database'",
                    "defaultValue": null
                },
                {
                    "name": "contentClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для ячейки со значением",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Наименование",
                    "required": true,
                    "type": "ReactNode",
                    "example": "'Product'",
                    "defaultValue": null
                },
                {
                    "name": "labelClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для ячейки с наименованием",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "span",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент",
                    "required": false,
                    "type": "number",
                    "example": "3",
                    "defaultValue": "1"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IDropDownProps": {
            "name": "IDropDownProps",
            "moduleName": "ui/content/DropDown/DropDown",
            "title": "Menu",
            "description": "\nКомпонент, представляющий меню с элементами, которые могут быть выбраны или нажаты.\nКомпонент позволяет отображать и скрывать содержимое меню, а также управлять его позиционированием.\n",
            "tags": {},
            "defaultProps": {
                "autoPositioning": "true",
                "closeMode": "'click-away'",
                "componentDestroyDelay": "300",
                "defaultVisible": "false",
                "gap": "15",
                "hasArrow": "true",
                "position": "'bottom'"
            },
            "extends": [
                "IAbsolutePositioningInputProps"
            ],
            "properties": [
                {
                    "name": "autoPositioning",
                    "decorators": [],
                    "description": "Включает \"умное\" позиционирование - если компонент не может быть помещен в промежуток между целевым компонентом\nи краем viewport, тогда он будет показан в противоположном направлении от заданного в свойстве position.",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "true"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "closeMode",
                    "decorators": [],
                    "description": "В каком случае закрывать DropDown. По-умолчанию - `click-away`",
                    "required": false,
                    "type": "string",
                    "example": "click-any",
                    "defaultValue": "'click-away'"
                },
                {
                    "name": "componentDestroyDelay",
                    "decorators": [],
                    "description": "Задержка перед размонтированием компонента, когда он должен быть скрыт.\nВ этот момент удобно применять различные анимации ухода.",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": "300"
                },
                {
                    "name": "defaultVisible",
                    "decorators": [],
                    "description": "Показывать ли компонент сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "false"
                },
                {
                    "name": "gap",
                    "decorators": [],
                    "description": "Промежуток между компонентом и целевым элементом.\nИспользуется в рассчетах позиционирования.",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": "15"
                },
                {
                    "name": "hasArrow",
                    "decorators": [],
                    "description": "Позволяет управлять отображением указателя",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "true"
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Позиционирование компонента, относительно целевого элемента",
                    "required": true,
                    "type": "string",
                    "example": null,
                    "defaultValue": "'bottom'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизациии отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Отобразить или скрыть компонент.\nВключает \"ручной режим\", при котором можно задать логику отображения компонента извне,\nчерез измененение данного свойства.",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Содержимое DropDown (компонент или jsx-код)",
                    "required": false,
                    "type": "ReactNode",
                    "example": "() => Component",
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Срабатывает в \"ручном режиме\", при клике за пределами компонента и целевого элемента.\nВозвращает значение visible.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onVisibleChange",
                    "decorators": [],
                    "description": "Обработчик изменения свойства isComponentVisible (отображение на странице).\nВозвращает значение isComponentVisible.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "isComponentVisible",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDropDownViewProps": {
            "name": "IDropDownViewProps",
            "moduleName": "ui/content/DropDown/DropDown",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDropDownProps",
                "IAbsolutePositioningOutputProps"
            ],
            "properties": [
                {
                    "name": "arrowPosition",
                    "decorators": [],
                    "description": "Объект стилей для позиционирования стрелки",
                    "required": false,
                    "type": "IComponentArrowPosition",
                    "example": null
                },
                {
                    "name": "autoPositioning",
                    "decorators": [],
                    "description": "Включает \"умное\" позиционирование - если компонент не может быть помещен в промежуток между целевым компонентом\nи краем viewport, тогда он будет показан в противоположном направлении от заданного в свойстве position.",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "closeMode",
                    "decorators": [],
                    "description": "В каком случае закрывать DropDown. По-умолчанию - `click-away`",
                    "required": false,
                    "type": "string",
                    "example": "click-any"
                },
                {
                    "name": "componentDestroyDelay",
                    "decorators": [],
                    "description": "Задержка перед размонтированием компонента, когда он должен быть скрыт.\nВ этот момент удобно применять различные анимации ухода.",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "defaultVisible",
                    "decorators": [],
                    "description": "Показывать ли компонент сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "forwardedRef",
                    "decorators": [],
                    "description": "Ссылка на view",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "gap",
                    "decorators": [],
                    "description": "Промежуток между компонентом и целевым элементом.\nИспользуется в рассчетах позиционирования.",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "hasArrow",
                    "decorators": [],
                    "description": "Позволяет управлять отображением указателя",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isComponentExist",
                    "decorators": [],
                    "description": "Нужно ли рендерить компонент",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isComponentVisible",
                    "decorators": [],
                    "description": "Нужно ли показывать компонент на странице",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Позиционирование компонента, относительно целевого элемента",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект стилей для абсолютного позиционирования",
                    "required": true,
                    "type": "IComponentStylePosition",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизациии отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Отобразить или скрыть компонент.\nВключает \"ручной режим\", при котором можно задать логику отображения компонента извне,\nчерез измененение данного свойства.",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "calculatePosition",
                    "decorators": [],
                    "description": "Рассчет абсолютной позиции",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "dropDownDimensions",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "arrowDimensions",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Содержимое DropDown (компонент или jsx-код)",
                    "required": false,
                    "type": "ReactNode",
                    "example": "() => Component",
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Срабатывает в \"ручном режиме\", при клике за пределами компонента и целевого элемента.\nВозвращает значение visible.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onVisibleChange",
                    "decorators": [],
                    "description": "Обработчик изменения свойства isComponentVisible (отображение на странице).\nВозвращает значение isComponentVisible.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "isComponentVisible",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IIconProps": {
            "name": "IIconProps",
            "moduleName": "ui/content/Icon/Icon",
            "title": "Icon",
            "description": "\nКомпонент, представляющий иконку. Иконки могут быть импортированы при старте приложения.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IUiComponent",
                "'className' | 'style'>",
                "Partial<HTMLElement>"
            ],
            "properties": [
                {
                    "name": "name",
                    "decorators": [],
                    "description": "Имя иконки (латиницей). Импорт иконок происходит на старте приложения.",
                    "required": false,
                    "type": "string",
                    "example": "create",
                    "defaultValue": null
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Функция которая вызывается при клике по иконке",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "tabIndex",
                    "decorators": [],
                    "description": " Должен ли данный элемент участвовать в последовательной навигации",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок, отображаемый при наведении (через нативное поле title)",
                    "required": false,
                    "type": "string",
                    "example": "Добавить запись",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IIconViewProps": {
            "name": "IIconViewProps",
            "moduleName": "ui/content/Icon/Icon",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IIconProps"
            ],
            "properties": [
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": "require('icon.png'), <svg .../>, 'https://<site-name>/icon.png"
                },
                {
                    "name": "name",
                    "decorators": [],
                    "description": "Имя иконки (латиницей). Импорт иконок происходит на старте приложения.",
                    "required": false,
                    "type": "string",
                    "example": "create"
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Функция которая вызывается при клике по иконке",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "tabIndex",
                    "decorators": [],
                    "description": " Должен ли данный элемент участвовать в последовательной навигации",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок, отображаемый при наведении (через нативное поле title)",
                    "required": false,
                    "type": "string",
                    "example": "Добавить запись"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": []
        },
        "ICreateOrEditTaskModalContentViewProps": {
            "name": "ICreateOrEditTaskModalContentViewProps",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IKanbanModalViewProps",
                "'modalType'>"
            ],
            "properties": [
                {
                    "name": "bem",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IBem",
                    "example": null
                }
            ],
            "methods": []
        },
        "IDragEndResult": {
            "name": "IDragEndResult",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "combine",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "null",
                    "example": null
                },
                {
                    "name": "destination",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{droppableId: number, index: number}",
                    "example": null
                },
                {
                    "name": "draggableId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "reason",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "source",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{droppableId: number, index: number}",
                    "example": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IKanbanColumn": {
            "name": "IKanbanColumn",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "tasks",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IKanbanTask[]",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IKanbanColumnViewProps": {
            "name": "IKanbanColumnViewProps",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "column",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IKanbanColumn",
                    "example": null
                },
                {
                    "name": "columnIndex",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "draggableComponent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "droppableComponent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "task",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IKanbanTask",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onOpenCreateTaskModal",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "columnId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderTask",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "task",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IKanbanTask",
                            "example": null
                        },
                        {
                            "name": "columnId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        },
                        {
                            "name": "index",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IKanbanModalViewProps": {
            "name": "IKanbanModalViewProps",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IModalProps"
            ],
            "properties": [
                {
                    "name": "assigners",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IDropDownFieldItem[]",
                    "example": null
                },
                {
                    "name": "buttons",
                    "decorators": [],
                    "description": "Коллекция кнопок, которая отобразится в нижней секции Modal",
                    "required": false,
                    "type": "IButtonProps[]",
                    "example": "[\n {\n  label: __(('Закрыть')),\n  onClick: () => props.onClose()\n }\n]"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Кастомный CSS-класс",
                    "required": false,
                    "type": "string",
                    "example": "'CustomCssClassName'"
                },
                {
                    "name": "closeAfterMs",
                    "decorators": [],
                    "description": "Время в миллисекундах, через которое автоматически произойдет закрытие Modal.",
                    "required": false,
                    "type": "number",
                    "example": "1000"
                },
                {
                    "name": "closeTimeoutMs",
                    "decorators": [],
                    "description": "Время, в течение которого будет происходить анимация закрытия Modal.\nПереопределяет отрезок времени, заданный в ModalPortal",
                    "required": false,
                    "type": "number",
                    "example": "300"
                },
                {
                    "name": "columnId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "columns",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IKanbanColumn[]",
                    "example": null
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "Свойства для внутреннего компонента",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "Группа Modal",
                    "required": false,
                    "type": "string",
                    "example": "'modal'"
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "Порядковый номер Modal",
                    "required": false,
                    "type": "number",
                    "example": "0"
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "Значение свойства отслеживается для показа/закрытия Modal.\nЕсли для компонента ModalPortal установлено значение задержки (animationDelayMc), то после закрытия\nпользователем Modal, оно исчезнет не сразу, а через указанный в animationDelayMc промежуток времени.\nВ течение этого времени флаг isClosing будет равен true.\nЕсли задержка не установлена, Modal закроется сразу же и флаг isClosing всегда будет равен false.",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "modalType",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "default",
                    "example": null
                },
                {
                    "name": "shouldCloseOnEsc",
                    "decorators": [],
                    "description": "Закрытие Modal при нажатии на клавишу 'ESC'",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "shouldCloseOnOverlayClick",
                    "decorators": [],
                    "description": "Закрытие Modal при клике на компонент overlay внутри Modal (темный фон, отделяющий контент страницы от Modal)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер Modal",
                    "required": false,
                    "type": "string",
                    "example": "'middle'"
                },
                {
                    "name": "submitButtonLabel",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "tags",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ITaskTag[]",
                    "example": null
                },
                {
                    "name": "task",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IKanbanTask",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок Modal",
                    "required": false,
                    "type": "string",
                    "example": "'Заявка отправлена на модерацию'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение React-компонента для кастомизации view-отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент, который отрендерится внутри Modal",
                    "required": false,
                    "type": "Element",
                    "example": "() => <InnerModalComponent />",
                    "parameters": [
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Обработчик срабатывает при закрытии Modal",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "data",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "columnId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onToggleModalType",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IKanbanProps": {
            "name": "IKanbanProps",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "Kanban",
            "description": "\nКомпонент `Kanban` позволяет создать доску для управления задачами.\nКоличество столбцов задается с помощью пропа `columns`.\nЗадачи на доске можно создавать, редактировать и перемещать с визуальным отображением.\n\nДля работы этого компонента необходимо установить в проекте зависимости `react-beautiful-dnd`\nи передать в пропсы `droppableComponent`, `draggableComponent` и `dndContext`\nкомпоненты `Droppable`, `Draggable` и `DragDropContext` соответственно.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IKanbanConfig",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "assigners",
                    "decorators": [],
                    "description": "Массив исполнителей, которых можно назначить для выполнения задачи",
                    "required": false,
                    "type": "ITaskAssigner[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "columns",
                    "decorators": [],
                    "description": "Коллекция с наименованиями и свойствами колонок в таблице",
                    "required": true,
                    "type": "IKanbanColumn[]",
                    "example": "[\n {\n  id: 1,\n  title: 'column 1',\n  tasks: [\n   {\n     content: 'item 1',\n     id: 1\n   }\n   ],\n },\n {\n  id: 2,\n  title: 'column 2',\n  tasks: [],\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "dndContext",
                    "decorators": [],
                    "description": "Общий контекст обертка из библиотеки react-beautiful-dnd",
                    "required": true,
                    "type": "any",
                    "example": "DragDropContext",
                    "defaultValue": null
                },
                {
                    "name": "draggableComponent",
                    "decorators": [],
                    "description": "Компонент обертка для регистрации элемента который можно переместить из библиотеки react-beautiful-dnd",
                    "required": true,
                    "type": "any",
                    "example": "Draggable",
                    "defaultValue": null
                },
                {
                    "name": "droppableComponent",
                    "decorators": [],
                    "description": "Компонент обертка для инициализации области куда можно переместить элемент из библиотеки react-beautiful-dnd",
                    "required": true,
                    "type": "any",
                    "example": "Droppable",
                    "defaultValue": null
                },
                {
                    "name": "kanbanId",
                    "decorators": [],
                    "description": "Идентификатор канбан доски",
                    "required": false,
                    "type": "string",
                    "example": "TasksKanban",
                    "defaultValue": null
                },
                {
                    "name": "lastTaskId",
                    "decorators": [],
                    "description": "Идентификатор последней созданной задачи, нужен для определения последовательности id для новых задач",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "tags",
                    "decorators": [],
                    "description": "Массив тегов для задач",
                    "required": false,
                    "type": "ITaskTag[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onCreateTask",
                    "decorators": [],
                    "description": "Обработчик события создания карточки",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "kanbanId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "columnId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        },
                        {
                            "name": "task",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IKanbanTask",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onDragEnd",
                    "decorators": [],
                    "description": "Обработчик события окончания перетаскивания карточки или колонки\nВ result передается объект с информацией о событии",
                    "required": false,
                    "type": "void",
                    "example": "{\n draggableId: 1,\n type: 'task',\n source: {\n  index: 0,\n  droppableId: 2\n },\n reason: 'DROP',\n mode: 'FLUID',\n destination: {\n   droppableId: 2,\n   index: 1\n },\n combine: null\n}",
                    "parameters": [
                        {
                            "name": "result",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IDragEndResult",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onEditTask",
                    "decorators": [],
                    "description": "Обработчик события редактирования карточки",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "kanbanId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "columnId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        },
                        {
                            "name": "task",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IKanbanTask",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IKanbanTask": {
            "name": "IKanbanTask",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "assigner",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ITaskAssigner",
                    "example": null
                },
                {
                    "name": "description",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "fullDescription",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "priority",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ITaskPriority",
                    "example": null
                },
                {
                    "name": "tags",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ITaskTag[]",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IKanbanTaskDetailsModalViewProps": {
            "name": "IKanbanTaskDetailsModalViewProps",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IModalProps"
            ],
            "properties": [
                {
                    "name": "bem",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IBem",
                    "example": null
                },
                {
                    "name": "buttons",
                    "decorators": [],
                    "description": "Коллекция кнопок, которая отобразится в нижней секции Modal",
                    "required": false,
                    "type": "IButtonProps[]",
                    "example": "[\n {\n  label: __(('Закрыть')),\n  onClick: () => props.onClose()\n }\n]"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Кастомный CSS-класс",
                    "required": false,
                    "type": "string",
                    "example": "'CustomCssClassName'"
                },
                {
                    "name": "closeAfterMs",
                    "decorators": [],
                    "description": "Время в миллисекундах, через которое автоматически произойдет закрытие Modal.",
                    "required": false,
                    "type": "number",
                    "example": "1000"
                },
                {
                    "name": "closeTimeoutMs",
                    "decorators": [],
                    "description": "Время, в течение которого будет происходить анимация закрытия Modal.\nПереопределяет отрезок времени, заданный в ModalPortal",
                    "required": false,
                    "type": "number",
                    "example": "300"
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "Свойства для внутреннего компонента",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "Группа Modal",
                    "required": false,
                    "type": "string",
                    "example": "'modal'"
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "Порядковый номер Modal",
                    "required": false,
                    "type": "number",
                    "example": "0"
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "Значение свойства отслеживается для показа/закрытия Modal.\nЕсли для компонента ModalPortal установлено значение задержки (animationDelayMc), то после закрытия\nпользователем Modal, оно исчезнет не сразу, а через указанный в animationDelayMc промежуток времени.\nВ течение этого времени флаг isClosing будет равен true.\nЕсли задержка не установлена, Modal закроется сразу же и флаг isClosing всегда будет равен false.",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "shouldCloseOnEsc",
                    "decorators": [],
                    "description": "Закрытие Modal при нажатии на клавишу 'ESC'",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "shouldCloseOnOverlayClick",
                    "decorators": [],
                    "description": "Закрытие Modal при клике на компонент overlay внутри Modal (темный фон, отделяющий контент страницы от Modal)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер Modal",
                    "required": false,
                    "type": "string",
                    "example": "'middle'"
                },
                {
                    "name": "task",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IKanbanTask",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок Modal",
                    "required": false,
                    "type": "string",
                    "example": "'Заявка отправлена на модерацию'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение React-компонента для кастомизации view-отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент, который отрендерится внутри Modal",
                    "required": false,
                    "type": "Element",
                    "example": "() => <InnerModalComponent />",
                    "parameters": [
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Обработчик срабатывает при закрытии Modal",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IKanbanTaskViewProps": {
            "name": "IKanbanTaskViewProps",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "columnId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "draggableComponent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "task",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IKanbanTask",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onOpenTaskDetailsModal",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "task",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IKanbanTask",
                            "example": null
                        },
                        {
                            "name": "columnId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITaskAssigner": {
            "name": "ITaskAssigner",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "avatar",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{src: string}",
                    "example": null
                },
                {
                    "name": "firstName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "lastName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "ITaskPriority": {
            "name": "ITaskPriority",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "ITaskTag": {
            "name": "ITaskTag",
            "moduleName": "ui/content/Kanban/Kanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "message",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IKanbanConfig": {
            "name": "IKanbanConfig",
            "moduleName": "ui/content/Kanban/hooks/useKanban",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "assigners",
                    "decorators": [],
                    "description": "Массив исполнителей, которых можно назначить для выполнения задачи",
                    "required": false,
                    "type": "ITaskAssigner[]",
                    "example": null
                },
                {
                    "name": "columns",
                    "decorators": [],
                    "description": "Коллекция с наименованиями и свойствами колонок в таблице",
                    "required": true,
                    "type": "IKanbanColumn[]",
                    "example": "[\n {\n  id: 1,\n  title: 'column 1',\n  tasks: [\n   {\n     content: 'item 1',\n     id: 1\n   }\n   ],\n },\n {\n  id: 2,\n  title: 'column 2',\n  tasks: [],\n }\n]"
                },
                {
                    "name": "kanbanId",
                    "decorators": [],
                    "description": "Идентификатор канбан доски",
                    "required": false,
                    "type": "string",
                    "example": "TasksKanban"
                },
                {
                    "name": "lastTaskId",
                    "decorators": [],
                    "description": "Идентификатор последней созданной задачи, нужен для определения последовательности id для новых задач",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "tags",
                    "decorators": [],
                    "description": "Массив тегов для задач",
                    "required": false,
                    "type": "ITaskTag[]",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onCreateTask",
                    "decorators": [],
                    "description": "Обработчик события создания карточки",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "kanbanId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "columnId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        },
                        {
                            "name": "task",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IKanbanTask",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onDragEnd",
                    "decorators": [],
                    "description": "Обработчик события окончания перетаскивания карточки или колонки\nВ result передается объект с информацией о событии",
                    "required": false,
                    "type": "void",
                    "example": "{\n draggableId: 1,\n type: 'task',\n source: {\n  index: 0,\n  droppableId: 2\n },\n reason: 'DROP',\n mode: 'FLUID',\n destination: {\n   droppableId: 2,\n   index: 1\n },\n combine: null\n}",
                    "parameters": [
                        {
                            "name": "result",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IDragEndResult",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onEditTask",
                    "decorators": [],
                    "description": "Обработчик события редактирования карточки",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "kanbanId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "columnId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        },
                        {
                            "name": "task",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IKanbanTask",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IMenuItem": {
            "name": "IMenuItem",
            "moduleName": "ui/content/Menu/Menu",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "hasBorder",
                    "decorators": [],
                    "description": "Нижний border",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Кастомная иконка",
                    "required": false,
                    "type": "string | ReactElement",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Заголовок элемента меню",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Функция вызываемая при клике",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                }
            ],
            "methods": []
        },
        "IMenuProps": {
            "name": "IMenuProps",
            "moduleName": "ui/content/Menu/Menu",
            "title": "Menu",
            "description": "\nКомпонент-меню позволяет создавать выпадающие списки с элементами, которые могут быть выбраны\nили выполнить определенные действия при клике на них.\n\nКомпонент `Menu` обычно используется для создания навигационных меню или контекстных меню,\nгде пользователь может выбирать опции или выполнять определенные действия в зависимости от выбранного элемента.\n\nКомпонент `Menu` принимает массив `items`, каждый элемент которого представляет собой отдельный пункт меню.\nКаждый пункт меню имеет заголовок `label`, функцию `onClick`, которая будет вызываться при клике на элемент,\nкастомную иконку `icon` (необязательно) и флаг `hasBorder`, определяющий наличие нижней границы у элемента.\n\nПримечание: Компонент `Menu` требует указания хотя бы одного элемента меню в свойстве `items`.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dropDownProps",
                    "decorators": [],
                    "description": "Пропсы для DropDown",
                    "required": false,
                    "type": "IDropDownProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Кастомная иконка, по клику на которую открывается меню",
                    "required": false,
                    "type": "string | ReactElement",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "Переопределение view React элемента меню для кастомизации отображения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "  Элементы меню",
                    "required": true,
                    "type": "IMenuItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "ISliderProps": {
            "name": "ISliderProps",
            "moduleName": "ui/content/Slider/Slider",
            "title": "Slider",
            "description": "\nКомпонент слайдера позволяет создавать слайдшоу, где элементы могут быть пролистаны\nс помощью прокрутки или перетаскивания.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent",
                "Omit<SplideProps",
                "'items'>"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "Представление элемента слайдера.",
                    "required": true,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы слайдера.",
                    "required": true,
                    "type": "Record[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "sliderOptions",
                    "decorators": [],
                    "description": "Опции слайдера.",
                    "required": true,
                    "type": "Options",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "ICrudGeneratorProps": {
            "name": "ICrudGeneratorProps",
            "moduleName": "ui/crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ICrudProps"
            ],
            "properties": [
                {
                    "name": "create",
                    "decorators": [],
                    "description": "Параметры для колонки create",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "crudId",
                    "decorators": [],
                    "description": "Id для Crud",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "crudView",
                    "decorators": [],
                    "description": "Представление для Crud",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "Параметры для колонки delete",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "detail",
                    "decorators": [],
                    "description": "Параметры для колонки detail",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "enums",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | string[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "form",
                    "decorators": [],
                    "description": "Параметры формы",
                    "required": false,
                    "type": "ReactNode | IFormProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "grid",
                    "decorators": [],
                    "description": "Параметры Grid",
                    "required": false,
                    "type": "ReactNode | IGridProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "Параметры для колонки index",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": false,
                    "type": "ICrudItem[] | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "Режим работы Crud",
                    "required": false,
                    "type": "\"page\" | \"modal\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель",
                    "required": false,
                    "type": "string",
                    "example": "{}",
                    "defaultValue": null
                },
                {
                    "name": "models",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | string[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "path",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "queryKey",
                    "decorators": [],
                    "description": "Ключ запроса",
                    "required": false,
                    "type": "string",
                    "example": "{}",
                    "defaultValue": null
                },
                {
                    "name": "restApi",
                    "decorators": [],
                    "description": "Методы rest api",
                    "required": false,
                    "type": "IApiRest",
                    "example": "{}",
                    "defaultValue": null
                },
                {
                    "name": "restUrl",
                    "decorators": [],
                    "description": "Ссылка на rest",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "route",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IRouteItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "Модель используемая для поиска",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "update",
                    "decorators": [],
                    "description": "Параметры для колонки update",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Представление",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "errorHandler",
                    "decorators": [],
                    "description": "Функция-обработчик ошибок",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "ошибка",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "dispatch",
                            "decorators": [],
                            "description": "диспатч\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICrudGeneratorRouteProps": {
            "name": "ICrudGeneratorRouteProps",
            "moduleName": "ui/crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IRouteItem"
            ],
            "properties": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент страницы, который отобразится, если путь будет соответствовать location.pathname",
                    "required": false,
                    "type": "any",
                    "example": "CatalogPage",
                    "defaultValue": null
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "Свойства для компонента страницы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "enums",
                    "decorators": [],
                    "description": "Название или список с названиями перечислений, полученных с бэкенда",
                    "required": false,
                    "type": "string | string[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "exact",
                    "decorators": [],
                    "description": "Если true, то путь должен точно соответствовать location.pathname",
                    "required": false,
                    "type": "boolean",
                    "example": "'/catalog'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор роута",
                    "required": false,
                    "type": "string",
                    "example": "'catalog'",
                    "defaultValue": null
                },
                {
                    "name": "isNavVisible",
                    "decorators": [],
                    "description": "Отображать ссылку или кнопку в навигации для перехода на данный роут",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": null
                },
                {
                    "name": "isVisible",
                    "decorators": [],
                    "description": "Отображать или показывать роут",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Вложенные роуты",
                    "required": false,
                    "type": "IRouteItem[] | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст, который отобразится на кнопке навигации для данного роута",
                    "required": false,
                    "type": "string",
                    "example": "'Каталог'",
                    "defaultValue": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Тип шаблона для данного роута",
                    "required": false,
                    "type": "string",
                    "example": "'dark'",
                    "defaultValue": null
                },
                {
                    "name": "models",
                    "decorators": [],
                    "description": "Название или список с названиями моделей, полученных с бэкенда",
                    "required": false,
                    "type": "string | string[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "path",
                    "decorators": [],
                    "description": "Путь до роута",
                    "required": false,
                    "type": "string",
                    "example": "'/catalog'",
                    "defaultValue": null
                },
                {
                    "name": "queryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "redirectTo",
                    "decorators": [],
                    "description": "В свойстве можно передать как путь, на который осуществится редирект, так и булево значение.\nЕсли свойство равно true - то редирект произойдет на первый из вложенных роутов.",
                    "required": false,
                    "type": "string | boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "role",
                    "decorators": [],
                    "description": "Назначение страницы, указывается, чтобы приложение автоматически могло найти страницу авторизации или 404-ю..",
                    "required": false,
                    "type": "string",
                    "example": "'login'",
                    "defaultValue": null
                },
                {
                    "name": "roles",
                    "decorators": [],
                    "description": "Список с ролями, который показывает, кому из пользователей будет доступен просмотр страницы",
                    "required": false,
                    "type": "string[]",
                    "example": "['user', 'admin']",
                    "defaultValue": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок страницы",
                    "required": false,
                    "type": "string",
                    "example": "'Каталог'",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "preloadData",
                    "decorators": [],
                    "description": "Обработчик, который принимает параметры URL и возвращает массив с пропсами для хука useFetch и компонента\nList.\nФункция запускается перед рендерингом приложения в режиме SSR и используется для предварительной\nзагрузки данных, необходимых на текущей странице.\nХук useFetch и компонент List не будут повторно инициализироваться и делать запросы на клиенте,\nесли подгруженные данные существуют.",
                    "required": false,
                    "type": "IFetchConfig | IListProps[]",
                    "example": null,
                    "parameters": [
                        {
                            "name": "match",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IApiRest": {
            "name": "IApiRest",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "create",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "update",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": []
        },
        "ICrudChildrenProps": {
            "name": "ICrudChildrenProps",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "mode": "string",
                "primaryKey": "string",
                "queryKey": "string"
            },
            "extends": [
                "ICrudProps"
            ],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "controlsGetter",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "create",
                    "decorators": [],
                    "description": "Параметры для колонки create",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "crudId",
                    "decorators": [],
                    "description": "Id для Crud",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "crudView",
                    "decorators": [],
                    "description": "Представление для Crud",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "Параметры для колонки delete",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "detail",
                    "decorators": [],
                    "description": "Параметры для колонки detail",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "form",
                    "decorators": [],
                    "description": "Параметры формы",
                    "required": false,
                    "type": "IFormProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "grid",
                    "decorators": [],
                    "description": "Параметры Grid",
                    "required": false,
                    "type": "IGridProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "Параметры для колонки index",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": false,
                    "type": "ICrudItem[] | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "Режим работы Crud",
                    "required": false,
                    "type": "\"page\" | \"modal\"",
                    "example": null,
                    "defaultValue": "string"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель",
                    "required": false,
                    "type": "string",
                    "example": "{}",
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "string"
                },
                {
                    "name": "queryKey",
                    "decorators": [],
                    "description": "Ключ запроса",
                    "required": false,
                    "type": "string",
                    "example": "{}",
                    "defaultValue": "string"
                },
                {
                    "name": "recordId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "restApi",
                    "decorators": [],
                    "description": "Методы rest api",
                    "required": false,
                    "type": "IApiRest",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "restUrl",
                    "decorators": [],
                    "description": "Ссылка на rest",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "routeId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "Модель используемая для поиска",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "update",
                    "decorators": [],
                    "description": "Параметры для колонки update",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Представление",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "errorHandler",
                    "decorators": [],
                    "description": "Функция-обработчик ошибок",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "ошибка",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "dispatch",
                            "decorators": [],
                            "description": "диспатч\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onComplete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "ICrudClickProps": {
            "name": "ICrudClickProps",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "mode": "string",
                "primaryKey": "string",
                "queryKey": "string"
            },
            "extends": [],
            "properties": [
                {
                    "name": "components",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IComponents",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "crudId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"page\" | \"modal\"",
                    "example": null,
                    "defaultValue": "string"
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "string"
                },
                {
                    "name": "queryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "string"
                },
                {
                    "name": "record",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "recordId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "restApi",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IApiRest",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "restUrl",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "routeAction",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "routeId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "routeParams",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "errorHandler",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "dispatch",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "goToAction",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextAction",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICrudItem": {
            "name": "ICrudItem",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IControlItem",
                "'visible' | 'confirm' | 'onClick'>"
            ],
            "properties": [
                {
                    "name": "actionName",
                    "decorators": [],
                    "description": "Название для action",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "Свойства компонента",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "Сообщение о подтверждении",
                    "required": false,
                    "type": "string | {}",
                    "example": null
                },
                {
                    "name": "controlsExclude",
                    "decorators": [],
                    "description": "Коллекция исключенных Controls",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "controlsInclude",
                    "decorators": [],
                    "description": "Коллекция Controls",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "Режим отображения",
                    "required": false,
                    "type": "\"page\" | \"modal\"",
                    "example": "'modal'"
                },
                {
                    "name": "pkRequired",
                    "decorators": [],
                    "description": "Обязателен ли Personal Key",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок",
                    "required": false,
                    "type": "string",
                    "example": "'Title'"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Управление отображением",
                    "required": false,
                    "type": "boolean | {}",
                    "example": "true"
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Функция обратного вызова, срабатывает после нажатия",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Event | MouseEvent",
                            "example": null
                        },
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ICrudClickProps",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICrudProps": {
            "name": "ICrudProps",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "Crud",
            "description": "\nКомпонент CRUD (Create, Read, Update, Delete) предоставляет интерфейс для выполнения операций создания,\nчтения, обновления и удаления записей. Он позволяет создавать, просматривать, редактировать и удалять\nзаписи из некоторой модели данных.\n",
            "tags": {},
            "defaultProps": {
                "mode": "string",
                "primaryKey": "string",
                "queryKey": "string"
            },
            "extends": [],
            "properties": [
                {
                    "name": "create",
                    "decorators": [],
                    "description": "Параметры для колонки create",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "crudId",
                    "decorators": [],
                    "description": "Id для Crud",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "crudView",
                    "decorators": [],
                    "description": "Представление для Crud",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "Параметры для колонки delete",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "detail",
                    "decorators": [],
                    "description": "Параметры для колонки detail",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "form",
                    "decorators": [],
                    "description": "Параметры формы",
                    "required": false,
                    "type": "ReactNode | IFormProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "grid",
                    "decorators": [],
                    "description": "Параметры Grid",
                    "required": false,
                    "type": "ReactNode | IGridProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "Параметры для колонки index",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": false,
                    "type": "ICrudItem[] | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "mode",
                    "decorators": [],
                    "description": "Режим работы Crud",
                    "required": false,
                    "type": "\"page\" | \"modal\"",
                    "example": null,
                    "defaultValue": "string"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель",
                    "required": false,
                    "type": "string",
                    "example": "{}",
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "string"
                },
                {
                    "name": "queryKey",
                    "decorators": [],
                    "description": "Ключ запроса",
                    "required": false,
                    "type": "string",
                    "example": "{}",
                    "defaultValue": "string"
                },
                {
                    "name": "restApi",
                    "decorators": [],
                    "description": "Методы rest api",
                    "required": false,
                    "type": "IApiRest",
                    "example": "{}",
                    "defaultValue": null
                },
                {
                    "name": "restUrl",
                    "decorators": [],
                    "description": "Ссылка на rest",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "Модель используемая для поиска",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "update",
                    "decorators": [],
                    "description": "Параметры для колонки update",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Представление",
                    "required": false,
                    "type": "boolean | ICrudItem",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "errorHandler",
                    "decorators": [],
                    "description": "Функция-обработчик ошибок",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "ошибка",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "dispatch",
                            "decorators": [],
                            "description": "диспатч\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICrudViewProps": {
            "name": "ICrudViewProps",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IControlItem[]",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "ICrudContentProps": {
            "name": "ICrudContentProps",
            "moduleName": "ui/crud/Crud/CrudContent",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "crudId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "form",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFormProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "grid",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IGridProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ICrudItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemsToControls",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "queryKey",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "record",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "recordId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "restApi",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IApiRest",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "restUrl",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "goToAction",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "nextAction",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IAutoCompleteFieldProps": {
            "name": "IAutoCompleteFieldProps",
            "moduleName": "ui/form/AutoCompleteField/AutoCompleteField",
            "title": "AutoCompleteField",
            "description": "\nПоле ввода текста с подсказками (auto-complete). Он позволяет пользователю вводить текст и предлагает\nварианты автозаполнения на основе предоставленных данных.\n\nКомпонент `AutoCompleteField` принимает следующие свойства:\n\n- `searchOnFocus`: при фокусировке на поле ввода будет запускаться поиск (тип: boolean)\n- все остальные свойства являются наследниками интерфейсов `IBaseFieldProps`, `IDataProviderConfig` и `IDataSelectConfig`\n\nПримечание: Компонент `AutoCompleteField` требует указания списка элементов (`items`) и предоставления\nконфигурации для провайдера данных (`dataProvider`) и выборки данных (`autoComplete` и `autoFetch`).\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IBaseFieldProps",
                "IDataProviderConfig",
                "Omit<IDataSelectConfig",
                "'items'>"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "Настройки поиска",
                    "required": false,
                    "type": "boolean | IAutoCompleteConfig",
                    "example": "{\n enable: true,\n minLength: 2,\n delay: 100\n}",
                    "defaultValue": null
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.",
                    "required": false,
                    "type": "IDataProvider",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "groupAttribute",
                    "decorators": [],
                    "description": "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится",
                    "required": false,
                    "type": "string",
                    "example": "items",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialSelectedIds",
                    "decorators": [],
                    "description": "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`",
                    "required": false,
                    "type": "number[]",
                    "example": "[1, 22]",
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "InputHTMLAttributes",
                    "example": "{ onKeyDown: ... }",
                    "defaultValue": null
                },
                {
                    "name": "inputValue",
                    "decorators": [],
                    "description": "Значение поля в форме",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": false,
                    "type": "string | {} | string | number | {id: string | number | boolean, label: string | any}[]",
                    "example": "[\n {\n  id: 1,\n  label: 'Krasnoyarsk'\n },\n {\n  id: 2,\n  label: 'Moscow'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Возможность множественного выбора",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": false,
                    "type": "string",
                    "example": "id",
                    "defaultValue": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Текст запроса",
                    "required": false,
                    "type": "string",
                    "example": "'some text'",
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "searchOnFocus",
                    "decorators": [],
                    "description": "При фокусировке на поле ввода будет запускаться поиск",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectFirst",
                    "decorators": [],
                    "description": "Сделать активным первый элемент в списке",
                    "required": false,
                    "type": "any",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "Список с идентификаторами выбранных элементов",
                    "required": false,
                    "type": "any",
                    "example": "[1, 4]",
                    "defaultValue": null
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": " Список со всеми элементами",
                    "required": false,
                    "type": "IDataSelectItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IAutoCompleteFieldViewProps": {
            "name": "IAutoCompleteFieldViewProps",
            "moduleName": "ui/form/AutoCompleteField/AutoCompleteField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IAutoCompleteFieldProps",
                "'items'>"
            ],
            "properties": [
                {
                    "name": "categories",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "forwardedRef",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "hoveredId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{className: string, disabled: boolean, name: string, placeholder: string, type: string, value: string | number, onBlur: null, onChange: null, onFocus: null}",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IAutoCompleteItem[]",
                    "example": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onItemHover",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onItemSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IAutoCompleteItem": {
            "name": "IAutoCompleteItem",
            "moduleName": "ui/form/AutoCompleteField/AutoCompleteField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "additional",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{icon: string, text: string}",
                    "example": null
                },
                {
                    "name": "category",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | number | boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IBlankFieldProps": {
            "name": "IBlankFieldProps",
            "moduleName": "ui/form/BlankField/BlankField",
            "title": "BlankField",
            "description": "\nПустое поле. Он отображает переданный текст или дочерние элементы.\n\nКомпонент `BlankField` принимает следующие свойства:\n\n- `text`: текст для отображения (тип: string | React.ReactNode)\n- `children`: дочерние элементы (тип: React.ReactNode)\n- все остальные свойства являются наследниками интерфейсов `IFieldWrapperInputProps` и `IUiComponent`\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "text",
                    "decorators": [],
                    "description": "Текст для отображения",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Hello World!'",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IButtonBadge": {
            "name": "IButtonBadge",
            "moduleName": "ui/form/Button/Button",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": "bem.element('additional-class')"
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет",
                    "required": false,
                    "type": "string",
                    "example": "'secondary'"
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Включить/выключить badge",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение badge",
                    "required": false,
                    "type": "number",
                    "example": "'Badge'"
                }
            ],
            "methods": []
        },
        "IButtonProps": {
            "name": "IButtonProps",
            "moduleName": "ui/form/Button/Button",
            "title": "Button",
            "description": "Кнопка или ссылка. Используется в интерфейсе для выполнения какого-либо действия по клику (onClick),\nсмена страницы в рамках роутинга (goToRoute), переход по внешней ссылке (url) или отправки формы (submit form)",
            "tags": {},
            "defaultProps": {
                "badge": {
                    "color": "'secondary'",
                    "enable": "false",
                    "value": "0"
                },
                "block": "false",
                "className": "''",
                "color": "'primary'",
                "disabled": "false",
                "outline": "false",
                "resetFailedMs": "2000",
                "size": "'md'",
                "submitting": "false",
                "type": "'button'"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null,
                    "defaultValue": {
                        "color": "'secondary'",
                        "enable": "false",
                        "value": "0"
                    }
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "false"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "''"
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success",
                    "defaultValue": "'primary'"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?",
                    "defaultValue": null
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "false"
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "any",
                    "example": "Save",
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": "Save",
                    "defaultValue": null
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "false"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000",
                    "defaultValue": "2000"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "'md'"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "Выбор html-тэга, который будет вставлен в DOM",
                    "required": false,
                    "type": "\"a\" | \"button\"",
                    "example": "button",
                    "defaultValue": null
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank",
                    "defaultValue": null
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "Цвет текста кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile",
                    "defaultValue": null
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "Record",
                    "example": "{userId: 52}",
                    "defaultValue": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit",
                    "defaultValue": "'button'"
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу, используется совместно с свойством `link`",
                    "required": false,
                    "type": "string",
                    "example": "https://kozhindev.com",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Обработчик события нажатия. Для асинхронных событий вовзращяйте в обработчике `Promise`, тогда кнопка\nавтоматически будет переключаться в режим загрузки (`loading`) на время выполнения `Promise`.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "=> fetch(...)\n",
                            "required": true,
                            "type": "Event | MouseEvent",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IButtonViewProps": {
            "name": "IButtonViewProps",
            "moduleName": "ui/form/Button/Button",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "IButtonBadge",
                    "example": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?"
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "submitting",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "Выбор html-тэга, который будет вставлен в DOM",
                    "required": false,
                    "type": "\"a\" | \"button\"",
                    "example": "button"
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank"
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "Цвет текста кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile"
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "Record",
                    "example": "{userId: 52}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit"
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу, используется совместно с свойством `link`",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": []
        },
        "ICheckboxFieldProps": {
            "name": "ICheckboxFieldProps",
            "moduleName": "ui/form/CheckboxField/CheckboxField",
            "title": "CheckboxField",
            "description": "\nОдиночный чекбокс. Используется в формах для отметки булевого значения.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "checked",
                    "decorators": [],
                    "description": "Флаг определяющий включен ли элемент",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Пользовательский цвет для чекбокса",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "any",
                    "example": "{onKeyDown: ...}",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICheckboxFieldViewProps": {
            "name": "ICheckboxFieldViewProps",
            "moduleName": "ui/form/CheckboxField/CheckboxField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ICheckboxFieldProps",
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "checked",
                    "decorators": [],
                    "description": "Флаг определяющий включен ли элемент",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Пользовательский цвет для чекбокса",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": true,
                    "type": "{checked: boolean, disabled: boolean, name: string, required: boolean, type: string, onChange: null}",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICheckboxListFieldProps": {
            "name": "ICheckboxListFieldProps",
            "moduleName": "ui/form/CheckboxListField/CheckboxListField",
            "title": "CheckboxListField",
            "description": "\nСписок с чекбоксами. Используется в формах для выбора нескольких значений.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "Omit<IDataProviderConfig",
                "'items'>",
                "Omit<IDataSelectConfig",
                "'items'>",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "Настройки поиска",
                    "required": false,
                    "type": "boolean | IAutoCompleteConfig",
                    "example": "{\n enable: true,\n minLength: 2,\n delay: 100\n}",
                    "defaultValue": null
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.",
                    "required": false,
                    "type": "IDataProvider",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "groupAttribute",
                    "decorators": [],
                    "description": "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится",
                    "required": false,
                    "type": "string",
                    "example": "items",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialSelectedIds",
                    "decorators": [],
                    "description": "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`",
                    "required": false,
                    "type": "number[]",
                    "example": "[1, 22]",
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "any",
                    "example": "{ onKeyDown: ... }",
                    "defaultValue": null
                },
                {
                    "name": "inputValue",
                    "decorators": [],
                    "description": "Значение поля в форме",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "Кастомная вьюшка для элемента",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": true,
                    "type": "CheckboxFieldListItems",
                    "example": "[\n {\n     id: 1,\n     label: 'Krasnoyarsk',\n     color: 'red'\n },\n {\n     id: 2,\n     label: 'Moscow',\n     color: 'purple'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Возможность множественного выбора",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "orientation",
                    "decorators": [],
                    "description": "Ориентация списка",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": false,
                    "type": "string",
                    "example": "id",
                    "defaultValue": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Текст запроса",
                    "required": false,
                    "type": "string",
                    "example": "'some text'",
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectFirst",
                    "decorators": [],
                    "description": "Сделать активным первый элемент в списке",
                    "required": false,
                    "type": "any",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "Список с идентификаторами выбранных элементов",
                    "required": false,
                    "type": "any",
                    "example": "[1, 4]",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": " Список со всеми элементами",
                    "required": false,
                    "type": "IDataSelectItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICheckboxListFieldViewProps": {
            "name": "ICheckboxListFieldViewProps",
            "moduleName": "ui/form/CheckboxListField/CheckboxListField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Коллекция ошибок",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, name: string, type: string, onChange: null}",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{color: string, id: string | number | boolean, isHovered: boolean, isSelected: boolean, label: string}[]",
                    "example": null
                },
                {
                    "name": "orientation",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onItemSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderCheckbox",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "checkboxProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ICheckboxFieldViewProps",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICheckboxTreeFieldProps": {
            "name": "ICheckboxTreeFieldProps",
            "moduleName": "ui/form/CheckboxTreeField/CheckboxTreeField",
            "title": "CheckboxTreeField",
            "description": "\nСписок с вложенными чекбоксами. Используется в формах для создания иерархической структуры и выбора нескольких значений.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "Omit<IDataProviderConfig",
                "'items'>",
                "Omit<IDataSelectConfig",
                "'items'>",
                "IUiComponent",
                "Pick<ITreeProps",
                "'levelPadding' | 'alwaysOpened'>"
            ],
            "properties": [
                {
                    "name": "alwaysOpened",
                    "decorators": [],
                    "description": " Используется для управления раскрытием всех элементов в дереве",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "Настройки поиска",
                    "required": false,
                    "type": "boolean | IAutoCompleteConfig",
                    "example": "{\n enable: true,\n minLength: 2,\n delay: 100\n}",
                    "defaultValue": null
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.",
                    "required": false,
                    "type": "IDataProvider",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "groupAttribute",
                    "decorators": [],
                    "description": "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится",
                    "required": false,
                    "type": "string",
                    "example": "items",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialSelectedIds",
                    "decorators": [],
                    "description": "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`",
                    "required": false,
                    "type": "number[]",
                    "example": "[1, 22]",
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "any",
                    "example": "{ onKeyDown: ... }",
                    "defaultValue": null
                },
                {
                    "name": "inputValue",
                    "decorators": [],
                    "description": "Значение поля в форме",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": true,
                    "type": "CheckboxTreeItems",
                    "example": "[\n {\n     id: 1,\n     label: 'Krasnoyarsk',\n     color: 'red'\n },\n {\n     id: 2,\n     label: 'Moscow',\n     color: 'purple'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "levelPadding",
                    "decorators": [],
                    "description": "Расстояние вложенных элементов от родителя для каждого уровня",
                    "required": false,
                    "type": "number",
                    "example": "32",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Возможность множественного выбора",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для доступа к вложенным элементам",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Текст запроса",
                    "required": false,
                    "type": "string",
                    "example": "'some text'",
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectFirst",
                    "decorators": [],
                    "description": "Сделать активным первый элемент в списке",
                    "required": false,
                    "type": "any",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "Список с идентификаторами выбранных элементов",
                    "required": false,
                    "type": "any",
                    "example": "[1, 4]",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": " Список со всеми элементами",
                    "required": false,
                    "type": "IDataSelectItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICheckboxTreeFieldViewProps": {
            "name": "ICheckboxTreeFieldViewProps",
            "moduleName": "ui/form/CheckboxTreeField/CheckboxTreeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Коллекция ошибок",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{color: string, disabled: boolean, id: string | number | boolean, isHovered: boolean, label: string, required: boolean} & IPreparedTreeItem[]",
                    "example": null
                },
                {
                    "name": "levelPadding",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onItemSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "checkbox",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IPreparedTreeItem",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderCheckbox",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "checkboxProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "ICheckboxFieldViewProps",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDateFieldProps": {
            "name": "IDateFieldProps",
            "moduleName": "ui/form/DateField/DateField",
            "title": "DateField",
            "description": "\nПоле ввода с выпадающим календарём для выбора даты.\n\nКомпонент `DateField` предоставляет возможность создания поля ввода с календарём для выбора даты.\nОн предоставляет пользователю удобный интерфейс для выбора даты с помощью календаря,\nа также поддерживает настройку формата отображения даты и другие параметры.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateInput",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "calendarProps",
                    "decorators": [],
                    "description": "Свойства для компонента Calendar",
                    "required": false,
                    "type": "ICalendarProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dateInUTC",
                    "decorators": [],
                    "description": "Задано ли значение даты в часовом поясе UTC\n(пример: с бэкенда приходит дата в UTC, но нужно отбразить ее в локальном времени.\nВ этом случае dateInUTC = true, а useUTC = false)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "displayFormat",
                    "decorators": [],
                    "description": "Формат даты показываемый пользователю",
                    "required": false,
                    "type": "string",
                    "example": "DD.MM.YYYY",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка, отображаемая в правой части поля",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Свойства поля props.input",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства, передаваемые для поля во view",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "maskOptions",
                    "decorators": [],
                    "description": "Опции маски для поля ввода",
                    "required": false,
                    "type": "MaskitoOptions",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "useUTC",
                    "decorators": [],
                    "description": "Приводить значение даты к часовому поясу UTC\n(пример: с бэкенда приходит дата в какой-либо временной зоне (не UTC), но нужно отбразить ее\nв часовом поясе UTC. В этом случае dateInUTC = false, а useUTC = true)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для view компонента",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Дополнительная функция, срабатывающая при изменении props.input",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDateFieldViewProps": {
            "name": "IDateFieldViewProps",
            "moduleName": "ui/form/DateField/DateField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateOutput",
                "Pick<IDateFieldProps",
                "'size' | 'icon' | 'errors' | 'showRemove' | 'className' | 'calendarProps'>"
            ],
            "properties": [
                {
                    "name": "calendarProps",
                    "decorators": [],
                    "description": "Свойства для компонента Calendar",
                    "required": false,
                    "type": "ICalendarProps",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка, отображаемая в правой части поля",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day"
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для поля во view",
                    "required": true,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "Показать или скрыть выпадающую панель",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "maskInputRef",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "Функция очищает значение поля",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция закрывает выпадающую панель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onNow",
                    "decorators": [],
                    "description": "Функция возвращает текущее значение времени (дата + время)",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IDateInputStateInput": {
            "name": "IDateInputStateInput",
            "moduleName": "ui/form/DateField/useDateInputState",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "dateInUTC",
                    "decorators": [],
                    "description": "Задано ли значение даты в часовом поясе UTC\n(пример: с бэкенда приходит дата в UTC, но нужно отбразить ее в локальном времени.\nВ этом случае dateInUTC = true, а useUTC = false)",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "displayFormat",
                    "decorators": [],
                    "description": "Формат даты показываемый пользователю",
                    "required": false,
                    "type": "string",
                    "example": "DD.MM.YYYY"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка, отображаемая в правой части поля",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Свойства поля props.input",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства, передаваемые для поля во view",
                    "required": false,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "useUTC",
                    "decorators": [],
                    "description": "Приводить значение даты к часовому поясу UTC\n(пример: с бэкенда приходит дата в какой-либо временной зоне (не UTC), но нужно отбразить ее\nв часовом поясе UTC. В этом случае dateInUTC = false, а useUTC = true)",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Дополнительная функция, срабатывающая при изменении props.input",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDateInputStateOutput": {
            "name": "IDateInputStateOutput",
            "moduleName": "ui/form/DateField/useDateInputState",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для поля во view",
                    "required": true,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "Показать или скрыть выпадающую панель",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "Функция очищает значение поля",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция закрывает выпадающую панель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onNow",
                    "decorators": [],
                    "description": "Функция возвращает текущее значение времени (дата + время)",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IDateRangeFieldProps": {
            "name": "IDateRangeFieldProps",
            "moduleName": "ui/form/DateRangeField/DateRangeField",
            "title": "DateRangeField",
            "description": "\nПоле ввода дипазона двух дат с выпадающим календарём.\n\nКомпонент `DateRangeField` предоставляет возможность создания поля ввода диапазона двух дат с выпадающим календарём.\n Он позволяет пользователю выбрать начальную и конечную даты с помощью календаря и предоставляет удобный интерфейс для работы с диапазоном дат.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateInput",
                "Omit<IFieldWrapperInputProps",
                "'attribute'>",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "attributeFrom",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'fromTime'",
                    "defaultValue": null
                },
                {
                    "name": "attributeTo",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'toTime'",
                    "defaultValue": null
                },
                {
                    "name": "calendarProps",
                    "decorators": [],
                    "description": "Свойства для компонента Calendar",
                    "required": false,
                    "type": "ICalendarProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dateInUTC",
                    "decorators": [],
                    "description": "Задано ли значение даты в часовом поясе UTC\n(пример: с бэкенда приходит дата в UTC, но нужно отбразить ее в локальном времени.\nВ этом случае dateInUTC = true, а useUTC = false)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "displayFormat",
                    "decorators": [],
                    "description": "Формат даты показываемый пользователю",
                    "required": false,
                    "type": "string",
                    "example": "DD.MM.YYYY",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hasInitialFocus",
                    "decorators": [],
                    "description": "Устанавливать ли фокус и показывать календарь сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Свойства поля props.input",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства, передаваемые для поля во view",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputPropsFrom",
                    "decorators": [],
                    "description": "Свойства для input элемента from",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputPropsTo",
                    "decorators": [],
                    "description": "Свойства для input элемента to",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "pickerProps",
                    "decorators": [],
                    "description": "Свойства для компонента DayPickerInput",
                    "required": false,
                    "type": "any",
                    "example": "{\n dayPickerProps: {\n  showWeekNumbers: true\n }\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "any",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Отображение кнопки для сброса значения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "useUTC",
                    "decorators": [],
                    "description": "Приводить значение даты к часовому поясу UTC\n(пример: с бэкенда приходит дата в какой-либо временной зоне (не UTC), но нужно отбразить ее\nв часовом поясе UTC. В этом случае dateInUTC = false, а useUTC = true)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Дополнительная функция, срабатывающая при изменении props.input",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDateRangeFieldViewProps": {
            "name": "IDateRangeFieldViewProps",
            "moduleName": "ui/form/DateRangeField/DateRangeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateOutput",
                "Omit<IFieldWrapperOutputProps",
                "'input'>",
                "Pick<IDateRangeFieldProps",
                "'size' | 'icon' | 'errors' | 'showRemove' | 'calendarProps' | 'className' | 'disabled'\n        | 'noBorder' | 'style'>"
            ],
            "properties": [
                {
                    "name": "calendarProps",
                    "decorators": [],
                    "description": "Свойства для компонента Calendar",
                    "required": false,
                    "type": "ICalendarProps",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Коллекция ошибок",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "errorsFrom",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "errorsTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day"
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для поля во view",
                    "required": true,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "inputPropsFrom",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "inputPropsTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "Показать или скрыть выпадающую панель",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Отображение кнопки для сброса значения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                }
            ],
            "methods": [
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "Функция очищает значение поля",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция закрывает выпадающую панель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onNow",
                    "decorators": [],
                    "description": "Функция возвращает текущее значение времени (дата + время)",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IDateTimeFieldProps": {
            "name": "IDateTimeFieldProps",
            "moduleName": "ui/form/DateTimeField/DateTimeField",
            "title": "DateTimeField",
            "description": "\nПоля ввода с выпадающими списками для выбора даты и времени.\n\nКомпонент `DateTimeField` предоставляет возможность создания полей ввода для выбора даты и времени с помощью выпадающих списков.\n Он объединяет функциональность компонента `DateField` для выбора даты и компонента `TimePanel` для выбора времени.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateInput",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "calendarProps",
                    "decorators": [],
                    "description": "Свойства для компонента Calendar",
                    "required": false,
                    "type": "ICalendarProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dateInUTC",
                    "decorators": [],
                    "description": "Задано ли значение даты в часовом поясе UTC\n(пример: с бэкенда приходит дата в UTC, но нужно отбразить ее в локальном времени.\nВ этом случае dateInUTC = true, а useUTC = false)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "displayFormat",
                    "decorators": [],
                    "description": "Формат даты показываемый пользователю",
                    "required": false,
                    "type": "string",
                    "example": "DD.MM.YYYY",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка, отображаемая в правой части поля",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Свойства поля props.input",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства, передаваемые для поля во view",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "timePanelViewProps",
                    "decorators": [],
                    "description": "Свойства для компонента панели времени",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "useUTC",
                    "decorators": [],
                    "description": "Приводить значение даты к часовому поясу UTC\n(пример: с бэкенда приходит дата в какой-либо временной зоне (не UTC), но нужно отбразить ее\nв часовом поясе UTC. В этом случае dateInUTC = false, а useUTC = true)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Дополнительная функция, срабатывающая при изменении props.input",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDateTimeFieldViewProps": {
            "name": "IDateTimeFieldViewProps",
            "moduleName": "ui/form/DateTimeField/DateTimeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateOutput",
                "Pick<IDateTimeFieldProps",
                "'size' | 'errors' | 'showRemove' | 'calendarProps' | 'className' | 'timePanelViewProps'>"
            ],
            "properties": [
                {
                    "name": "calendarProps",
                    "decorators": [],
                    "description": "Свойства для компонента Calendar",
                    "required": false,
                    "type": "ICalendarProps",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для поля во view",
                    "required": true,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "Показать или скрыть выпадающую панель",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "timePanelViewProps",
                    "decorators": [],
                    "description": "Свойства для компонента панели времени",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "Функция очищает значение поля",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция закрывает выпадающую панель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onNow",
                    "decorators": [],
                    "description": "Функция возвращает текущее значение времени (дата + время)",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IDateTimeRangeFieldProps": {
            "name": "IDateTimeRangeFieldProps",
            "moduleName": "ui/form/DateTimeRangeField/DateTimeRangeField",
            "title": "DateTimeRangeField",
            "description": "\nПоле ввода дипазона двух дат со временем, с выпадающим календарём.\n\nКомпонент `DateTimeRangeField` предоставляет возможность создания поля ввода для выбора диапазона двух дат с временем\nс помощью выпадающих списков и календаря.\nОн объединяет функциональность компонента `DateRangeField` для выбора диапазона дат и компонента `DateTimeField` для выбора времени.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IDateInputStateInput",
                "'inputProps' | 'input'>",
                "Omit<IFieldWrapperInputProps",
                "'attribute'>",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attributeFrom",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'fromTime'",
                    "defaultValue": null
                },
                {
                    "name": "attributeTo",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'toTime'",
                    "defaultValue": null
                },
                {
                    "name": "calendarProps",
                    "decorators": [],
                    "description": "Свойства для компонента Calendar",
                    "required": false,
                    "type": "ICalendarProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hasInitialFocus",
                    "decorators": [],
                    "description": "Устанавливать ли фокус и показывать календарь сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "inputPropsFrom",
                    "decorators": [],
                    "description": "Свойства для поля 'from'",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputPropsTo",
                    "decorators": [],
                    "description": "Свойства для поля 'to'",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "pickerProps",
                    "decorators": [],
                    "description": "Свойства для компонента DayPickerInput",
                    "required": false,
                    "type": "any",
                    "example": "{\n dayPickerProps: {\n  showWeekNumbers: true\n }\n}",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "timePanelViewProps",
                    "decorators": [],
                    "description": "Свойства для компонента панели времени",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IDateTimeRangeFieldViewProps": {
            "name": "IDateTimeRangeFieldViewProps",
            "moduleName": "ui/form/DateTimeRangeField/DateTimeRangeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateOutput",
                "Omit<IFieldWrapperOutputProps",
                "'input'>",
                "Pick<IDateRangeFieldProps",
                "'size' | 'icon' | 'errors' | 'showRemove' | 'calendarProps' | 'className' | 'disabled'\n        | 'noBorder' | 'style'>"
            ],
            "properties": [
                {
                    "name": "calendarProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ICalendarProps",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Коллекция ошибок",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "errorsFrom",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "errorsTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day"
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для поля во view",
                    "required": true,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "inputPropsFrom",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "inputPropsTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "Показать или скрыть выпадающую панель",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Отображение кнопки для сброса значения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "timePanelViewProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "Функция очищает значение поля",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция закрывает выпадающую панель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onNow",
                    "decorators": [],
                    "description": "Функция возвращает текущее значение времени (дата + время)",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IDropDownFieldItem": {
            "name": "IDropDownFieldItem",
            "moduleName": "ui/form/DropDownField/DropDownField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "contentSrc",
                    "decorators": [],
                    "description": "Источник контента",
                    "required": false,
                    "type": "string | ReactElement",
                    "example": "'https://steroids.kozhindev.com/images/icon.png'"
                },
                {
                    "name": "contentType",
                    "decorators": [],
                    "description": "Тип контента для элемента",
                    "required": false,
                    "type": "string",
                    "example": "'img'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор элемента",
                    "required": true,
                    "type": "string | number | boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Отображаемое название",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IDropDownFieldItemViewProps": {
            "name": "IDropDownFieldItemViewProps",
            "moduleName": "ui/form/DropDownField/DropDownField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IAccordionItemViewProps",
                "Pick<IDropDownFieldProps",
                "'itemsContent'>"
            ],
            "properties": [
                {
                    "name": "activeKey",
                    "decorators": [],
                    "description": "Номер активного AccordionItem, который может меняться динамический или быть статичным",
                    "required": false,
                    "type": "number",
                    "example": "1"
                },
                {
                    "name": "childIndex",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит Accordion в выключенное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "groupAttribute",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "\"string\"",
                    "example": null
                },
                {
                    "name": "hasOneOpenItem",
                    "decorators": [],
                    "description": "Включает режим в котором можно открыть только один AccordionItem",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "hoveredId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Пользовательская иконка svg или название иконки или объект с иконками open и close",
                    "required": false,
                    "type": "string | ReactElement | IAccordionIcon",
                    "example": "'circle'"
                },
                {
                    "name": "isItemToSelectAll",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isSelectedAll",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isShowMore",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IDropDownFieldItem",
                    "example": null
                },
                {
                    "name": "itemsContent",
                    "decorators": [],
                    "description": "Свойство, которое устанавливает один type и src контента для всех пунктов",
                    "required": false,
                    "type": "{src: string | ReactElement, type: string}",
                    "example": "{\n type: 'icon',\n src: 'user'\n}"
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Стилизация позиционирования.\nПри значении \"top\" верхняя часть шапки будет закруглена.",
                    "required": false,
                    "type": "\"top\" | \"bottom\" | \"middle\"",
                    "example": "'top'"
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number | string",
                    "example": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "showIcon",
                    "decorators": [],
                    "description": "Отображать ли иконку у AccordionItem",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "theme",
                    "decorators": [],
                    "description": "Тема аккордеона",
                    "required": false,
                    "type": "\"light\" | \"dark\" | \"intermediate\"",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Название AccordionItem",
                    "required": false,
                    "type": "string",
                    "example": "'Подробнее'"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Вызываемая функция при каждом изменении состояния",
                    "required": false,
                    "type": "void",
                    "example": "{\n () => { console.log('success') }\n}",
                    "parameters": []
                },
                {
                    "name": "onItemHover",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onItemSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "toggleAccordion",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "number",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "toggleCollapse",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "number",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDropDownFieldProps": {
            "name": "IDropDownFieldProps",
            "moduleName": "ui/form/DropDownField/DropDownField",
            "title": "DropDownField",
            "description": "\nВыпадающий список для выбора одного или нескольких значений.\n\nКомпонент `DropDownField` предоставляет возможность создания выпадающего списка для выбора одного или нескольких значений.\nОн поддерживает различные типы контента для элементов списка, такие как флажки, радиокнопки, иконки и изображения.\n\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "Omit<IDataProviderConfig",
                "'items'>",
                "Omit<IDataSelectConfig",
                "'items'>",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "Настройки поиска",
                    "required": false,
                    "type": "boolean | IAutoCompleteConfig",
                    "example": "{\n enable: true,\n minLength: 2,\n delay: 100\n}",
                    "defaultValue": null
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success",
                    "defaultValue": null
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.",
                    "required": false,
                    "type": "IDataProvider",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "groupAttribute",
                    "decorators": [],
                    "description": "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится",
                    "required": false,
                    "type": "string",
                    "example": "items",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialSelectedIds",
                    "decorators": [],
                    "description": "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`",
                    "required": false,
                    "type": "number[]",
                    "example": "[1, 22]",
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Параметры для элемента input",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputValue",
                    "decorators": [],
                    "description": "Значение поля в форме",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemToSelectAll",
                    "decorators": [],
                    "description": "Добавляет кнопку при нажатии на которую выбираются все элементы, работает только при multiple: true",
                    "required": false,
                    "type": "boolean | {id: string, label: string}",
                    "example": "{\n label: 'All',\n id: 'all'\n}",
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы вложенные внутрь DropDownField",
                    "required": false,
                    "type": "DataProviderItems | IDropDownFieldItem[]",
                    "example": "[\n {\n  id: 1,\n  label: 'Ivan Ivanov',\n  type: 'icon',\n  typeSrc: 'user'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "itemsContent",
                    "decorators": [],
                    "description": "Свойство, которое устанавливает один type и src контента для всех пунктов",
                    "required": false,
                    "type": "{src: string | ReactElement, type: string}",
                    "example": "{\n type: 'icon',\n src: 'user'\n}",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Возможность множественного выбора",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у DropDownField остается только `border`, а задний фон становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": false,
                    "type": "string",
                    "example": "id",
                    "defaultValue": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Текст запроса",
                    "required": false,
                    "type": "string",
                    "example": "'some text'",
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "searchPlaceholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "selectFirst",
                    "decorators": [],
                    "description": "Сделать активным первый элемент в списке",
                    "required": false,
                    "type": "any",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "Список с идентификаторами выбранных элементов",
                    "required": false,
                    "type": "any",
                    "example": "[1, 4]",
                    "defaultValue": null
                },
                {
                    "name": "showEllipses",
                    "decorators": [],
                    "description": "Нужно ли использовать троеточие при переполнении DropDownField",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showReset",
                    "decorators": [],
                    "description": "Показать иконку сброса для выбранных значений",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": " Список со всеми элементами",
                    "required": false,
                    "type": "IDataSelectItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IDropDownFieldViewProps": {
            "name": "IDropDownFieldViewProps",
            "moduleName": "ui/form/DropDownField/DropDownField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDropDownFieldProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "Настройки поиска",
                    "required": false,
                    "type": "boolean | IAutoCompleteConfig",
                    "example": "{\n enable: true,\n minLength: 2,\n delay: 100\n}"
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success"
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.",
                    "required": false,
                    "type": "IDataProvider",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "forwardedRef",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "groupAttribute",
                    "decorators": [],
                    "description": "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится",
                    "required": false,
                    "type": "string",
                    "example": "items"
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "hoveredId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "initialSelectedIds",
                    "decorators": [],
                    "description": "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`",
                    "required": false,
                    "type": "number[]",
                    "example": "[1, 22]"
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Параметры для элемента input",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "inputValue",
                    "decorators": [],
                    "description": "Значение поля в форме",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "isAutoComplete",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isSearchAutoFocus",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "itemToSelectAll",
                    "decorators": [],
                    "description": "Добавляет кнопку при нажатии на которую выбираются все элементы, работает только при multiple: true",
                    "required": true,
                    "type": "{id: string, label: string}",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы вложенные внутрь DropDownField",
                    "required": true,
                    "type": "IDropDownFieldItem[]",
                    "example": null
                },
                {
                    "name": "itemsContent",
                    "decorators": [],
                    "description": "Свойство, которое устанавливает один type и src контента для всех пунктов",
                    "required": false,
                    "type": "{src: string | ReactElement, type: string}",
                    "example": "{\n type: 'icon',\n src: 'user'\n}"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Возможность множественного выбора",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у DropDownField остается только `border`, а задний фон становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Текст запроса",
                    "required": false,
                    "type": "string",
                    "example": "'some text'"
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "searchInputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{className: string, disabled: boolean, name: string, placeholder: string, type: string, value: string | number, onChange: null}",
                    "example": null
                },
                {
                    "name": "searchPlaceholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "selectFirst",
                    "decorators": [],
                    "description": "Сделать активным первый элемент в списке",
                    "required": false,
                    "type": "any",
                    "example": "true"
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "Список с идентификаторами выбранных элементов",
                    "required": true,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "selectedItems",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record[]",
                    "example": null
                },
                {
                    "name": "showEllipses",
                    "decorators": [],
                    "description": "Нужно ли использовать троеточие при переполнении DropDownField",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "showReset",
                    "decorators": [],
                    "description": "Показать иконку сброса для выбранных значений",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": " Список со всеми элементами",
                    "required": false,
                    "type": "IDataSelectItem[]",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onItemRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onOpen",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onReset",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderItem",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IDropDownFieldItem",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IEmailFieldProps": {
            "name": "IEmailFieldProps",
            "moduleName": "ui/form/EmailField/EmailField",
            "title": "EmailField",
            "description": "\nПоле ввода почты. Этот компонент представляет собой поле ввода почты.\n\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IBaseFieldProps",
                "IFieldWrapperInputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "InputHTMLAttributes",
                    "example": "{ onKeyDown: ... }",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFieldProps": {
            "name": "IFieldProps",
            "moduleName": "ui/form/Field/Field",
            "title": "Field",
            "description": "\nКомпонент, который рендерит соответствующее поле, исходя из переданной модели и названия атрибута.\nПо умолчанию будет отрендерен InputField.\nТакже можно не использовать модель, а передавать компонент поля напрямую через пропсы.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "any",
                    "example": "isVisible",
                    "defaultValue": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент поля",
                    "required": false,
                    "type": "any",
                    "example": "DropDownField",
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "Model",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "FieldWrapperComponent": {
            "name": "FieldWrapperComponent",
            "moduleName": "ui/form/Field/fieldWrapper",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "WrappedComponent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "defaultProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "displayName",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": []
        },
        "IFieldWrapperInputProps": {
            "name": "IFieldWrapperInputProps",
            "moduleName": "ui/form/Field/fieldWrapper",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFieldWrapperOutputProps": {
            "name": "IFieldWrapperOutputProps",
            "moduleName": "ui/form/Field/fieldWrapper",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Коллекция ошибок",
                    "required": false,
                    "type": "string[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IInputParams": {
            "name": "IInputParams",
            "moduleName": "ui/form/Field/fieldWrapper",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "name",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFieldLayoutProps": {
            "name": "IFieldLayoutProps",
            "moduleName": "ui/form/FieldLayout/FieldLayout",
            "title": "FieldLayout",
            "description": "\nСпециальный шаблон для поля, который настраивает его расположение внутри формы, рендерит лейбл, подсказки и ошибки.\n\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "'Field is required'",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отображается, когда в поле нет ошибок",
                    "required": false,
                    "type": "string | boolean",
                    "example": "'Save'",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true,\nто к названию будет добавлен модификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "successful",
                    "decorators": [],
                    "description": "Отображать ли состояние successful на поле",
                    "required": false,
                    "type": "boolean",
                    "example": "'true'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IFieldLayoutViewProps": {
            "name": "IFieldLayoutViewProps",
            "moduleName": "ui/form/FieldLayout/FieldLayout",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "successful",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": []
        },
        "IFieldListItem": {
            "name": "IFieldListItem",
            "moduleName": "ui/form/FieldList/FieldList",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Какой компонент для item использовать?",
                    "required": false,
                    "type": "any",
                    "example": "NumberField"
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "headerClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для заголовка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок для колонки таблицы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Будет ли отображён item?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFieldListItemViewProps": {
            "name": "IFieldListItemViewProps",
            "moduleName": "ui/form/FieldList/FieldList",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Коллекция ошибок",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFieldListItem & {disabled: boolean, size: boolean}[]",
                    "example": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "rowIndex",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "rowIndex",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFieldListProps": {
            "name": "IFieldListProps",
            "moduleName": "ui/form/FieldList/FieldList",
            "title": "FieldList",
            "description": "\nСоздает список из сгруппированных полей формы.\nДля загрузки файлов с помощью `FileField` внутри строк `FieldList`, нужно использовать форму с флагом `useRedux`.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "enableKeyboardNavigation",
                    "decorators": [],
                    "description": "При фокусировке на одном из элементов формы и нажатию на клавиши стрелок вверх/вниз + Shift\nпроисходит добавление группы полей сверху или снизу соответственно",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hasAlternatingColors",
                    "decorators": [],
                    "description": "Добавляет эффект зебры к таблице",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialRowsCount",
                    "decorators": [],
                    "description": "Изначальное количество групп с полями",
                    "required": false,
                    "type": "number",
                    "example": "2",
                    "defaultValue": null
                },
                {
                    "name": "initialValues",
                    "decorators": [],
                    "description": "Начальные значения в полях",
                    "required": false,
                    "type": "{}",
                    "example": "{\n name: 'Ivan',\n amount: 5\n}",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения группы полей",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "itemViewProps",
                    "decorators": [],
                    "description": "Пропсы для компонента отображения группы полей - FieldListItemView",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Список с полями формы",
                    "required": false,
                    "type": "IFieldListItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showAdd",
                    "decorators": [],
                    "description": "Отображение кнопки для добавления ещё одной группы с полями",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Возможность удаления группы с полями (добавляет крестик справа от группы)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "tableClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для таблицы",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Пропсы для компонента отображения списка с группами полей - FieldListView",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFieldListViewProps": {
            "name": "IFieldListViewProps",
            "moduleName": "ui/form/FieldList/FieldList",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "forwardedRef",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "hasAlternatingColors",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "IFieldListItem & {disabled: boolean, size: boolean}[]",
                    "example": null
                },
                {
                    "name": "showAdd",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CSSProperties",
                    "example": null
                },
                {
                    "name": "tableClassName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onAdd",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IFieldSetProps": {
            "name": "IFieldSetProps",
            "moduleName": "ui/form/FieldSet/FieldSet",
            "title": "FieldSet",
            "description": "Компонент для группировки полей формы",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFormContext"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для '<fieldset>...</fieldset>'",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "Диспатч",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "Конфигурационный массив с полями формы",
                    "required": false,
                    "type": "IFieldProps[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": "{}",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Заголовок для группы полей в форме",
                    "required": false,
                    "type": "any",
                    "example": "Save",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс для полей формы",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "provider",
                    "decorators": [],
                    "description": "Провайдер",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "reducer",
                    "decorators": [],
                    "description": "Редьюсер",
                    "required": false,
                    "type": "{dispatch: Dispatch, select: any}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер компонента",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IFieldSetViewProps": {
            "name": "IFieldSetViewProps",
            "moduleName": "ui/form/FieldSet/FieldSet",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": []
        },
        "IFileFieldItemViewProps": {
            "name": "IFileFieldItemViewProps",
            "moduleName": "ui/form/FileField/FileField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFileFieldCommonProps"
            ],
            "properties": [
                {
                    "name": "backendUrl",
                    "decorators": [],
                    "description": "Экшен для отправки на бэкенд",
                    "required": false,
                    "type": "any",
                    "example": "'/api/v1/user/avatar/crop'"
                },
                {
                    "name": "customRemoveIcon",
                    "decorators": [],
                    "description": "Кастомная иконка для удаление файла",
                    "required": false,
                    "type": "string",
                    "example": "true"
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "error",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "fileId",
                    "decorators": [],
                    "description": "ID файла",
                    "required": false,
                    "type": "string | number",
                    "example": "34"
                },
                {
                    "name": "filesLayout",
                    "decorators": [],
                    "description": "Вариант отображения файлов",
                    "required": false,
                    "type": "string",
                    "example": "'list'"
                },
                {
                    "name": "image",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{height: string, url: string, width: string}",
                    "example": null
                },
                {
                    "name": "imagesExactSize",
                    "decorators": [],
                    "description": "Точные размеры изображений",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesOnly",
                    "decorators": [],
                    "description": "Использовать только изображения",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesProcessor",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "initialFiles",
                    "decorators": [],
                    "description": "Начальные файлы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "mimeTypes",
                    "decorators": [],
                    "description": "Список mime-типов",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Множественный выбор файлов",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "progress",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{bytesUploaded: number, percent: number}",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показать значок удаление файла",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Исходное название файла",
                    "required": false,
                    "type": "string",
                    "example": "original-name"
                },
                {
                    "name": "uid",
                    "decorators": [],
                    "description": "Уникальный текстовый идентификатор",
                    "required": false,
                    "type": "string",
                    "example": "e65f5867-0083-48a7-af43-1121ed9e6280"
                },
                {
                    "name": "uploader",
                    "decorators": [],
                    "description": "Позволяет указать uploader",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "uploaderConfig",
                    "decorators": [],
                    "description": "Параметры для uploader",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onLoad",
                    "decorators": [],
                    "description": "Обработчик события загрузки файлов",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onRemove",
                    "decorators": [],
                    "description": "Обработчик события удаления файла",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IFileFieldProps": {
            "name": "IFileFieldProps",
            "moduleName": "ui/form/FileField/FileField",
            "title": "FileField",
            "description": "\nКомпонент `FileField` представляет собой поле формы для загрузки файлов.\nОн использует хук `useFile` для управления состоянием файлов и выполнения операций с файлами, таких как выбор и удаление.\nКомпонент поддерживает различные варианты отображения файлов (список или стена) с помощью перечисления `FilesLayout`.\nНа backendUrl по дефолту файл отправляется в теле запроса в виде бинарного кода.\nЧтобы отправлять файл в виде form-data (например в таком виде принимает файл FileModule в библиотеке steroidsjs/nest),\nнужно передать в `FileField` пропс uploaderConfig, в котором нужно указать поле useFormData: true.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IFileFieldCommonProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "backendUrl",
                    "decorators": [],
                    "description": "Экшен для отправки на бэкенд",
                    "required": false,
                    "type": "any",
                    "example": "'/api/v1/user/avatar/crop'",
                    "defaultValue": null
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Пропсы для кнопки",
                    "required": false,
                    "type": "IButtonProps",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "buttonView",
                    "decorators": [],
                    "description": "View компонент для кнопки",
                    "required": false,
                    "type": "any",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "customRemoveIcon",
                    "decorators": [],
                    "description": "Кастомная иконка для удаление файла",
                    "required": false,
                    "type": "string",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "filesLayout",
                    "decorators": [],
                    "description": "Вариант отображения файлов",
                    "required": false,
                    "type": "string",
                    "example": "'list'",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "imagesExactSize",
                    "decorators": [],
                    "description": "Точные размеры изображений",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "imagesOnly",
                    "decorators": [],
                    "description": "Использовать только изображения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "imagesProcessor",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialFiles",
                    "decorators": [],
                    "description": "Начальные файлы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "Пропсы для элемента файла",
                    "required": false,
                    "type": "Record",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "View компонент для элемента списка файлов",
                    "required": false,
                    "type": "any",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "mimeTypes",
                    "decorators": [],
                    "description": "Список mime-типов",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Множественный выбор файлов",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показать значок удаление файла",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "uploader",
                    "decorators": [],
                    "description": "Позволяет указать uploader",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "uploaderConfig",
                    "decorators": [],
                    "description": "Параметры для uploader",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFileFieldViewProps": {
            "name": "IFileFieldViewProps",
            "moduleName": "ui/form/FileField/FileField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFileFieldProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "backendUrl",
                    "decorators": [],
                    "description": "Экшен для отправки на бэкенд",
                    "required": false,
                    "type": "any",
                    "example": "'/api/v1/user/avatar/crop'"
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Пропсы для кнопки",
                    "required": false,
                    "type": "IButtonProps",
                    "example": "true"
                },
                {
                    "name": "buttonView",
                    "decorators": [],
                    "description": "View компонент для кнопки",
                    "required": false,
                    "type": "any",
                    "example": "true"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "customRemoveIcon",
                    "decorators": [],
                    "description": "Кастомная иконка для удаление файла",
                    "required": false,
                    "type": "string",
                    "example": "true"
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "filesLayout",
                    "decorators": [],
                    "description": "Вариант отображения файлов",
                    "required": false,
                    "type": "string",
                    "example": "'list'"
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "imagesExactSize",
                    "decorators": [],
                    "description": "Точные размеры изображений",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesOnly",
                    "decorators": [],
                    "description": "Использовать только изображения",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesProcessor",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "initialFiles",
                    "decorators": [],
                    "description": "Начальные файлы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "Пропсы для элемента файла",
                    "required": false,
                    "type": "Record",
                    "example": "true"
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "View компонент для элемента списка файлов",
                    "required": false,
                    "type": "any",
                    "example": "true"
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IFileFieldItemViewProps[]",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "mimeTypes",
                    "decorators": [],
                    "description": "Список mime-типов",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Множественный выбор файлов",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показать значок удаление файла",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "uploader",
                    "decorators": [],
                    "description": "Позволяет указать uploader",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "uploaderConfig",
                    "decorators": [],
                    "description": "Параметры для uploader",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFormContext": {
            "name": "IFormContext",
            "moduleName": "ui/form/Form/Form",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "Диспатч",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": "{}"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс для полей формы",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "provider",
                    "decorators": [],
                    "description": "Провайдер",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "reducer",
                    "decorators": [],
                    "description": "Редьюсер",
                    "required": false,
                    "type": "{dispatch: Dispatch, select: any}",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IFormProps": {
            "name": "IFormProps",
            "moduleName": "ui/form/Form/Form",
            "title": "Form",
            "description": "\nКомпонент для создания формы. Предоставляет управление и синхронизацию состояния формы,\nа также позволяет выполнять отправку данных формы на сервер с возможностью валидации и обработки результатов.\n",
            "tags": {},
            "defaultProps": {
                "actionMethod": "'POST'",
                "autoStartTwoFactor": "true",
                "captchaActionName": "'submit'"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "Url на который будет отправлена форма",
                    "required": false,
                    "type": "string",
                    "example": "api/v1/handle-form",
                    "defaultValue": null
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "Тип HTTP запроса (GET | POST | PUT | DELETE)",
                    "required": false,
                    "type": "string",
                    "example": "POST",
                    "defaultValue": "'POST'"
                },
                {
                    "name": "addressBar",
                    "decorators": [],
                    "description": "Синхронизация значений формы с адресной строкой",
                    "required": false,
                    "type": "boolean | IAddressBarConfig",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoDestroy",
                    "decorators": [],
                    "description": "Очищать ли данные формы с redux хранилища при размонтировании компонента. По-умолчанию - false",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": null
                },
                {
                    "name": "autoFocus",
                    "decorators": [],
                    "description": "Если в форме есть элементы '<input>', то произойдет автоматическая фокусировка на первом из них",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoSave",
                    "decorators": [],
                    "description": "Сохраняет значения полей формы в LocalStorage",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoStartTwoFactor",
                    "decorators": [],
                    "description": "Автоматически стартовать 2fa аутентификацию (отправлять код)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "true"
                },
                {
                    "name": "captchaActionName",
                    "decorators": [],
                    "description": "Название действия, которое передаётся в API Google reCAPTCHA v3, для более детального анализа\nповедения пользователя (https://developers.google.com/recaptcha/docs/v3)",
                    "required": false,
                    "type": "string",
                    "example": "'addComment'",
                    "defaultValue": "'submit'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "Поля, которые необходимо поместить в форму",
                    "required": false,
                    "type": "string | IFieldProps[]",
                    "example": "[\n {\n  attribute: 'category',\n  component: 'DropDownField'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Идентификатор формы",
                    "required": false,
                    "type": "string",
                    "example": "BookingForm",
                    "defaultValue": null
                },
                {
                    "name": "initialValues",
                    "decorators": [],
                    "description": "Начальные значения формы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "submitErrorMessage",
                    "decorators": [],
                    "description": "Текст ошибки при неудачной отправке данных. По-умолчанию: \"Ошибка сервера\"",
                    "required": false,
                    "type": "string",
                    "example": "Упс, что-то пошло не так",
                    "defaultValue": null
                },
                {
                    "name": "submitLabel",
                    "decorators": [],
                    "description": "Надпись на кнопке отправки формы",
                    "required": false,
                    "type": "string",
                    "example": "Submit",
                    "defaultValue": null
                },
                {
                    "name": "useRedux",
                    "decorators": [],
                    "description": "Использовать для данных глобальное хранилище (redux)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "validators",
                    "decorators": [],
                    "description": "Набор с правилами для проверки соответствия значений полей формы определенному формату.\nПроверка запускается в момент отправки формы (в обработчике onSubmit).",
                    "required": false,
                    "type": "any[]",
                    "example": "[\n ['name', 'required'],\n ['age', 'integer']\n]",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для представления",
                    "required": false,
                    "type": "any",
                    "example": "{className: 'foo'}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onAfterSubmit",
                    "decorators": [],
                    "description": "Обработчик события после отправки формы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onBeforeSubmit",
                    "decorators": [],
                    "description": "Обработчик события перед отправкой формы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик события при каком-либо изменении в форме",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onComplete",
                    "decorators": [],
                    "description": "Обработчик успешного выполнения формы (без ошибок)",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onError",
                    "decorators": [],
                    "description": "Обработчик события ошибки выполнения запроса",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "decorators": [],
                    "description": "Обработчик события отправки формы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onTwoFactor",
                    "decorators": [],
                    "description": "Обработчик, который вызывается при запросе 2FA",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "providerName",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "info",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IFormReducerState": {
            "name": "IFormReducerState",
            "moduleName": "ui/form/Form/Form",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "initialValues",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "isInvalid",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isSubmitting",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "values",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": []
        },
        "IFormViewProps": {
            "name": "IFormViewProps",
            "moduleName": "ui/form/Form/Form",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "autoFocus",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | IFieldProps[]",
                    "example": null
                },
                {
                    "name": "onSubmit",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "CSSProperties",
                    "example": null
                },
                {
                    "name": "submitLabel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IHtmlFieldProps": {
            "name": "IHtmlFieldProps",
            "moduleName": "ui/form/HtmlField/HtmlField",
            "title": "HtmlField",
            "description": "Компонент для создания HTML-разметки, использующий WYSIWYG редактор",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IFieldWrapperOutputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "editorProps",
                    "decorators": [],
                    "description": "Конфигурация wysiwyg реадактора",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "uploadImagesProcessor",
                    "decorators": [],
                    "description": "После загрузки изображения на сервер,\nможно указать с каким процессором должно вернуться картинка",
                    "required": false,
                    "type": "string",
                    "example": "origin",
                    "defaultValue": null
                },
                {
                    "name": "uploadUrl",
                    "decorators": [],
                    "description": "Url на который будет отправлена форма загрузки файла",
                    "required": false,
                    "type": "string",
                    "example": "/api/v1/upload-files",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onBlur",
                    "decorators": [],
                    "description": "Обработчик события при снятии фокуса с редактора",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "decorators": [],
                    "description": "Обработчик события при фокусе на редактора",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IHtmlFieldViewProps": {
            "name": "IHtmlFieldViewProps",
            "moduleName": "ui/form/HtmlField/HtmlField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IHtmlFieldProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "editorProps",
                    "decorators": [],
                    "description": "Конфигурация wysiwyg реадактора",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "uploadImagesProcessor",
                    "decorators": [],
                    "description": "После загрузки изображения на сервер,\nможно указать с каким процессором должно вернуться картинка",
                    "required": false,
                    "type": "string",
                    "example": "origin"
                },
                {
                    "name": "uploadUrl",
                    "decorators": [],
                    "description": "Url на который будет отправлена форма загрузки файла",
                    "required": false,
                    "type": "string",
                    "example": "/api/v1/upload-files"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onBlur",
                    "decorators": [],
                    "description": "Обработчик события при снятии фокуса с редактора",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "editor",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "decorators": [],
                    "description": "Обработчик события при фокусе на редактора",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "event",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICropConfig": {
            "name": "ICropConfig",
            "moduleName": "ui/form/ImageField/ImageField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "backendUrl",
                    "decorators": [],
                    "description": "Экшн для отправки параметров обрезки на бэкенд",
                    "required": false,
                    "type": "string",
                    "example": "'/api/v1/user/avatar/crop'"
                },
                {
                    "name": "initialValues",
                    "decorators": [],
                    "description": "Изначальные параметры обрезки изображения",
                    "required": false,
                    "type": "Crop",
                    "example": "{\n unit: 'px',\n aspect: 1,\n x: 0,\n y: 0,\n width: 200,\n height: 200\n}"
                },
                {
                    "name": "reactImageCropProps",
                    "decorators": [],
                    "description": "Пропсы для модуля react-image-crop",
                    "required": false,
                    "type": "ReactCrop",
                    "example": "{maxWidth: 400, maxHeight: 400}"
                }
            ],
            "methods": []
        },
        "ICropOutputProps": {
            "name": "ICropOutputProps",
            "moduleName": "ui/form/ImageField/ImageField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ICropConfig"
            ],
            "properties": [
                {
                    "name": "backendUrl",
                    "decorators": [],
                    "description": "Экшн для отправки параметров обрезки на бэкенд",
                    "required": false,
                    "type": "string",
                    "example": "'/api/v1/user/avatar/crop'",
                    "defaultValue": null
                },
                {
                    "name": "initialValues",
                    "decorators": [],
                    "description": "Изначальные параметры обрезки изображения",
                    "required": false,
                    "type": "Crop",
                    "example": "{\n unit: 'px',\n aspect: 1,\n x: 0,\n y: 0,\n width: 200,\n height: 200\n}",
                    "defaultValue": null
                },
                {
                    "name": "reactImageCropProps",
                    "decorators": [],
                    "description": "Пропсы для модуля react-image-crop",
                    "required": false,
                    "type": "ReactCrop",
                    "example": "{maxWidth: 400, maxHeight: 400}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onSubmit",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "crop",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Crop",
                            "example": null
                        },
                        {
                            "name": "imageId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IImageFieldModalViewProps": {
            "name": "IImageFieldModalViewProps",
            "moduleName": "ui/form/ImageField/ImageField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IModalProps"
            ],
            "properties": [
                {
                    "name": "buttons",
                    "decorators": [],
                    "description": "Коллекция кнопок, которая отобразится в нижней секции Modal",
                    "required": false,
                    "type": "IButtonProps[]",
                    "example": "[\n {\n  label: __(('Закрыть')),\n  onClick: () => props.onClose()\n }\n]"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Кастомный CSS-класс",
                    "required": false,
                    "type": "string",
                    "example": "'CustomCssClassName'"
                },
                {
                    "name": "closeAfterMs",
                    "decorators": [],
                    "description": "Время в миллисекундах, через которое автоматически произойдет закрытие Modal.",
                    "required": false,
                    "type": "number",
                    "example": "1000"
                },
                {
                    "name": "closeTimeoutMs",
                    "decorators": [],
                    "description": "Время, в течение которого будет происходить анимация закрытия Modal.\nПереопределяет отрезок времени, заданный в ModalPortal",
                    "required": false,
                    "type": "number",
                    "example": "300"
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "Свойства для внутреннего компонента",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "crop",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ICropOutputProps",
                    "example": null
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "Группа Modal",
                    "required": false,
                    "type": "string",
                    "example": "'modal'"
                },
                {
                    "name": "image",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "Порядковый номер Modal",
                    "required": false,
                    "type": "number",
                    "example": "0"
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "Значение свойства отслеживается для показа/закрытия Modal.\nЕсли для компонента ModalPortal установлено значение задержки (animationDelayMc), то после закрытия\nпользователем Modal, оно исчезнет не сразу, а через указанный в animationDelayMc промежуток времени.\nВ течение этого времени флаг isClosing будет равен true.\nЕсли задержка не установлена, Modal закроется сразу же и флаг isClosing всегда будет равен false.",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "shouldCloseOnEsc",
                    "decorators": [],
                    "description": "Закрытие Modal при нажатии на клавишу 'ESC'",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "shouldCloseOnOverlayClick",
                    "decorators": [],
                    "description": "Закрытие Modal при клике на компонент overlay внутри Modal (темный фон, отделяющий контент страницы от Modal)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер Modal",
                    "required": false,
                    "type": "string",
                    "example": "'middle'"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок Modal",
                    "required": false,
                    "type": "string",
                    "example": "'Заявка отправлена на модерацию'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение React-компонента для кастомизации view-отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент, который отрендерится внутри Modal",
                    "required": false,
                    "type": "Element",
                    "example": "() => <InnerModalComponent />",
                    "parameters": [
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Обработчик срабатывает при закрытии Modal",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IImageFieldProps": {
            "name": "IImageFieldProps",
            "moduleName": "ui/form/ImageField/ImageField",
            "title": "ImageField",
            "description": "\nКомпонент для загрузки изображений с возможностью обрезки и предпросмотра.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "Omit<IFileInput",
                "'multiple' | 'imagesOnly'>",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "backendUrl",
                    "decorators": [],
                    "description": "Экшен для отправки на бэкенд",
                    "required": false,
                    "type": "any",
                    "example": "'/api/v1/user/avatar/crop'",
                    "defaultValue": null
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Пропсы для кнопки",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "crop",
                    "decorators": [],
                    "description": "Параметры обрезки",
                    "required": false,
                    "type": "ICropConfig",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "imagesExactSize",
                    "decorators": [],
                    "description": "Точные размеры изображений",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "imagesProcessor",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialFiles",
                    "decorators": [],
                    "description": "Начальные файлы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название кнопки",
                    "required": false,
                    "type": "string",
                    "example": "'Загрузить'",
                    "defaultValue": null
                },
                {
                    "name": "mimeTypes",
                    "decorators": [],
                    "description": "Список mime-типов",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "modalProps",
                    "decorators": [],
                    "description": "Пропсы для модального окна",
                    "required": false,
                    "type": "IModalProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "modalView",
                    "decorators": [],
                    "description": "Переопределение внешнего вида модального окна",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomModalView",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "uploader",
                    "decorators": [],
                    "description": "Позволяет указать uploader",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "uploaderConfig",
                    "decorators": [],
                    "description": "Параметры для uploader",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IImageFieldViewProps": {
            "name": "IImageFieldViewProps",
            "moduleName": "ui/form/ImageField/ImageField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IImageFieldProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "backendUrl",
                    "decorators": [],
                    "description": "Экшен для отправки на бэкенд",
                    "required": false,
                    "type": "any",
                    "example": "'/api/v1/user/avatar/crop'"
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Пропсы для кнопки",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "crop",
                    "decorators": [],
                    "description": "Параметры обрезки",
                    "required": false,
                    "type": "ICropConfig",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "imagesExactSize",
                    "decorators": [],
                    "description": "Точные размеры изображений",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "imagesProcessor",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "initialFiles",
                    "decorators": [],
                    "description": "Начальные файлы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, error: string, fileId: string | number, image: {height: string, url: string, width: string}, progress: {bytesUploaded: number, percent: number}, size: string | number, title: string, uid: string, onRemove: null}",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название кнопки",
                    "required": false,
                    "type": "string",
                    "example": "'Загрузить'"
                },
                {
                    "name": "mimeTypes",
                    "decorators": [],
                    "description": "Список mime-типов",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "modalProps",
                    "decorators": [],
                    "description": "Пропсы для модального окна",
                    "required": false,
                    "type": "IModalProps",
                    "example": null
                },
                {
                    "name": "modalView",
                    "decorators": [],
                    "description": "Переопределение внешнего вида модального окна",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomModalView"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "uploader",
                    "decorators": [],
                    "description": "Позволяет указать uploader",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "uploaderConfig",
                    "decorators": [],
                    "description": "Параметры для uploader",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IBaseFieldProps": {
            "name": "IBaseFieldProps",
            "moduleName": "ui/form/InputField/InputField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "InputHTMLAttributes",
                    "example": "{ onKeyDown: ... }",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IInputFieldProps": {
            "name": "IInputFieldProps",
            "moduleName": "ui/form/InputField/InputField",
            "title": "InputField",
            "description": "Поле ввода текста",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IBaseFieldProps"
            ],
            "properties": [
                {
                    "name": "addonAfter",
                    "decorators": [],
                    "description": "Текст или React-нода, которая будет отрендерена справа от поля.",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'.com'",
                    "defaultValue": null
                },
                {
                    "name": "addonBefore",
                    "decorators": [],
                    "description": "Текст или React-нода, которая будет отрендерена слева от поля.",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'http://'",
                    "defaultValue": null
                },
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "InputHTMLAttributes",
                    "example": "{ onKeyDown: ... }",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "leadIcon",
                    "decorators": [],
                    "description": "Пользовательская иконка svg или название иконки",
                    "required": false,
                    "type": "string | ReactElement",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "maskOptions",
                    "decorators": [],
                    "description": "Конфигурация маски",
                    "required": false,
                    "type": "MaskitoOptions",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "textAfter",
                    "decorators": [],
                    "description": "Изображение или React-нода, которая будет отрендерена справа от поля.",
                    "required": false,
                    "type": "ReactNode",
                    "example": "require('icon.png') | '<component/>'",
                    "defaultValue": null
                },
                {
                    "name": "textBefore",
                    "decorators": [],
                    "description": "Изображение или React-нода, которая будет отрендерена слева от поля.",
                    "required": false,
                    "type": "ReactNode",
                    "example": "require('icon.png') | <component/>",
                    "defaultValue": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "string",
                    "example": "email",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IInputFieldViewProps": {
            "name": "IInputFieldViewProps",
            "moduleName": "ui/form/InputField/InputField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IInputFieldProps",
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "addonAfter",
                    "decorators": [],
                    "description": "Текст или React-нода, которая будет отрендерена справа от поля.",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'.com'"
                },
                {
                    "name": "addonBefore",
                    "decorators": [],
                    "description": "Текст или React-нода, которая будет отрендерена слева от поля.",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'http://'"
                },
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": true,
                    "type": "{disabled: boolean, name: string, placeholder: string, type: string, value: string | number, onInput: null}",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "leadIcon",
                    "decorators": [],
                    "description": "Пользовательская иконка svg или название иконки",
                    "required": false,
                    "type": "string | ReactElement",
                    "example": null
                },
                {
                    "name": "maskOptions",
                    "decorators": [],
                    "description": "Конфигурация маски",
                    "required": false,
                    "type": "MaskitoOptions",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "textAfter",
                    "decorators": [],
                    "description": "Изображение или React-нода, которая будет отрендерена справа от поля.",
                    "required": false,
                    "type": "ReactNode",
                    "example": "require('icon.png') | '<component/>'"
                },
                {
                    "name": "textBefore",
                    "decorators": [],
                    "description": "Изображение или React-нода, которая будет отрендерена слева от поля.",
                    "required": false,
                    "type": "ReactNode",
                    "example": "require('icon.png') | <component/>"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "string",
                    "example": "email"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}"
                }
            ],
            "methods": [
                {
                    "name": "onBlur",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Event | FocusEvent",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onFocus",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Event | FocusEvent",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onMouseDown",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Event | MouseEvent",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "INavFieldProps": {
            "name": "INavFieldProps",
            "moduleName": "ui/form/NavField/NavField",
            "title": "NavField",
            "description": "Компонент навигации как часть формы.\n\nЭтот компонент представляет собой навигационное меню, которое можно использовать\nкак часть формы для выбора различных элементов или вкладок.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IFieldWrapperOutputProps",
                "IDataProviderConfig",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "Настройки поиска",
                    "required": false,
                    "type": "boolean | IAutoCompleteConfig",
                    "example": "{\n enable: true,\n minLength: 2,\n delay: 100\n}",
                    "defaultValue": null
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.",
                    "required": false,
                    "type": "IDataProvider",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialSelectedIds",
                    "decorators": [],
                    "description": "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`",
                    "required": false,
                    "type": "number[]",
                    "example": "[1, 22]",
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": false,
                    "type": "string | {} | string | number | {id: string | number | boolean, label: string | any}[]",
                    "example": "[\n {\n  id: 1,\n  label: 'Krasnoyarsk'\n },\n {\n  id: 2,\n  label: 'Moscow'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "navProps",
                    "decorators": [],
                    "description": "Свойства для компонента Nav",
                    "required": false,
                    "type": "INavProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Текст запроса",
                    "required": false,
                    "type": "string",
                    "example": "'some text'",
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "INumberFieldProps": {
            "name": "INumberFieldProps",
            "moduleName": "ui/form/NumberField/NumberField",
            "title": "NumberField",
            "description": "\nЧисловое поле ввода. Этот компонент представляет собой поле ввода для числовых значений.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IBaseFieldProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "InputHTMLAttributes",
                    "example": "{ onKeyDown: ... }",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "max",
                    "decorators": [],
                    "description": "Максимальное значение",
                    "required": false,
                    "type": "number",
                    "example": "100",
                    "defaultValue": null
                },
                {
                    "name": "min",
                    "decorators": [],
                    "description": "Минимальное значение",
                    "required": false,
                    "type": "number",
                    "example": "1",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "step",
                    "decorators": [],
                    "description": "Шаг увеличения/уменьшения значения",
                    "required": false,
                    "type": "number",
                    "example": "5",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "INumberFieldViewProps": {
            "name": "INumberFieldViewProps",
            "moduleName": "ui/form/NumberField/NumberField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "INumberFieldProps",
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": true,
                    "type": "{disabled: boolean, max: number, min: number, name: string, placeholder: string, step: string | number, type: string, value: number, onChange: null}",
                    "example": null
                },
                {
                    "name": "inputRef",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "MutableRefObject",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "max",
                    "decorators": [],
                    "description": "Максимальное значение",
                    "required": false,
                    "type": "number",
                    "example": "100"
                },
                {
                    "name": "min",
                    "decorators": [],
                    "description": "Минимальное значение",
                    "required": false,
                    "type": "number",
                    "example": "1"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "onKeyDown",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "onStepDown",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "onStepUp",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "step",
                    "decorators": [],
                    "description": "Шаг увеличения/уменьшения значения",
                    "required": false,
                    "type": "number",
                    "example": "5"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IPasswordFieldProps": {
            "name": "IPasswordFieldProps",
            "moduleName": "ui/form/PasswordField/PasswordField",
            "title": "PasswordField",
            "description": "\nПоле ввода пароля. Этот компонент представляет собой поле ввода для паролей.\n\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IBaseFieldProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "InputHTMLAttributes",
                    "example": "{ onKeyDown: ... }",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showSecurityBar",
                    "decorators": [],
                    "description": "Если true, то отображается шкала сложности пароля",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showSecurityIcon",
                    "decorators": [],
                    "description": "Если true, то отображается иконка скрытия/показа пароля",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IPasswordFieldViewProps": {
            "name": "IPasswordFieldViewProps",
            "moduleName": "ui/form/PasswordField/PasswordField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IPasswordFieldProps",
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": true,
                    "type": "{disabled: boolean, name: string, placeholder: string, type: string, value: string | number, onChange: null}",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "securityLevel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"success\" | \"warning\" | \"danger\"",
                    "example": null
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "showSecurityBar",
                    "decorators": [],
                    "description": "Если true, то отображается шкала сложности пароля",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "showSecurityIcon",
                    "decorators": [],
                    "description": "Если true, то отображается иконка скрытия/показа пароля",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onShowButtonClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IRadioFieldProps": {
            "name": "IRadioFieldProps",
            "moduleName": "ui/form/RadioField/RadioField",
            "title": "RadioField",
            "description": "\nКомпонент RadioField представляет собой элемент выбора типа \"radio\". Он позволяет пользователю выбрать один вариант из нескольких предложенных.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "checked",
                    "decorators": [],
                    "description": "Флаг определяющий включен ли элемент",
                    "required": false,
                    "type": "boolean",
                    "example": "{'true'}",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "any",
                    "example": "{onKeyDown: ...}",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IRadioFieldViewProps": {
            "name": "IRadioFieldViewProps",
            "moduleName": "ui/form/RadioField/RadioField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IRadioFieldProps",
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "checked",
                    "decorators": [],
                    "description": "Флаг определяющий включен ли элемент",
                    "required": false,
                    "type": "boolean",
                    "example": "{'true'}"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": true,
                    "type": "{checked: boolean, disabled: boolean, name: string, type: string, onChange: null}",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IRadioListFieldProps": {
            "name": "IRadioListFieldProps",
            "moduleName": "ui/form/RadioListField/RadioListField",
            "title": "RadioListField",
            "description": "Список с радиокнопками. Используется в формах для выбора одного значения.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IDataProviderConfig",
                "Omit<IDataSelectConfig",
                "'items'>",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "Настройки поиска",
                    "required": false,
                    "type": "boolean | IAutoCompleteConfig",
                    "example": "{\n enable: true,\n minLength: 2,\n delay: 100\n}",
                    "defaultValue": null
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.",
                    "required": false,
                    "type": "IDataProvider",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "groupAttribute",
                    "decorators": [],
                    "description": "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится",
                    "required": false,
                    "type": "string",
                    "example": "items",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialSelectedIds",
                    "decorators": [],
                    "description": "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`",
                    "required": false,
                    "type": "number[]",
                    "example": "[1, 22]",
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "any",
                    "example": "{onKeyDown: ...}",
                    "defaultValue": null
                },
                {
                    "name": "inputValue",
                    "decorators": [],
                    "description": "Значение поля в форме",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": false,
                    "type": "string | {} | string | number | {id: string | number | boolean, label: string | any}[]",
                    "example": "[\n {\n  id: 1,\n  label: 'Krasnoyarsk'\n },\n {\n  id: 2,\n  label: 'Moscow'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Возможность множественного выбора",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "orientation",
                    "decorators": [],
                    "description": "Ориентация списка",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": false,
                    "type": "string",
                    "example": "id",
                    "defaultValue": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Текст запроса",
                    "required": false,
                    "type": "string",
                    "example": "'some text'",
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectFirst",
                    "decorators": [],
                    "description": "Сделать активным первый элемент в списке",
                    "required": false,
                    "type": "any",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "Список с идентификаторами выбранных элементов",
                    "required": false,
                    "type": "any",
                    "example": "[1, 4]",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": " Список со всеми элементами",
                    "required": false,
                    "type": "IDataSelectItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IRadioListFieldViewProps": {
            "name": "IRadioListFieldViewProps",
            "moduleName": "ui/form/RadioListField/RadioListField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Коллекция ошибок",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, name: string, type: string, onChange: null}",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, id: string | number | boolean, isHovered: boolean, isSelected: boolean, label: string}[]",
                    "example": null
                },
                {
                    "name": "orientation",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onItemSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderRadio",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Element",
                    "example": null,
                    "parameters": [
                        {
                            "name": "radioProps",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IRadioFieldViewProps",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IRateFieldItem": {
            "name": "IRateFieldItem",
            "moduleName": "ui/form/RateField/RateField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                }
            ],
            "methods": []
        },
        "IRateFieldProps": {
            "name": "IRateFieldProps",
            "moduleName": "ui/form/RateField/RateField",
            "title": "RateField",
            "description": "\nПоле для проставления рейтинга\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "allowClear",
                    "decorators": [],
                    "description": "Возможность полностью сбрасывать рейтинг, при повторном нажатии на звезду",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": null
                },
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Значок (бэйдж) с заголовком.",
                    "required": false,
                    "type": "{title: string}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Количество звезд по умолчанию",
                    "required": false,
                    "type": "number",
                    "example": "4",
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemsCount",
                    "decorators": [],
                    "description": "Максимальное количество звезд",
                    "required": false,
                    "type": "number",
                    "example": "5",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IRateFieldViewProps": {
            "name": "IRateFieldViewProps",
            "moduleName": "ui/form/RateField/RateField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IRateFieldProps",
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "allowClear",
                    "decorators": [],
                    "description": "Возможность полностью сбрасывать рейтинг, при повторном нажатии на звезду",
                    "required": false,
                    "type": "boolean",
                    "example": "false"
                },
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Значок (бэйдж) с заголовком.",
                    "required": false,
                    "type": "{title: string}",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Количество звезд по умолчанию",
                    "required": false,
                    "type": "number",
                    "example": "4"
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IRateFieldItem[]",
                    "example": null
                },
                {
                    "name": "itemsCount",
                    "decorators": [],
                    "description": "Максимальное количество звезд",
                    "required": false,
                    "type": "number",
                    "example": "5"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IRateFieldItem",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onItemSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IReCaptchaFieldProps": {
            "name": "IReCaptchaFieldProps",
            "moduleName": "ui/form/ReCaptchaField/ReCaptchaField",
            "title": "ReCaptchaField",
            "description": "Компонент для использования ReCAPTCHA v3 от Google.\nЧтобы добавить ReCAPTCHA в форму необходимо:\n1) Передать siteKey в ResourceComponent.\n2) Поместить на сайт скрипт от Google с помощью метода экземпляра ResourceComponent\n(скрипт анализирует поведение пользователя).\n3) Разместить ReCaptchaField внутри компонента Form. На событие формы onSubmit отправится запрос в Google для\nполучения токена. Далее этот токен с остальными данными формы отправится на бэкенд.\nСам компонент отображает ссылки на политику конфиденциальности и условия использования сервисов Google.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Положение значка ReCaptcha. Может быть 'bottomright' (внизу справа), 'bottomleft' (внизу слева) или 'inline' (встроенный).",
                    "required": false,
                    "type": "\"inline\" | \"bottomright\" | \"bottomleft\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "hl",
                    "decorators": [],
                    "description": "Языковой код для ReCaptcha.",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isolated",
                    "decorators": [],
                    "description": "Флаг, указывающий на изоляцию ReCaptcha.",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик события изменения ReCaptcha.",
                    "required": false,
                    "type": "VoidFunction",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "onErrored",
                    "decorators": [],
                    "description": "Обработчик события ошибки ReCaptcha.",
                    "required": false,
                    "type": "VoidFunction",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "onExpired",
                    "decorators": [],
                    "description": "Обработчик события истечения срока действия ReCaptcha.",
                    "required": false,
                    "type": "VoidFunction",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "ref",
                    "decorators": [],
                    "description": "Ссылка на ref-объект React для ReCaptcha.",
                    "required": false,
                    "type": "RefObject",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "sitekey",
                    "decorators": [],
                    "description": "Ключ сайта ReCaptcha. По умолчанию process.env.APP_RECAPTCHA_SITE_KEY",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "stoken",
                    "decorators": [],
                    "description": "Защищенный токен для ReCaptcha.",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "tabindex",
                    "decorators": [],
                    "description": "Значение tabindex для ReCaptcha.",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Тип ReCaptcha. Может быть 'image' (изображение) или 'audio' (аудио).",
                    "required": false,
                    "type": "\"audio\" | \"image\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "asyncScriptOnLoad",
                    "decorators": [],
                    "description": "Функция, вызываемая после загрузки асинхронного скрипта.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IReCaptchaFieldViewProps": {
            "name": "IReCaptchaFieldViewProps",
            "moduleName": "ui/form/ReCaptchaField/ReCaptchaField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IReCaptchaFieldProps",
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Положение значка ReCaptcha. Может быть 'bottomright' (внизу справа), 'bottomleft' (внизу слева) или 'inline' (встроенный).",
                    "required": false,
                    "type": "\"inline\" | \"bottomright\" | \"bottomleft\"",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "hl",
                    "decorators": [],
                    "description": "Языковой код для ReCaptcha.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isolated",
                    "decorators": [],
                    "description": "Флаг, указывающий на изоляцию ReCaptcha.",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик события изменения ReCaptcha.",
                    "required": false,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "onErrored",
                    "decorators": [],
                    "description": "Обработчик события ошибки ReCaptcha.",
                    "required": false,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "onExpired",
                    "decorators": [],
                    "description": "Обработчик события истечения срока действия ReCaptcha.",
                    "required": false,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "recaptchaOptions",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{badge: \"inline\" | \"bottomright\" | \"bottomleft\", hl: string, isolated: boolean, onChange: VoidFunction, onErrored: VoidFunction, onExpired: VoidFunction, ref: RefObject, stoken: string, tabindex: number, type: \"audio\" | \"image\", asyncScriptOnLoad: null}",
                    "example": null
                },
                {
                    "name": "ref",
                    "decorators": [],
                    "description": "Ссылка на ref-объект React для ReCaptcha.",
                    "required": false,
                    "type": "RefObject",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "sitekey",
                    "decorators": [],
                    "description": "Ключ сайта ReCaptcha. По умолчанию process.env.APP_RECAPTCHA_SITE_KEY",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "stoken",
                    "decorators": [],
                    "description": "Защищенный токен для ReCaptcha.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "tabindex",
                    "decorators": [],
                    "description": "Значение tabindex для ReCaptcha.",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Тип ReCaptcha. Может быть 'image' (изображение) или 'audio' (аудио).",
                    "required": false,
                    "type": "\"audio\" | \"image\"",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "asyncScriptOnLoad",
                    "decorators": [],
                    "description": "Функция, вызываемая после загрузки асинхронного скрипта.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "ISliderFieldProps": {
            "name": "ISliderFieldProps",
            "moduleName": "ui/form/SliderField/SliderField",
            "title": "SliderField",
            "description": "Компонент с ползунком для выбора числового значения в пределах указанного промежутка",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Значение по-умолчанию при первом рендере. Для isRange=false используется number, для isRange=true - number[]",
                    "required": false,
                    "type": "number | number[]",
                    "example": "1",
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRange",
                    "decorators": [],
                    "description": "Делает слайдер с двумя значениями",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "marks",
                    "decorators": [],
                    "description": "Метки на ползунке. В объекте '{'key: value'}' key определяет положение, а value определяет, что будет отображаться.\nЕсли вы хотите задать стиль определенной точки метки, значением должен быть объект,\nсодержащий свойства style и label.",
                    "required": false,
                    "type": "Record",
                    "example": "{\n min: 20,\n 40: 40,\n max: 100\n}",
                    "defaultValue": null
                },
                {
                    "name": "max",
                    "decorators": [],
                    "description": "Максимальное значение в слайдере",
                    "required": false,
                    "type": "number",
                    "example": "100",
                    "defaultValue": null
                },
                {
                    "name": "min",
                    "decorators": [],
                    "description": "Минимальное значение в слайдере",
                    "required": false,
                    "type": "number",
                    "example": "0",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "sliderProps",
                    "decorators": [],
                    "description": "Свойства для компонента слайдера",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "step",
                    "decorators": [],
                    "description": "Длина шага слайдера",
                    "required": false,
                    "type": "number",
                    "example": "10",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "valuePostfix",
                    "decorators": [],
                    "description": "Любое строковое значение после значения состояния слайдера в всплывающем окошке.",
                    "required": false,
                    "type": "string",
                    "example": "'%'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onAfterChange",
                    "decorators": [],
                    "description": "Функция, вызываемая после отпускания tip'а у слайдера (при событии onmouseup)",
                    "required": false,
                    "type": "void",
                    "example": "{\n () => console.log('Slider handler is released')\n}",
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ISliderFieldViewProps": {
            "name": "ISliderFieldViewProps",
            "moduleName": "ui/form/SliderField/SliderField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ISliderFieldProps",
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Значение по-умолчанию при первом рендере. Для isRange=false используется number, для isRange=true - number[]",
                    "required": false,
                    "type": "number | number[]",
                    "example": "1"
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "isRange",
                    "decorators": [],
                    "description": "Делает слайдер с двумя значениями",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "marks",
                    "decorators": [],
                    "description": "Метки на ползунке. В объекте '{'key: value'}' key определяет положение, а value определяет, что будет отображаться.\nЕсли вы хотите задать стиль определенной точки метки, значением должен быть объект,\nсодержащий свойства style и label.",
                    "required": false,
                    "type": "Record",
                    "example": "{\n min: 20,\n 40: 40,\n max: 100\n}"
                },
                {
                    "name": "max",
                    "decorators": [],
                    "description": "Максимальное значение в слайдере",
                    "required": false,
                    "type": "number",
                    "example": "100"
                },
                {
                    "name": "min",
                    "decorators": [],
                    "description": "Минимальное значение в слайдере",
                    "required": false,
                    "type": "number",
                    "example": "0"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "rangeDefaultValue",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number[]",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "sliderDefaultValue",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "sliderProps",
                    "decorators": [],
                    "description": "Свойства для компонента слайдера",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "step",
                    "decorators": [],
                    "description": "Длина шага слайдера",
                    "required": false,
                    "type": "number",
                    "example": "10"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valuePostfix",
                    "decorators": [],
                    "description": "Любое строковое значение после значения состояния слайдера в всплывающем окошке.",
                    "required": false,
                    "type": "string",
                    "example": "'%'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onAfterChange",
                    "decorators": [],
                    "description": "Функция, вызываемая после отпускания tip'а у слайдера (при событии onmouseup)",
                    "required": false,
                    "type": "void",
                    "example": "{\n () => console.log('Slider handler is released')\n}",
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ISwitcherFieldProps": {
            "name": "ISwitcherFieldProps",
            "moduleName": "ui/form/SwitcherField/SwitcherField",
            "title": "SwitcherField",
            "description": "Список с кнопками. Используется для выбора одного значения.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperInputProps",
                "IDataProviderConfig",
                "Omit<IDataSelectConfig",
                "'items'>",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "autoComplete",
                    "decorators": [],
                    "description": "Настройки поиска",
                    "required": false,
                    "type": "boolean | IAutoCompleteConfig",
                    "example": "{\n enable: true,\n minLength: 2,\n delay: 100\n}",
                    "defaultValue": null
                },
                {
                    "name": "autoFetch",
                    "decorators": [],
                    "description": "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dataProvider",
                    "decorators": [],
                    "description": "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.",
                    "required": false,
                    "type": "IDataProvider",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "groupAttribute",
                    "decorators": [],
                    "description": "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится",
                    "required": false,
                    "type": "string",
                    "example": "items",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialSelectedIds",
                    "decorators": [],
                    "description": "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`",
                    "required": false,
                    "type": "number[]",
                    "example": "[1, 22]",
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "any",
                    "example": "{onKeyDown: ...}",
                    "defaultValue": null
                },
                {
                    "name": "inputValue",
                    "decorators": [],
                    "description": "Значение поля в форме",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов",
                    "required": false,
                    "type": "string | {} | string | number | {id: string | number | boolean, label: string | any}[]",
                    "example": "[\n {\n  id: 1,\n  label: 'Krasnoyarsk'\n },\n {\n  id: 2,\n  label: 'Moscow'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "multiple",
                    "decorators": [],
                    "description": "Возможность множественного выбора",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": false,
                    "type": "string",
                    "example": "id",
                    "defaultValue": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Текст запроса",
                    "required": false,
                    "type": "string",
                    "example": "'some text'",
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectFirst",
                    "decorators": [],
                    "description": "Сделать активным первый элемент в списке",
                    "required": false,
                    "type": "any",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "Список с идентификаторами выбранных элементов",
                    "required": false,
                    "type": "any",
                    "example": "[1, 4]",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "sourceItems",
                    "decorators": [],
                    "description": " Список со всеми элементами",
                    "required": false,
                    "type": "IDataSelectItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ISwitcherFieldViewProps": {
            "name": "ISwitcherFieldViewProps",
            "moduleName": "ui/form/SwitcherField/SwitcherField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFieldWrapperOutputProps",
                "Omit<ISwitcherFieldProps",
                "'items'>"
            ],
            "properties": [
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Коллекция ошибок",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hoveredId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{disabled: boolean, name: string, type: string, onChange: null}",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ISwitcherItem[]",
                    "example": null
                },
                {
                    "name": "selectedIds",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any[]",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onItemHover",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onItemSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ISwitcherItem": {
            "name": "ISwitcherItem",
            "moduleName": "ui/form/SwitcherField/SwitcherField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string | number | boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {checked: string, unchecked: string}",
                    "example": null
                }
            ],
            "methods": []
        },
        "ITextFieldProps": {
            "name": "ITextFieldProps",
            "moduleName": "ui/form/TextField/TextField",
            "title": "TextField",
            "description": "Поле для ввода нескольких строк текста",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IBaseFieldProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": false,
                    "type": "InputHTMLAttributes",
                    "example": "{ onKeyDown: ... }",
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "submitOnEnter",
                    "decorators": [],
                    "description": "Отправлять форму при нажатии на кнопку `enter`",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITextFieldViewProps": {
            "name": "ITextFieldViewProps",
            "moduleName": "ui/form/TextField/TextField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ITextFieldProps",
                "IFieldWrapperOutputProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Параметры для input элемента",
                    "required": false,
                    "type": "IInputParams",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для элемента input",
                    "required": true,
                    "type": "{disabled: boolean, name: string, onKeyUp: KeyboardEventHandler, placeholder: string, value: string | number, onChange: null}",
                    "example": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'"
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}"
                },
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text..."
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "showClear",
                    "decorators": [],
                    "description": "Показывать иконку очищения поля",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "submitOnEnter",
                    "decorators": [],
                    "description": "Отправлять форму при нажатии на кнопку `enter`",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения",
                    "required": false,
                    "type": "{}",
                    "example": "{\n customHandler: () => {...}\n}"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Callback-функция, которая вызывается при изменении данных",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITimeFieldProps": {
            "name": "ITimeFieldProps",
            "moduleName": "ui/form/TimeField/TimeField",
            "title": "TimeField",
            "description": "Поле для выбора времени",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateInput",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dateInUTC",
                    "decorators": [],
                    "description": "Задано ли значение даты в часовом поясе UTC\n(пример: с бэкенда приходит дата в UTC, но нужно отбразить ее в локальном времени.\nВ этом случае dateInUTC = true, а useUTC = false)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "displayFormat",
                    "decorators": [],
                    "description": "Формат даты показываемый пользователю",
                    "required": false,
                    "type": "string",
                    "example": "DD.MM.YYYY",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка, отображаемая в правой части поля",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Свойства поля props.input",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства, передаваемые для поля во view",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "noBorder",
                    "decorators": [],
                    "description": "Отключить border вокруг элемента",
                    "required": false,
                    "type": "boolean",
                    "example": "'true'",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Подсказка для поля",
                    "required": false,
                    "type": "string",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "timePanelViewProps",
                    "decorators": [],
                    "description": "Свойства для компонента панели времени",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "useUTC",
                    "decorators": [],
                    "description": "Приводить значение даты к часовому поясу UTC\n(пример: с бэкенда приходит дата в какой-либо временной зоне (не UTC), но нужно отбразить ее\nв часовом поясе UTC. В этом случае dateInUTC = false, а useUTC = true)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для view компонента",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Дополнительная функция, срабатывающая при изменении props.input",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITimeFieldViewProps": {
            "name": "ITimeFieldViewProps",
            "moduleName": "ui/form/TimeField/TimeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateOutput",
                "Pick<ITimeFieldProps",
                "'size' | 'errors' | 'showRemove' | 'noBorder' | 'className' | 'timePanelViewProps' | 'style'>"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для поля во view",
                    "required": true,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "Показать или скрыть выпадающую панель",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "noBorder",
                    "decorators": [],
                    "description": "Отключить border вокруг элемента",
                    "required": false,
                    "type": "boolean",
                    "example": "'true'"
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "timePanelViewProps",
                    "decorators": [],
                    "description": "Свойства для компонента панели времени",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "Функция очищает значение поля",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция закрывает выпадающую панель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onNow",
                    "decorators": [],
                    "description": "Функция возвращает текущее значение времени (дата + время)",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "ITimePanelViewProps": {
            "name": "ITimePanelViewProps",
            "moduleName": "ui/form/TimeField/TimeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Pick<ITimeFieldViewProps",
                "'value' | 'onClose' | 'onNow' | 'onSelect' | 'className'>"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "showHeader",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showNow",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция закрывает выпадающую панель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onNow",
                    "decorators": [],
                    "description": "Функция возвращает текущее значение времени (дата + время)",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "ITimeRangeFieldProps": {
            "name": "ITimeRangeFieldProps",
            "moduleName": "ui/form/TimeRangeField/TimeRangeField",
            "title": "TimeRangeField",
            "description": "\nКомпонент TimeRangeField представляет собой поле выбора временного диапазона, состоящего из двух элементов ввода времени (from и to).\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateInput",
                "Omit<IFieldWrapperInputProps",
                "'attribute'>",
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'isVisible'",
                    "defaultValue": null
                },
                {
                    "name": "attributeFrom",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'fromTime'",
                    "defaultValue": null
                },
                {
                    "name": "attributeTo",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "'toTime'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "date",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dateInUTC",
                    "decorators": [],
                    "description": "Задано ли значение даты в часовом поясе UTC\n(пример: с бэкенда приходит дата в UTC, но нужно отбразить ее в локальном времени.\nВ этом случае dateInUTC = true, а useUTC = false)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "displayFormat",
                    "decorators": [],
                    "description": "Формат даты показываемый пользователю",
                    "required": false,
                    "type": "string",
                    "example": "DD.MM.YYYY",
                    "defaultValue": null
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']",
                    "defaultValue": null
                },
                {
                    "name": "fieldLayoutClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для обертки FieldLayout",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hasInitialFocus",
                    "decorators": [],
                    "description": "Устанавливать ли фокус и показывать панель времени сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, которая отобразится рядом с полем",
                    "required": false,
                    "type": "string",
                    "example": "'Only english letters'",
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка, отображаемая в правой части поля",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day",
                    "defaultValue": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Input ID для связи поля с label",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "Свойства поля props.input",
                    "required": false,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства, передаваемые для поля во view",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputPropsFrom",
                    "decorators": [],
                    "description": "Свойства для input элемента from",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "inputPropsTo",
                    "decorators": [],
                    "description": "Свойства для input элемента to",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isRenderWithoutFieldLayout",
                    "decorators": [],
                    "description": "Возможность отрендерить поле без обертки в компонент FieldLayout",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Название поля либо отмена отображение поля (false)",
                    "required": false,
                    "type": "any",
                    "example": "'Visible'",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "pickerProps",
                    "decorators": [],
                    "description": "Свойства для компонента DayPickerInput",
                    "required": false,
                    "type": "any",
                    "example": "{\n dayPickerProps: {\n  showWeekNumbers: true\n }",
                    "defaultValue": null
                },
                {
                    "name": "placeholder",
                    "decorators": [],
                    "description": "Placeholder подсказка",
                    "required": false,
                    "type": "any",
                    "example": "Your text...",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс, который добавится к аттрибуту (названию) поля в форме",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "required",
                    "decorators": [],
                    "description": "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "timePanelViewProps",
                    "decorators": [],
                    "description": "Свойства для компонента панели времени",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "useUTC",
                    "decorators": [],
                    "description": "Приводить значение даты к часовому поясу UTC\n(пример: с бэкенда приходит дата в какой-либо временной зоне (не UTC), но нужно отбразить ее\nв часовом поясе UTC. В этом случае dateInUTC = false, а useUTC = true)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для поля",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "valueFormat",
                    "decorators": [],
                    "description": "Формат даты отправляемый на сервер",
                    "required": false,
                    "type": "string",
                    "example": "YYYY-MM-DD",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для view компонента",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Дополнительная функция, срабатывающая при изменении props.input",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITimeRangeFieldViewProps": {
            "name": "ITimeRangeFieldViewProps",
            "moduleName": "ui/form/TimeRangeField/TimeRangeField",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IDateInputStateOutput",
                "Pick<ITimeRangeFieldProps",
                "'size' | 'errors' | 'showRemove' | 'className' | 'timePanelViewProps' | 'disabled' | 'style' | 'icon'>",
                "Omit<IFieldWrapperOutputProps",
                "'input'>"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "componentId",
                    "decorators": [],
                    "description": "Id компонента",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит элемент в состояние \"не активен\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "errors",
                    "decorators": [],
                    "description": "Ошибки в поле",
                    "required": false,
                    "type": "string[]",
                    "example": "['Error text']"
                },
                {
                    "name": "errorsFrom",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "errorsTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Id формы",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка, отображаемая в правой части поля",
                    "required": false,
                    "type": "string | boolean",
                    "example": "calendar-day"
                },
                {
                    "name": "inputFrom",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "inputProps",
                    "decorators": [],
                    "description": "Свойства для поля во view",
                    "required": true,
                    "type": "{name: string, value: any, onChange: null}",
                    "example": null
                },
                {
                    "name": "inputTo",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "Показать или скрыть выпадающую панель",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "showRemove",
                    "decorators": [],
                    "description": "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер поля",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "timePanelFromViewProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ITimePanelViewProps",
                    "example": null
                },
                {
                    "name": "timePanelToViewProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "ITimePanelViewProps",
                    "example": null
                },
                {
                    "name": "timePanelViewProps",
                    "decorators": [],
                    "description": "Свойства для компонента панели времени",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onClear",
                    "decorators": [],
                    "description": "Функция очищает значение поля",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция закрывает выпадающую панель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onNow",
                    "decorators": [],
                    "description": "Функция возвращает текущее значение времени (дата + время)",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IBooleanFormatterProps": {
            "name": "IBooleanFormatterProps",
            "moduleName": "ui/format/BooleanFormatter/BooleanFormatter",
            "title": "BooleanFormatter",
            "description": "\nКомпонент BooleanFormatter предназначен для форматирования значения типа boolean, string или number.\nОн позволяет кастомизировать отображение значения, используя переданный view React компонент.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для BooleanFormatter",
                    "required": false,
                    "type": "string | number | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IBooleanFormatterPropsView": {
            "name": "IBooleanFormatterPropsView",
            "moduleName": "ui/format/BooleanFormatter/BooleanFormatter",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | number | boolean",
                    "example": null
                }
            ],
            "methods": []
        },
        "IDateFormatterProps": {
            "name": "IDateFormatterProps",
            "moduleName": "ui/format/DateFormatter/DateFormatter",
            "title": "DateFormatter",
            "description": "\nКомпонент DateFormatter предназначен для форматирования даты с использованием заданного формата.\nОн позволяет кастомизировать отображение даты, используя переданный view React компонент.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "format",
                    "decorators": [],
                    "description": "Формат даты",
                    "required": false,
                    "type": "string",
                    "example": "LL",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Дата",
                    "required": false,
                    "type": "any",
                    "example": "2023-09-11",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения колонки",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IDateTimeFormatterProps": {
            "name": "IDateTimeFormatterProps",
            "moduleName": "ui/format/DateTimeFormatter/DateTimeFormatter",
            "title": "DateTimeFormatter",
            "description": "\nКомпонент DateTimeFormatter предназначен для форматирования даты и времени с использованием заданного формата.\nОн позволяет кастомизировать отображение даты и времени, используя переданный view React компонент.\n",
            "tags": {},
            "defaultProps": {
                "format": "'LLL'"
            },
            "extends": [],
            "properties": [
                {
                    "name": "format",
                    "decorators": [],
                    "description": "Формат даты",
                    "required": false,
                    "type": "string",
                    "example": "LLL",
                    "defaultValue": "'LLL'"
                },
                {
                    "name": "timeZone",
                    "decorators": [],
                    "description": "Показывать ли дату учитываю временную зону",
                    "required": false,
                    "type": "string | boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Дата",
                    "required": false,
                    "type": "any",
                    "example": "2023-09-11",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения колонки",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IEnumFormatterProps": {
            "name": "IEnumFormatterProps",
            "moduleName": "ui/format/EnumFormatter/EnumFormatter",
            "title": "IEnumFormatterProps",
            "description": "\nКомпонент EnumFormatter предназначен для форматирования перечисления элементов с использованием заданного формата.\nОн позволяет кастомизировать отображение элементов, используя переданный view React компонент.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Перечисление элементов.\n1) Может быть строкой вида: `app.geo.enums.Cities`\n2) Массивом: ['{'id: 1, label: \"London\"'}']",
                    "required": false,
                    "type": "string | {} | string | number | {id: string | number | boolean, label: string | any}[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Уникальный идентификатор элемента из `items`",
                    "required": false,
                    "type": "string | number",
                    "example": "unique label",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения колонки",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IFileSizeProps": {
            "name": "IFileSizeProps",
            "moduleName": "ui/format/FileSize/FileSize",
            "title": "FileSize",
            "description": "\nКомпонент FileSize предназначен для форматирования размера файла в человеко-читаемом формате.\nОн позволяет кастомизировать отображение размера файла, используя переданный view React компонент.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "showZero",
                    "decorators": [],
                    "description": "Если не указан размер файла, то в случае, если showZero = true\nто будет показан `0`, иначе пустая строка",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Размер файла",
                    "required": false,
                    "type": "any",
                    "example": "6920",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IFormatProps": {
            "name": "IFormatProps",
            "moduleName": "ui/format/Format/Format",
            "title": "IFormatProps",
            "description": "\nКомпонент Format предназначен для форматирования значения на основе заданного форматтера.\nОн позволяет кастомизировать отображение значения, используя переданный view React компонент.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "component",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | {}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "emptyText",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "getFormatter",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "ui",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IMoneyFormatterProps": {
            "name": "IMoneyFormatterProps",
            "moduleName": "ui/format/MoneyFormatter/MoneyFormatter",
            "title": "IMoneyFormatterProps",
            "description": "\nКомпонент MoneyFormatter предназначен для форматирования денежных значений с учетом валюты и округления.\nОн позволяет кастомизировать отображение денежного значения, используя переданный view React компонент.\n",
            "tags": {},
            "defaultProps": {
                "precision": "0",
                "scale": "2"
            },
            "extends": [],
            "properties": [
                {
                    "name": "currency",
                    "decorators": [],
                    "description": "Валюта @enum '{eur, rub, usd}'",
                    "required": false,
                    "type": "string",
                    "example": "rub",
                    "defaultValue": null
                },
                {
                    "name": "precision",
                    "decorators": [],
                    "description": "Разрядность (при передаче int в значении)",
                    "required": false,
                    "type": "number",
                    "example": "2",
                    "defaultValue": "0"
                },
                {
                    "name": "scale",
                    "decorators": [],
                    "description": "Округление числа",
                    "required": false,
                    "type": "number",
                    "example": "2",
                    "defaultValue": "2"
                },
                {
                    "name": "value",
                    "decorators": [],
                    "description": "Значение для MoneyFormatter",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IHeaderProps": {
            "name": "IHeaderProps",
            "moduleName": "ui/layout/Header/Header",
            "title": "IHeaderProps",
            "description": "\nКомпонент Header представляет собой верхнюю часть макета страницы.\nОн может содержать логотип и навигацию, а также кастомизироваться с помощью переданного view React компонента.\n",
            "tags": {},
            "defaultProps": {
                "size": "'md'"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "authParams",
                    "decorators": [],
                    "description": "Параметры авторизации.",
                    "required": false,
                    "type": "{buttonProps: IButtonProps, isAuth: boolean, modal: IModalProps, toRoute: string}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "burgerMenu",
                    "decorators": [],
                    "description": "Свойства для бургер-меню.",
                    "required": false,
                    "type": "{content: ReactElement, links: ILinkProps}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "logo",
                    "decorators": [],
                    "description": "Свойства для логотипа.",
                    "required": false,
                    "type": "{className: string, icon: string | ReactElement, linkProps: ILinkProps, title: string}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "nav",
                    "decorators": [],
                    "description": "Свойства для навигации",
                    "required": false,
                    "type": "INavProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "'md'"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "user",
                    "decorators": [],
                    "description": "Информация о пользователе.",
                    "required": false,
                    "type": "{avatar: IAvatarProps, menu: IMenuProps, name: string}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IHeaderViewProps": {
            "name": "IHeaderViewProps",
            "moduleName": "ui/layout/Header/Header",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IHeaderProps"
            ],
            "properties": [
                {
                    "name": "authParams",
                    "decorators": [],
                    "description": "Параметры авторизации.",
                    "required": false,
                    "type": "{buttonProps: IButtonProps, isAuth: boolean, modal: IModalProps, toRoute: string}",
                    "example": null
                },
                {
                    "name": "burgerMenu",
                    "decorators": [],
                    "description": "Свойства для бургер-меню.",
                    "required": false,
                    "type": "{content: ReactElement, links: ILinkProps}",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isBurgerOpened",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "logo",
                    "decorators": [],
                    "description": "Свойства для логотипа.",
                    "required": false,
                    "type": "{className: string, icon: string | ReactElement, linkProps: ILinkProps, title: string}",
                    "example": null
                },
                {
                    "name": "nav",
                    "decorators": [],
                    "description": "Свойства для навигации",
                    "required": false,
                    "type": "INavProps",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "toggleBurger",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "user",
                    "decorators": [],
                    "description": "Информация о пользователе.",
                    "required": false,
                    "type": "{avatar: IAvatarProps, menu: IMenuProps, name: string}",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": []
        },
        "ILoaderProps": {
            "name": "ILoaderProps",
            "moduleName": "ui/layout/Loader/Loader",
            "title": "ILoaderProps",
            "description": "\nКомпонент Loader представляет собой индикатор загрузки,\nкоторый может использоваться для обозначения процесса загрузки данных или выполнения операции.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Название цвета",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер элемента",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "INotificationsItemViewProps": {
            "name": "INotificationsItemViewProps",
            "moduleName": "ui/layout/Notifications/Notifications",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "INotificationItem"
            ],
            "properties": [
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор уведомления",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "level",
                    "decorators": [],
                    "description": "Цвет всплывающего уведомления",
                    "required": false,
                    "type": "string",
                    "example": "warning"
                },
                {
                    "name": "message",
                    "decorators": [],
                    "description": "Сообщение во всплывающем уведомлении",
                    "required": false,
                    "type": "string",
                    "example": "Сохранено!"
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "INotificationsProps": {
            "name": "INotificationsProps",
            "moduleName": "ui/layout/Notifications/Notifications",
            "title": "Notifications",
            "description": "\nКомпонент Notifications представляет собой контейнер для отображения всплывающих уведомлений.\n",
            "tags": {},
            "defaultProps": {
                "closeTimeoutMs": "1500"
            },
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "closeTimeoutMs",
                    "decorators": [],
                    "description": "Задержка перед закрытием",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": "1500"
                },
                {
                    "name": "initialFlashes",
                    "decorators": [],
                    "description": "Исходные уведомления",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения элемента",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "notifications",
                    "decorators": [],
                    "description": "Коллекция уведомлений",
                    "required": false,
                    "type": "INotificationItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Позиционирование элемента уведомления",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "INotificationsViewProps": {
            "name": "INotificationsViewProps",
            "moduleName": "ui/layout/Notifications/Notifications",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "notifications",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "INotificationItem[]",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IProgressBarProps": {
            "name": "IProgressBarProps",
            "moduleName": "ui/layout/ProgressBar/ProgressBar",
            "title": "ProgressBar",
            "description": "Progress bar. Отображает текущий прогресс какой-либо операции",
            "tags": {},
            "defaultProps": {
                "label": {},
                "showLabel": "true",
                "size": "'medium'",
                "status": "'normal'",
                "type": "'line'"
            },
            "extends": [],
            "properties": [
                {
                    "name": "percent",
                    "decorators": [],
                    "description": "Прогресс в процентах",
                    "required": true,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "showLabel",
                    "decorators": [],
                    "description": "Флаг, определяющий показывать ли лейбл",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер компонента",
                    "required": false,
                    "type": "\"small\" | \"large\" | \"medium\"",
                    "example": null,
                    "defaultValue": "'medium'"
                },
                {
                    "name": "status",
                    "decorators": [],
                    "description": "Статус компонента",
                    "required": false,
                    "type": "\"success\" | \"normal\" | \"exception\"",
                    "example": null,
                    "defaultValue": "'normal'"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Тип компонента - круг или линия",
                    "required": false,
                    "type": "\"circle\" | \"line\"",
                    "example": null,
                    "defaultValue": "'line'"
                }
            ],
            "methods": [
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Функция, позволяющая задавать собственные иконки в зависимости от прогресса и статуса",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "parameters": [
                        {
                            "name": "status",
                            "decorators": [],
                            "description": "Статус компонента",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "percent",
                            "decorators": [],
                            "description": "Прогресс в процентах\n",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Функция, позволяющая изменить генерацию лейбла",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "percent",
                            "decorators": [],
                            "description": "Прогресс в процентах\n",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IProgressBarViewProps": {
            "name": "IProgressBarViewProps",
            "moduleName": "ui/layout/ProgressBar/ProgressBar",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "label",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "percent",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"small\" | \"large\" | \"medium\"",
                    "example": null
                },
                {
                    "name": "status",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"success\" | \"normal\" | \"exception\"",
                    "example": null
                }
            ],
            "methods": []
        },
        "ISidebarItem": {
            "name": "ISidebarItem",
            "moduleName": "ui/layout/Sidebar/Sidebar",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "INavItem"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "border",
                    "decorators": [],
                    "description": "Наличие верней границы у элемента",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?"
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Контент, который отобразиться, если элемент навигации будет активен",
                    "required": false,
                    "type": "any",
                    "example": "ContentComponent"
                },
                {
                    "name": "contentProps",
                    "decorators": [],
                    "description": "Свойства для компонента с контентом",
                    "required": false,
                    "type": "any",
                    "example": "{\n content: 'Some text'\n}"
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор элемента",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "Props для пункта",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "INavItem[]",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст элемента",
                    "required": false,
                    "type": "any",
                    "example": "'Отзывы'"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "Выбор html-тэга, который будет вставлен в DOM",
                    "required": false,
                    "type": "\"a\" | \"button\"",
                    "example": "button"
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank"
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "Цвет текста кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile"
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "Record",
                    "example": "{userId: 52}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit"
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу",
                    "required": false,
                    "type": "string",
                    "example": "https://ya.ru"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения элемента",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Видимость элемента",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Обработчик события нажатия",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ISidebarProps": {
            "name": "ISidebarProps",
            "moduleName": "ui/layout/Sidebar/Sidebar",
            "title": "Sidebar",
            "description": "\nКомпонент Sidebar представляет собой боковое меню с возможностью гибкой настройки\n",
            "tags": {},
            "defaultProps": {
                "hasSeparatedNavItem": "false",
                "isOpenedByDefault": "true"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "footerIcons",
                    "decorators": [],
                    "description": "Массив объектов с информацией об иконках для футера.",
                    "required": false,
                    "type": "IIconProps[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hasSeparatedNavItem",
                    "decorators": [],
                    "description": "Флаг, определяющий, следует ли разделять элементы навигации.",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "false"
                },
                {
                    "name": "isOpenedByDefault",
                    "decorators": [],
                    "description": "Флаг, определяющий, будет ли сайдбар открытым по умолчанию.",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "true"
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы навигации для компонента Nav.",
                    "required": false,
                    "type": "ISidebarItem[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "logo",
                    "decorators": [],
                    "description": "Объект с информацией о логотипе.",
                    "required": false,
                    "type": "{icon: string | ReactElement, label: string}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "menu",
                    "decorators": [],
                    "description": "Props для компонента Menu.",
                    "required": false,
                    "type": "IMenuProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "user",
                    "decorators": [],
                    "description": "Объект с информацией о пользователе.",
                    "required": false,
                    "type": "{name: string, picture: string}",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onClickItem",
                    "decorators": [],
                    "description": "Callback-функция, вызывается при клике на элемент навигации.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "itemId",
                            "decorators": [],
                            "description": "идентификатор элемента навигации, по которому произошел клик.\n",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ISidebarViewProps": {
            "name": "ISidebarViewProps",
            "moduleName": "ui/layout/Sidebar/Sidebar",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ISidebarProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "footerIcons",
                    "decorators": [],
                    "description": "Массив объектов с информацией об иконках для футера.",
                    "required": false,
                    "type": "IIconProps[]",
                    "example": null
                },
                {
                    "name": "hasSeparatedNavItem",
                    "decorators": [],
                    "description": "Флаг, определяющий, следует ли разделять элементы навигации.",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isOpened",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isOpenedByDefault",
                    "decorators": [],
                    "description": "Флаг, определяющий, будет ли сайдбар открытым по умолчанию.",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы навигации для компонента Nav.",
                    "required": false,
                    "type": "ISidebarItem[]",
                    "example": null
                },
                {
                    "name": "logo",
                    "decorators": [],
                    "description": "Объект с информацией о логотипе.",
                    "required": false,
                    "type": "{icon: string | ReactElement, label: string}",
                    "example": null
                },
                {
                    "name": "menu",
                    "decorators": [],
                    "description": "Props для компонента Menu.",
                    "required": false,
                    "type": "IMenuProps",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "toggleSidebar",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "VoidFunction",
                    "example": null
                },
                {
                    "name": "user",
                    "decorators": [],
                    "description": "Объект с информацией о пользователе.",
                    "required": false,
                    "type": "{name: string, picture: string}",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onClickItem",
                    "decorators": [],
                    "description": "Callback-функция, вызывается при клике на элемент навигации.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "itemId",
                            "decorators": [],
                            "description": "идентификатор элемента навигации, по которому произошел клик.\n",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClickNav",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "itemId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ISkeletonProps": {
            "name": "ISkeletonProps",
            "moduleName": "ui/layout/Skeleton/Skeleton",
            "title": "Skeleton",
            "description": "\nКомпонент `Skeleton` представляет собой заглушку для отображения временных данных\nво время загрузки или ожидания загрузки реальных данных.\n",
            "tags": {},
            "defaultProps": {
                "animation": "'pulse'",
                "type": "'text'"
            },
            "extends": [],
            "properties": [
                {
                    "name": "animation",
                    "decorators": [],
                    "description": "Тип анимации",
                    "required": false,
                    "type": "\"pulse\" | \"wave\"",
                    "example": null,
                    "defaultValue": "'pulse'"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительные CSS классы",
                    "required": false,
                    "type": "string",
                    "example": "my-block",
                    "defaultValue": null
                },
                {
                    "name": "height",
                    "decorators": [],
                    "description": "Высота элемента",
                    "required": false,
                    "type": "string | number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Тип компонента",
                    "required": false,
                    "type": "\"text\" | \"circle\" | \"rect\"",
                    "example": null,
                    "defaultValue": "'text'"
                },
                {
                    "name": "width",
                    "decorators": [],
                    "description": "Ширина элемента",
                    "required": false,
                    "type": "string | number",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "ISkeletonViewProps": {
            "name": "ISkeletonViewProps",
            "moduleName": "ui/layout/Skeleton/Skeleton",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "animation",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"pulse\" | \"wave\"",
                    "example": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "height",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "\"text\" | \"circle\" | \"rect\"",
                    "example": null
                },
                {
                    "name": "width",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string | number",
                    "example": null
                }
            ],
            "methods": []
        },
        "ITooltipArrowPosition": {
            "name": "ITooltipArrowPosition",
            "moduleName": "ui/layout/Tooltip/Tooltip",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "bottom",
                    "decorators": [],
                    "description": "Позиция стрелки снизу",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "left",
                    "decorators": [],
                    "description": "Позиция стрелки слева",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "right",
                    "decorators": [],
                    "description": "Позиция стрелки справа",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "top",
                    "decorators": [],
                    "description": "Позиция стрелки сверху",
                    "required": false,
                    "type": "string | number",
                    "example": null
                }
            ],
            "methods": []
        },
        "ITooltipProps": {
            "name": "ITooltipProps",
            "moduleName": "ui/layout/Tooltip/Tooltip",
            "title": "Tooltip",
            "description": "\nКомпонент Tooltip предоставляет всплывающую подсказку для дочерних элементов.\n",
            "tags": {},
            "defaultProps": {
                "animationMs": "300",
                "content": "''",
                "defaultVisible": "false",
                "gap": "16",
                "position": "'top'"
            },
            "extends": [],
            "properties": [
                {
                    "name": "animationMs",
                    "decorators": [],
                    "description": "Время анимации в миллисекундах",
                    "required": false,
                    "type": "number",
                    "example": "200",
                    "defaultValue": "300"
                },
                {
                    "name": "arrowPosition",
                    "decorators": [],
                    "description": "Стили для позиционирования стрелки",
                    "required": false,
                    "type": "ITooltipArrowPosition",
                    "example": "{\n left: 10\n}",
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Текст подсказки",
                    "required": false,
                    "type": "any",
                    "example": "'Это всплывающая подсказка.'",
                    "defaultValue": "''"
                },
                {
                    "name": "defaultVisible",
                    "decorators": [],
                    "description": "Показывать ли подсказку сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "false"
                },
                {
                    "name": "gap",
                    "decorators": [],
                    "description": "Отступ от элемента",
                    "required": false,
                    "type": "number",
                    "example": "16",
                    "defaultValue": "16"
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Позиционирование подсказки, относительно целевого элемента",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "'top'"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Стили для абсолютного позиционирования подсказки",
                    "required": false,
                    "type": "ITooltipStylePosition",
                    "example": null,
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "calculatePosition",
                    "decorators": [],
                    "description": "Рассчет позиции подсказки",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "tooltipDimensions",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "arrowDimensions",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITooltipStylePosition": {
            "name": "ITooltipStylePosition",
            "moduleName": "ui/layout/Tooltip/Tooltip",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "left",
                    "decorators": [],
                    "description": "Позиция Tooltip слева",
                    "required": true,
                    "type": "number | \"unset\"",
                    "example": null
                },
                {
                    "name": "right",
                    "decorators": [],
                    "description": "Позиция Tooltip справа",
                    "required": true,
                    "type": "number | \"unset\"",
                    "example": null
                },
                {
                    "name": "top",
                    "decorators": [],
                    "description": "Позиция Tooltip сверху",
                    "required": true,
                    "type": "number | \"unset\"",
                    "example": null
                }
            ],
            "methods": []
        },
        "ITooltipViewProps": {
            "name": "ITooltipViewProps",
            "moduleName": "ui/layout/Tooltip/Tooltip",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ITooltipProps"
            ],
            "properties": [
                {
                    "name": "animationMs",
                    "decorators": [],
                    "description": "Время анимации в миллисекундах",
                    "required": false,
                    "type": "number",
                    "example": "200"
                },
                {
                    "name": "arrowPosition",
                    "decorators": [],
                    "description": "Стили для позиционирования стрелки",
                    "required": false,
                    "type": "ITooltipArrowPosition",
                    "example": "{\n left: 10\n}"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Текст подсказки",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "defaultVisible",
                    "decorators": [],
                    "description": "Показывать ли подсказку сразу после рендера страницы",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "gap",
                    "decorators": [],
                    "description": "Отступ от элемента",
                    "required": false,
                    "type": "number",
                    "example": "16"
                },
                {
                    "name": "isTooltipVisible",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Позиционирование подсказки, относительно целевого элемента",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Стили для абсолютного позиционирования подсказки",
                    "required": true,
                    "type": "ITooltipStylePosition",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "calculatePosition",
                    "decorators": [],
                    "description": "Рассчет позиции подсказки",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "tooltipDimensions",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "arrowDimensions",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ICheckboxColumnProps": {
            "name": "ICheckboxColumnProps",
            "moduleName": "ui/list/CheckboxColumn/CheckboxColumn",
            "title": "CheckboxColumn",
            "description": "Колонка с чекбоксом, которая позволяет выбирать одну или все записи в таблице.",
            "tags": {},
            "defaultProps": {
                "primaryKey": "'id'"
            },
            "extends": [],
            "properties": [
                {
                    "name": "fieldProps",
                    "decorators": [],
                    "description": "Свойства для CheckboxField",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "Элемент коллекции item",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для доступа к идентификатору item",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "'id'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "ICheckboxColumnViewProps": {
            "name": "ICheckboxColumnViewProps",
            "moduleName": "ui/list/CheckboxColumn/CheckboxColumn",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IColumnViewProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Атрибут колонки, по которому происходит поиск нужного свойства в items и нужного поля в SearchForm",
                    "required": false,
                    "type": "string",
                    "example": "'Name'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для ячейки со значением",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "diagram",
                    "decorators": [],
                    "description": "Диаграмма.\nЦвет должен соответствовать success | warning | danger | secondary.\nЦвета можно расширить или изменить через стили (см. colors.scss в react-bootstrap)",
                    "required": false,
                    "type": "{items: {color: string, percentageAttribute: string}[], type: \"circle\" | \"horizontal\" | \"vertical\"}",
                    "example": null
                },
                {
                    "name": "fieldProps",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "formatter",
                    "decorators": [],
                    "description": "Свойства для компонента форматирования",
                    "required": false,
                    "type": "Record",
                    "example": "{\n component: DateFormatter,\n format: 'DD MMMM'\n}"
                },
                {
                    "name": "headerClassName",
                    "decorators": [],
                    "description": "CSS-класс для ячейки с заголовком колонки '<th>...</th>'",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "headerProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения заголовка колонки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "headerView",
                    "decorators": [],
                    "description": "Компонент для кастомизации отображения заголовка колонки",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Some text'"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Параметры для иконки в колонке",
                    "required": false,
                    "type": "{attribute: string, isLeft: boolean}",
                    "example": "{\n attribute: 'icon',\n isLeft: true\n}"
                },
                {
                    "name": "input",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{name: string, onChange: any, value: any}",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Заголовок колонки",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Name'"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Параметры для ссылки в колонке",
                    "required": false,
                    "type": "{attribute: string, linkProps: ILinkProps, urlAttribute: string}",
                    "example": "{\n attribute: 'name',\n linkProps: {target: 'blank'},\n url: 'https://kozhindev.com'\n}"
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "picture",
                    "decorators": [],
                    "description": " Параметры для картинки в колонке",
                    "required": false,
                    "type": "{attribute: string, isLeft: boolean}",
                    "example": "{\n attribute: 'icon',\n isLeft: true\n}"
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "sortable",
                    "decorators": [],
                    "description": "Включить возможность сортировки по данным в колонке",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "subtitleAttribute",
                    "decorators": [],
                    "description": "Название свойства в items, которое будет использовано как subtitle",
                    "required": false,
                    "type": "string",
                    "example": "'name'"
                },
                {
                    "name": "valueProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения значения в ячейке",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueView",
                    "decorators": [],
                    "description": "Компонент для кастомизации отображения значения в ячейке",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Скрыть или показать колонку",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": []
        },
        "IControlsColumnItem": {
            "name": "IControlsColumnItem",
            "moduleName": "ui/list/ControlsColumn/ControlsColumn",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?"
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000"
                },
                {
                    "name": "rule",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "Выбор html-тэга, который будет вставлен в DOM",
                    "required": false,
                    "type": "\"a\" | \"button\"",
                    "example": "button"
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank"
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "Цвет текста кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile"
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "Record",
                    "example": "{userId: 52}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit"
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу, используется совместно с свойством `link`",
                    "required": false,
                    "type": "string",
                    "example": "https://kozhindev.com"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Обработчик события нажатия. Для асинхронных событий вовзращяйте в обработчике `Promise`, тогда кнопка\nавтоматически будет переключаться в режим загрузки (`loading`) на время выполнения `Promise`.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "=> fetch(...)\n",
                            "required": true,
                            "type": "Event | MouseEvent",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IControlsColumnProps": {
            "name": "IControlsColumnProps",
            "moduleName": "ui/list/ControlsColumn/ControlsColumn",
            "title": "ControlsColumn",
            "description": "\nКомпонент `ControlsColumn` предоставляет колонку с контролами.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "Коллекция с контролами",
                    "required": false,
                    "type": "IControlItem[] | {}",
                    "example": "[\n {\n  id: 'delete'\n },\n {\n  id: 'view',\n  position: 'left'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "Элемент, для которого будет отображаться список с контролами, в нём можно задать видимость контрола\nс помощью свойства 'can' + _upperFirst(control.id)",
                    "required": false,
                    "type": "any",
                    "example": "{\n name: 'Ivan',\n work: 'development',\n canView: false\n}",
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения колонки",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IControlsColumnViewProps": {
            "name": "IControlsColumnViewProps",
            "moduleName": "ui/list/ControlsColumn/ControlsColumn",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IControlsColumnItem[]",
                    "example": null
                }
            ],
            "methods": []
        },
        "IEmptyProps": {
            "name": "IEmptyProps",
            "moduleName": "ui/list/Empty/Empty",
            "title": "Empty",
            "description": "Компонент используется в качестве заглушки в случае, когда пришла пустая коллекция данных.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Показывать заглушку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "text",
                    "decorators": [],
                    "description": "Текст заглушки",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Записи не найдены'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IFlexGridItem": {
            "name": "IFlexGridItem",
            "moduleName": "ui/list/FlexGrid/FlexGrid",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "col",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент, максимум 12",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Содержимое элемента FlexGrid",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "lg",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент на экранах размером lg, максимум 12",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "md",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент на экранах размером md, максимум 12",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "offset",
                    "decorators": [],
                    "description": "Количество колонок для смещения столбца слева",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "order",
                    "decorators": [],
                    "description": "Порядок элемента в FlexGrid",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "sm",
                    "decorators": [],
                    "description": "Количество колонок, которое занимает элемент на экранах размером sm, максимум 12",
                    "required": false,
                    "type": "number",
                    "example": null
                }
            ],
            "methods": []
        },
        "IFlexGridProps": {
            "name": "IFlexGridProps",
            "moduleName": "ui/list/FlexGrid/FlexGrid",
            "title": "FlexGrid",
            "description": "Flex контейнер для элементов и компонентов.",
            "tags": {},
            "defaultProps": {
                "gap": "24",
                "wrap": "false"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "align",
                    "decorators": [],
                    "description": "Значение для css-свойства align-items",
                    "required": false,
                    "type": "\"center\" | \"end\" | \"start\" | \"stretch\" | \"flex-start\" | \"flex-end\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "direction",
                    "decorators": [],
                    "description": "Значение для css-свойства flex-direction",
                    "required": false,
                    "type": "\"column\" | \"row\" | \"column-reverse\" | \"row-reverse\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "gap",
                    "decorators": [],
                    "description": "Расстояние между элементами в px.\nЕсли передано число, то установится расстояние между строками и между колонками.\nЕсли передан массив, то первый элемент - расстояние между колонками, второй - между строками.",
                    "required": false,
                    "type": "number | number[]",
                    "example": null,
                    "defaultValue": "24"
                },
                {
                    "name": "itemClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элементов FlexGrid",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы FlexGrid",
                    "required": false,
                    "type": "IFlexGridItem[]",
                    "example": "[\n {\n  content: 'Block1',\n  col: 4\n },\n {\n  content: 'Block2',\n  col: 6\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "justify",
                    "decorators": [],
                    "description": "Значение для css-свойства justify-content",
                    "required": false,
                    "type": "\"right\" | \"left\" | \"center\" | \"end\" | \"start\" | \"stretch\" | \"flex-start\" | \"flex-end\" | \"space-between\" | \"space-around\" | \"space-evenly\"",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "wrap",
                    "decorators": [],
                    "description": "Автоматический перенос на новую строку",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "false"
                }
            ],
            "methods": []
        },
        "IFlexGridViewProps": {
            "name": "IFlexGridViewProps",
            "moduleName": "ui/list/FlexGrid/FlexGrid",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFlexGridProps"
            ],
            "properties": [
                {
                    "name": "align",
                    "decorators": [],
                    "description": "Значение для css-свойства align-items",
                    "required": false,
                    "type": "\"center\" | \"end\" | \"start\" | \"stretch\" | \"flex-start\" | \"flex-end\"",
                    "example": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "colGap",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "direction",
                    "decorators": [],
                    "description": "Значение для css-свойства flex-direction",
                    "required": false,
                    "type": "\"column\" | \"row\" | \"column-reverse\" | \"row-reverse\"",
                    "example": null
                },
                {
                    "name": "gap",
                    "decorators": [],
                    "description": "Расстояние между элементами в px.\nЕсли передано число, то установится расстояние между строками и между колонками.\nЕсли передан массив, то первый элемент - расстояние между колонками, второй - между строками.",
                    "required": false,
                    "type": "number | number[]",
                    "example": null
                },
                {
                    "name": "itemClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элементов FlexGrid",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы FlexGrid",
                    "required": false,
                    "type": "IFlexGridItem[]",
                    "example": "[\n {\n  content: 'Block1',\n  col: 4\n },\n {\n  content: 'Block2',\n  col: 6\n }\n]"
                },
                {
                    "name": "justify",
                    "decorators": [],
                    "description": "Значение для css-свойства justify-content",
                    "required": false,
                    "type": "\"right\" | \"left\" | \"center\" | \"end\" | \"start\" | \"stretch\" | \"flex-start\" | \"flex-end\" | \"space-between\" | \"space-around\" | \"space-evenly\"",
                    "example": null
                },
                {
                    "name": "rowGap",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "wrap",
                    "decorators": [],
                    "description": "Автоматический перенос на новую строку",
                    "required": false,
                    "type": "boolean",
                    "example": null
                }
            ],
            "methods": []
        },
        "IColumnViewProps": {
            "name": "IColumnViewProps",
            "moduleName": "ui/list/Grid/Grid",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IGridColumn"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Атрибут колонки, по которому происходит поиск нужного свойства в items и нужного поля в SearchForm",
                    "required": false,
                    "type": "string",
                    "example": "'Name'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для ячейки со значением",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "diagram",
                    "decorators": [],
                    "description": "Диаграмма.\nЦвет должен соответствовать success | warning | danger | secondary.\nЦвета можно расширить или изменить через стили (см. colors.scss в react-bootstrap)",
                    "required": false,
                    "type": "{items: {color: string, percentageAttribute: string}[], type: \"circle\" | \"horizontal\" | \"vertical\"}",
                    "example": null
                },
                {
                    "name": "formatter",
                    "decorators": [],
                    "description": "Свойства для компонента форматирования",
                    "required": false,
                    "type": "Record",
                    "example": "{\n component: DateFormatter,\n format: 'DD MMMM'\n}"
                },
                {
                    "name": "headerClassName",
                    "decorators": [],
                    "description": "CSS-класс для ячейки с заголовком колонки '<th>...</th>'",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "headerProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения заголовка колонки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "headerView",
                    "decorators": [],
                    "description": "Компонент для кастомизации отображения заголовка колонки",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Some text'"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Параметры для иконки в колонке",
                    "required": false,
                    "type": "{attribute: string, isLeft: boolean}",
                    "example": "{\n attribute: 'icon',\n isLeft: true\n}"
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Record",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Заголовок колонки",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Name'"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Параметры для ссылки в колонке",
                    "required": false,
                    "type": "{attribute: string, linkProps: ILinkProps, urlAttribute: string}",
                    "example": "{\n attribute: 'name',\n linkProps: {target: 'blank'},\n url: 'https://kozhindev.com'\n}"
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "picture",
                    "decorators": [],
                    "description": " Параметры для картинки в колонке",
                    "required": false,
                    "type": "{attribute: string, isLeft: boolean}",
                    "example": "{\n attribute: 'icon',\n isLeft: true\n}"
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "sortable",
                    "decorators": [],
                    "description": "Включить возможность сортировки по данным в колонке",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "subtitleAttribute",
                    "decorators": [],
                    "description": "Название свойства в items, которое будет использовано как subtitle",
                    "required": false,
                    "type": "string",
                    "example": "'name'"
                },
                {
                    "name": "valueProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения значения в ячейке",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueView",
                    "decorators": [],
                    "description": "Компонент для кастомизации отображения значения в ячейке",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Скрыть или показать колонку",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": []
        },
        "IGridColumn": {
            "name": "IGridColumn",
            "moduleName": "ui/list/Grid/Grid",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Атрибут колонки, по которому происходит поиск нужного свойства в items и нужного поля в SearchForm",
                    "required": false,
                    "type": "string",
                    "example": "'Name'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для ячейки со значением",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "diagram",
                    "decorators": [],
                    "description": "Диаграмма.\nЦвет должен соответствовать success | warning | danger | secondary.\nЦвета можно расширить или изменить через стили (см. colors.scss в react-bootstrap)",
                    "required": false,
                    "type": "{items: {color: string, percentageAttribute: string}[], type: \"circle\" | \"horizontal\" | \"vertical\"}",
                    "example": null
                },
                {
                    "name": "formatter",
                    "decorators": [],
                    "description": "Свойства для компонента форматирования",
                    "required": false,
                    "type": "Record",
                    "example": "{\n component: DateFormatter,\n format: 'DD MMMM'\n}"
                },
                {
                    "name": "headerClassName",
                    "decorators": [],
                    "description": "CSS-класс для ячейки с заголовком колонки '<th>...</th>'",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "headerProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения заголовка колонки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "headerView",
                    "decorators": [],
                    "description": "Компонент для кастомизации отображения заголовка колонки",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Some text'"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Параметры для иконки в колонке",
                    "required": false,
                    "type": "{attribute: string, isLeft: boolean}",
                    "example": "{\n attribute: 'icon',\n isLeft: true\n}"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Заголовок колонки",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Name'"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Параметры для ссылки в колонке",
                    "required": false,
                    "type": "{attribute: string, linkProps: ILinkProps, urlAttribute: string}",
                    "example": "{\n attribute: 'name',\n linkProps: {target: 'blank'},\n url: 'https://kozhindev.com'\n}"
                },
                {
                    "name": "picture",
                    "decorators": [],
                    "description": " Параметры для картинки в колонке",
                    "required": false,
                    "type": "{attribute: string, isLeft: boolean}",
                    "example": "{\n attribute: 'icon',\n isLeft: true\n}"
                },
                {
                    "name": "sortable",
                    "decorators": [],
                    "description": "Включить возможность сортировки по данным в колонке",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "subtitleAttribute",
                    "decorators": [],
                    "description": "Название свойства в items, которое будет использовано как subtitle",
                    "required": false,
                    "type": "string",
                    "example": "'name'"
                },
                {
                    "name": "valueProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения значения в ячейке",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueView",
                    "decorators": [],
                    "description": "Компонент для кастомизации отображения значения в ячейке",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Скрыть или показать колонку",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": []
        },
        "IGridProps": {
            "name": "IGridProps",
            "moduleName": "ui/list/Grid/Grid",
            "title": "Grid",
            "description": "Компонент для представления данных коллекции в виде таблицы.",
            "tags": {},
            "defaultProps": {
                "hasAlternatingColors": "true",
                "size": "'md'"
            },
            "extends": [
                "IListConfig"
            ],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "Url, который вернет коллекцию элементов",
                    "required": false,
                    "type": "string",
                    "example": "api/v1/articles",
                    "defaultValue": null
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "Тип HTTP запроса (GET | POST | PUT | DELETE)",
                    "required": false,
                    "type": "string",
                    "example": "GET",
                    "defaultValue": null
                },
                {
                    "name": "addressBar",
                    "decorators": [],
                    "description": "Синхронизация значений формы списка с адресной строкой",
                    "required": false,
                    "type": "boolean | IAddressBarConfig",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoDestroy",
                    "decorators": [],
                    "description": "Удаление данных списка из хранилища Redux при размонтировании компонента",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoFetchOnFormChanges",
                    "decorators": [],
                    "description": "Отправлять запрос на обновление данных при изменении данных формы. По-умолчанию - включено.",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": null
                },
                {
                    "name": "columns",
                    "decorators": [],
                    "description": "Коллекция с наименованиями и свойствами колонок в таблице",
                    "required": true,
                    "type": "string | IGridColumn[]",
                    "example": "[\n {\n  label: 'Name',\n  attribute: 'name'\n },\n {\n  label: 'Work',\n  attribute: 'work'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "controls",
                    "decorators": [],
                    "description": "Коллекция с элементами управления. Данная коллекция отобразится в колонке рядом с каждой записью в таблице.\nНапример, кнопки для удаления и детального просмотра записи.",
                    "required": false,
                    "type": "IControlItem[] | {}",
                    "example": "[\n {\n  id: 'delete'\n },\n {\n  id: 'view',\n  position: 'left'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "empty",
                    "decorators": [],
                    "description": "Заглушка в случае отсутствия элементов",
                    "required": false,
                    "type": "string | boolean | IEmptyProps",
                    "example": "{\n text: 'Записи не найдены'\n}",
                    "defaultValue": null
                },
                {
                    "name": "hasAlternatingColors",
                    "decorators": [],
                    "description": "Включает переменные цвета для строк в таблице",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "true"
                },
                {
                    "name": "initialItems",
                    "decorators": [],
                    "description": "Начальные элементы. Используется для подгрузки нескольких списков в один запрос, при этом не отменяя пагинацию\nи последующие запросы на бекенд для 2-й и следующих страниц",
                    "required": false,
                    "type": "any[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialTotal",
                    "decorators": [],
                    "description": "Количество элементов всего в списке (для отрисовки пагинации), заданное вручную",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Состояние загрузки элементов списка",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы коллекции",
                    "required": false,
                    "type": "any[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemsIndexing",
                    "decorators": [],
                    "description": "Нужно ли отображать колонку с порядковым номером элемента? Если да, то для каждого элемента в коллекции items\nдолжно быть задано свойство index",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Варианты расположения элементов коллекции",
                    "required": false,
                    "type": "boolean | ILayoutNamesProps",
                    "example": "{\n items: [\n  {\n   id: 'list',\n   label: 'List'\n  },\n  {\n   id: 'grid',\n   label: 'Grid'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "Идентификатор списка",
                    "required": false,
                    "type": "string",
                    "example": "ArticlesList",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "pagination",
                    "decorators": [],
                    "description": "Подключение пагинации",
                    "required": false,
                    "type": "boolean | IPaginationProps",
                    "example": "{\n loadMore: true\n}",
                    "defaultValue": null
                },
                {
                    "name": "paginationSize",
                    "decorators": [],
                    "description": "Переключение количества элементов в списке",
                    "required": false,
                    "type": "boolean | IPaginationSizeProps",
                    "example": "{\n sizes: [3, 6, 9],\n defaultValue: 3\n}",
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": false,
                    "type": "string",
                    "example": "id",
                    "defaultValue": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Дополнительные параметры, значения которых нужно передавать в запросе для получения данных",
                    "required": false,
                    "type": "Record",
                    "example": "{\n tagName: 'MarketReviews'\n}",
                    "defaultValue": null
                },
                {
                    "name": "scope",
                    "decorators": [],
                    "description": "Параметр для загрузки данных списка с сервера",
                    "required": false,
                    "type": "string[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "searchForm",
                    "decorators": [],
                    "description": "Форма для поиска элементов",
                    "required": false,
                    "type": "IFormProps",
                    "example": "{\n fields: ['title'],\n model: {\n  attributes: [\n   'title:string:Название'\n  ]\n }\n}",
                    "defaultValue": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "Модель для синхронизации значений формы с адресной строкой",
                    "required": false,
                    "type": "string",
                    "example": "{\n attributes: [\n  {\n   attribute: 'isMilesAvailable',\n   type: boolean\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер Grid",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "'md'"
                },
                {
                    "name": "sort",
                    "decorators": [],
                    "description": "Подключение сортировки",
                    "required": false,
                    "type": "boolean | ISortConfig",
                    "example": "{\n enable: true,\n defaultSort: 'startDate'\n}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "condition",
                    "decorators": [],
                    "description": "Обработчик, который составляет список условий для локальной фильтрации элементов коллекции",
                    "required": false,
                    "type": "any[]",
                    "example": null,
                    "parameters": [
                        {
                            "name": "query",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onError",
                    "decorators": [],
                    "description": "Обработчик события ошибки выполнения запроса",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "Обработчик, который вызывается при изменении значений формы, и нужен для подгрузки новых элементов коллекции",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "list",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IList",
                            "example": null
                        },
                        {
                            "name": "query",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "http",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IGridViewProps": {
            "name": "IGridViewProps",
            "moduleName": "ui/list/Grid/Grid",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IGridProps",
                "'onFetch'>"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "columns",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IGridColumn & {label: any}[]",
                    "example": null
                },
                {
                    "name": "layoutNamesPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "paginationPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "paginationSizePosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onSort",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderEmpty",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderLayoutNames",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderList",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "children",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderPagination",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderPaginationSize",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderSearchForm",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderValue",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "column",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IGridColumn",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ILayoutNamesProps": {
            "name": "ILayoutNamesProps",
            "moduleName": "ui/list/LayoutNames/LayoutNames",
            "title": "LayoutNames",
            "description": "Переключает варианты расположения элементов коллекции.\nСохраняет выбранный пользователем шаблон в LocalStorage.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Название ключа, под которым в LocalStorage сохранится значение выбранного шаблона",
                    "required": false,
                    "type": "string",
                    "example": "'layout'",
                    "defaultValue": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Шаблон по умолчанию",
                    "required": false,
                    "type": "string",
                    "example": "'list'",
                    "defaultValue": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Отобразить переключатель",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция с шаблонами",
                    "required": false,
                    "type": "INavItem[]",
                    "example": "[\n {\n  id: 'list',\n  label: 'List'\n },\n {\n  id: 'grid',\n  label: 'Grid'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "list",
                    "decorators": [],
                    "description": "Данные списка",
                    "required": false,
                    "type": "IList",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Расположение переключателя",
                    "required": false,
                    "type": "string",
                    "example": "'bottom'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IListItemViewProps": {
            "name": "IListItemViewProps",
            "moduleName": "ui/list/List/List",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "contentClassName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number | string",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: PrimaryKey, label: any, title: any}",
                    "example": null
                },
                {
                    "name": "layoutSelected",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "number | string",
                    "example": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number | string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IListProps": {
            "name": "IListProps",
            "moduleName": "ui/list/List/List",
            "title": "List",
            "description": "Компонент для представления коллекции в виде списка.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IListConfig"
            ],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "Url, который вернет коллекцию элементов",
                    "required": false,
                    "type": "string",
                    "example": "api/v1/articles",
                    "defaultValue": null
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "Тип HTTP запроса (GET | POST | PUT | DELETE)",
                    "required": false,
                    "type": "string",
                    "example": "GET",
                    "defaultValue": null
                },
                {
                    "name": "addressBar",
                    "decorators": [],
                    "description": "Синхронизация значений формы списка с адресной строкой",
                    "required": false,
                    "type": "boolean | IAddressBarConfig",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoDestroy",
                    "decorators": [],
                    "description": "Удаление данных списка из хранилища Redux при размонтировании компонента",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoFetchOnFormChanges",
                    "decorators": [],
                    "description": "Отправлять запрос на обновление данных при изменении данных формы. По-умолчанию - включено.",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "contentClassName",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента с контентом",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "empty",
                    "decorators": [],
                    "description": "Заглушка в случае отсутствия элементов",
                    "required": false,
                    "type": "string | boolean | IEmptyProps",
                    "example": "{\n text: 'Записи не найдены'\n}",
                    "defaultValue": null
                },
                {
                    "name": "initialItems",
                    "decorators": [],
                    "description": "Начальные элементы. Используется для подгрузки нескольких списков в один запрос, при этом не отменяя пагинацию\nи последующие запросы на бекенд для 2-й и следующих страниц",
                    "required": false,
                    "type": "any[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "initialTotal",
                    "decorators": [],
                    "description": "Количество элементов всего в списке (для отрисовки пагинации), заданное вручную",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Состояние загрузки элементов списка",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": null
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "Свойства для элемента коллекции",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "itemView",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения элемента коллекции",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы коллекции",
                    "required": false,
                    "type": "any[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Варианты расположения элементов коллекции",
                    "required": false,
                    "type": "boolean | ILayoutNamesProps",
                    "example": "{\n items: [\n  {\n   id: 'list',\n   label: 'List'\n  },\n  {\n   id: 'grid',\n   label: 'Grid'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "Идентификатор списка",
                    "required": false,
                    "type": "string",
                    "example": "ArticlesList",
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "pagination",
                    "decorators": [],
                    "description": "Подключение пагинации",
                    "required": false,
                    "type": "boolean | IPaginationProps",
                    "example": "{\n loadMore: true\n}",
                    "defaultValue": null
                },
                {
                    "name": "paginationSize",
                    "decorators": [],
                    "description": "Переключение количества элементов в списке",
                    "required": false,
                    "type": "boolean | IPaginationSizeProps",
                    "example": "{\n sizes: [3, 6, 9],\n defaultValue: 3\n}",
                    "defaultValue": null
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "Первичный ключ для item",
                    "required": false,
                    "type": "string",
                    "example": "id",
                    "defaultValue": null
                },
                {
                    "name": "query",
                    "decorators": [],
                    "description": "Дополнительные параметры, значения которых нужно передавать в запросе для получения данных",
                    "required": false,
                    "type": "Record",
                    "example": "{\n tagName: 'MarketReviews'\n}",
                    "defaultValue": null
                },
                {
                    "name": "scope",
                    "decorators": [],
                    "description": "Параметр для загрузки данных списка с сервера",
                    "required": false,
                    "type": "string[]",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "searchForm",
                    "decorators": [],
                    "description": "Форма для поиска элементов",
                    "required": false,
                    "type": "IFormProps",
                    "example": "{\n fields: ['title'],\n model: {\n  attributes: [\n   'title:string:Название'\n  ]\n }\n}",
                    "defaultValue": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "Модель для синхронизации значений формы с адресной строкой",
                    "required": false,
                    "type": "string",
                    "example": "{\n attributes: [\n  {\n   attribute: 'isMilesAvailable',\n   type: boolean\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "sort",
                    "decorators": [],
                    "description": "Подключение сортировки",
                    "required": false,
                    "type": "boolean | ISortConfig",
                    "example": "{\n enable: true,\n defaultSort: 'startDate'\n}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "condition",
                    "decorators": [],
                    "description": "Обработчик, который составляет список условий для локальной фильтрации элементов коллекции",
                    "required": false,
                    "type": "any[]",
                    "example": null,
                    "parameters": [
                        {
                            "name": "query",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onError",
                    "decorators": [],
                    "description": "Обработчик события ошибки выполнения запроса",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "Обработчик, который вызывается при изменении значений формы, и нужен для подгрузки новых элементов коллекции",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "list",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IList",
                            "example": null
                        },
                        {
                            "name": "query",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "http",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IListViewProps": {
            "name": "IListViewProps",
            "moduleName": "ui/list/List/List",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IListProps",
                "'onFetch'>",
                "Omit<IListOutput",
                "'list'>"
            ],
            "properties": [
                {
                    "name": "content",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "layoutNamesPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Model",
                    "example": null
                },
                {
                    "name": "paginationPosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "paginationSizePosition",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "searchModel",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "Model",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onFetch",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "Record",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onSort",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderEmpty",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderLayoutNames",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderList",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "children",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderPagination",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderPaginationSize",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "renderSearchForm",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IPaginationProps": {
            "name": "IPaginationProps",
            "moduleName": "ui/list/Pagination/Pagination",
            "title": "Pagination",
            "description": "Компонент с пагинацией страниц.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "aroundCount",
                    "decorators": [],
                    "description": "Указывает, какое количество кнопок с номерами страниц будет доступно до и после выбранной страницы,\nвключая выбранную. Остальные будут спрятаны в элемент \"...\"",
                    "required": false,
                    "type": "number",
                    "example": "5",
                    "defaultValue": null
                },
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) в форме для поля пагинации",
                    "required": false,
                    "type": "string",
                    "example": "page",
                    "defaultValue": null
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Параметры кнопки",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Значение по-умолчанию",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Подключить пагинацию",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "list",
                    "decorators": [],
                    "description": "Список, для которого используется пагинация",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "loadMore",
                    "decorators": [],
                    "description": "Вместо списка с номерами страниц будет кнопка \"Загрузить еще\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "showEdgeSteps",
                    "decorators": [],
                    "description": "Нужно ли отображать кнопки с шагом до первой / последней страницы",
                    "required": false,
                    "type": "boolean",
                    "example": "{'true'}",
                    "defaultValue": null
                },
                {
                    "name": "showSteps",
                    "decorators": [],
                    "description": "Нужно ли отображать кнопки с шагом в одну страницу",
                    "required": false,
                    "type": "boolean",
                    "example": "{'true'}",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "sizeAttribute",
                    "decorators": [],
                    "description": "Аттрибут (название) в форме для поля с количеством элементов на странице",
                    "required": false,
                    "type": "string",
                    "example": "pageSize",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик, который вызывается после смены страницы",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IPaginationViewProps": {
            "name": "IPaginationViewProps",
            "moduleName": "ui/list/Pagination/Pagination",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IPaginationProps"
            ],
            "properties": [
                {
                    "name": "aroundCount",
                    "decorators": [],
                    "description": "Указывает, какое количество кнопок с номерами страниц будет доступно до и после выбранной страницы,\nвключая выбранную. Остальные будут спрятаны в элемент \"...\"",
                    "required": false,
                    "type": "number",
                    "example": "5"
                },
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) в форме для поля пагинации",
                    "required": false,
                    "type": "string",
                    "example": "page"
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Параметры кнопки",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Значение по-умолчанию",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Подключить пагинацию",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isFirstPage",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "isLastPage",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "list",
                    "decorators": [],
                    "description": "Список, для которого используется пагинация",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "loadMore",
                    "decorators": [],
                    "description": "Вместо списка с номерами страниц будет кнопка \"Загрузить еще\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "pages",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{isActive: boolean, label: string, page: number}[]",
                    "example": null
                },
                {
                    "name": "showEdgeSteps",
                    "decorators": [],
                    "description": "Нужно ли отображать кнопки с шагом до первой / последней страницы",
                    "required": false,
                    "type": "boolean",
                    "example": "{'true'}"
                },
                {
                    "name": "showSteps",
                    "decorators": [],
                    "description": "Нужно ли отображать кнопки с шагом в одну страницу",
                    "required": false,
                    "type": "boolean",
                    "example": "{'true'}"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "sizeAttribute",
                    "decorators": [],
                    "description": "Аттрибут (название) в форме для поля с количеством элементов на странице",
                    "required": false,
                    "type": "string",
                    "example": "pageSize"
                },
                {
                    "name": "totalPages",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик, который вызывается после смены страницы",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "page",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onSelectFirst",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onSelectLast",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onSelectNext",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "onSelectPrev",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IPaginationSizeProps": {
            "name": "IPaginationSizeProps",
            "moduleName": "ui/list/PaginationSize/PaginationSize",
            "title": "PaginationSize",
            "description": "Компонент для выбора количества элементов в списке",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "pageSize",
                    "defaultValue": null
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Свойства для кнопок пагинации",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Значение по-умолчанию",
                    "required": false,
                    "type": "number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Подключить выбор количества элементов",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "list",
                    "decorators": [],
                    "description": "Список, для которого используется пагинация",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Расположение элемента в списке",
                    "required": false,
                    "type": "string",
                    "example": "'both'",
                    "defaultValue": null
                },
                {
                    "name": "sizes",
                    "decorators": [],
                    "description": "Список с количествами элементов на странице",
                    "required": false,
                    "type": "number[]",
                    "example": "[2, 3, 4]",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик, который вызывается после смены страницы",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IPaginationSizeViewProps": {
            "name": "IPaginationSizeViewProps",
            "moduleName": "ui/list/PaginationSize/PaginationSize",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IPaginationSizeProps"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Аттрибут (название) поля в форме",
                    "required": false,
                    "type": "string",
                    "example": "pageSize"
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Свойства для кнопок пагинации",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "defaultValue",
                    "decorators": [],
                    "description": "Значение по-умолчанию",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "enable",
                    "decorators": [],
                    "description": "Подключить выбор количества элементов",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: number, label: string | number}[]",
                    "example": null
                },
                {
                    "name": "list",
                    "decorators": [],
                    "description": "Список, для которого используется пагинация",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Расположение элемента в списке",
                    "required": false,
                    "type": "string",
                    "example": "'both'"
                },
                {
                    "name": "sizes",
                    "decorators": [],
                    "description": "Список с количествами элементов на странице",
                    "required": false,
                    "type": "number[]",
                    "example": "[2, 3, 4]"
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик, который вызывается после смены страницы",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onSelect",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "size",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ISearchFormProps": {
            "name": "ISearchFormProps",
            "moduleName": "ui/list/SearchForm/SearchForm",
            "title": "SearchForm",
            "description": "Форма для поиска элементов в коллекции list-компонента.\nФорма хранит значения в локальном состоянии, а на onSubmit отправляет их в хранилище Redux,\nпосле чего в list-компонент подгружаются новые элементы коллекции.",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IFormProps"
            ],
            "properties": [
                {
                    "name": "action",
                    "decorators": [],
                    "description": "Url на который будет отправлена форма",
                    "required": false,
                    "type": "string",
                    "example": "api/v1/handle-form",
                    "defaultValue": null
                },
                {
                    "name": "actionMethod",
                    "decorators": [],
                    "description": "Тип HTTP запроса (GET | POST | PUT | DELETE)",
                    "required": false,
                    "type": "string",
                    "example": "POST",
                    "defaultValue": null
                },
                {
                    "name": "addressBar",
                    "decorators": [],
                    "description": "Синхронизация значений формы с адресной строкой",
                    "required": false,
                    "type": "boolean | IAddressBarConfig",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoDestroy",
                    "decorators": [],
                    "description": "Очищать ли данные формы с redux хранилища при размонтировании компонента. По-умолчанию - false",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": null
                },
                {
                    "name": "autoFocus",
                    "decorators": [],
                    "description": "Если в форме есть элементы '<input>', то произойдет автоматическая фокусировка на первом из них",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoSave",
                    "decorators": [],
                    "description": "Сохраняет значения полей формы в LocalStorage",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "autoStartTwoFactor",
                    "decorators": [],
                    "description": "Автоматически стартовать 2fa аутентификацию (отправлять код)",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "captchaActionName",
                    "decorators": [],
                    "description": "Название действия, которое передаётся в API Google reCAPTCHA v3, для более детального анализа\nповедения пользователя (https://developers.google.com/recaptcha/docs/v3)",
                    "required": false,
                    "type": "string",
                    "example": "'addComment'",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "Поля, которые необходимо поместить в форму",
                    "required": false,
                    "type": "string | IFieldProps[]",
                    "example": "[\n {\n  attribute: 'category',\n  component: 'DropDownField'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "Идентификатор формы",
                    "required": false,
                    "type": "string",
                    "example": "BookingForm",
                    "defaultValue": null
                },
                {
                    "name": "initialValues",
                    "decorators": [],
                    "description": "Начальные значения формы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "Id списка",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "Модель с полями формы",
                    "required": false,
                    "type": "any",
                    "example": "{\n attributes: [\n  {\n   attribute: 'category',\n   field: 'DropDownField'\n  }\n ]\n}",
                    "defaultValue": null
                },
                {
                    "name": "prefix",
                    "decorators": [],
                    "description": "Префикс",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "submitErrorMessage",
                    "decorators": [],
                    "description": "Текст ошибки при неудачной отправке данных. По-умолчанию: \"Ошибка сервера\"",
                    "required": false,
                    "type": "string",
                    "example": "Упс, что-то пошло не так",
                    "defaultValue": null
                },
                {
                    "name": "submitLabel",
                    "decorators": [],
                    "description": "Надпись на кнопке отправки формы",
                    "required": false,
                    "type": "string",
                    "example": "Submit",
                    "defaultValue": null
                },
                {
                    "name": "useRedux",
                    "decorators": [],
                    "description": "Использовать для данных глобальное хранилище (redux)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "validators",
                    "decorators": [],
                    "description": "Набор с правилами для проверки соответствия значений полей формы определенному формату.\nПроверка запускается в момент отправки формы (в обработчике onSubmit).",
                    "required": false,
                    "type": "any[]",
                    "example": "[\n ['name', 'required'],\n ['age', 'integer']\n]",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "viewProps",
                    "decorators": [],
                    "description": "Свойства для представления",
                    "required": false,
                    "type": "any",
                    "example": "{className: 'foo'}",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onAfterSubmit",
                    "decorators": [],
                    "description": "Обработчик события после отправки формы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onBeforeSubmit",
                    "decorators": [],
                    "description": "Обработчик события перед отправкой формы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик события при каком-либо изменении в форме",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onComplete",
                    "decorators": [],
                    "description": "Обработчик успешного выполнения формы (без ошибок)",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onError",
                    "decorators": [],
                    "description": "Обработчик события ошибки выполнения запроса",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "decorators": [],
                    "description": "Обработчик события отправки формы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onTwoFactor",
                    "decorators": [],
                    "description": "Обработчик, который вызывается при запросе 2FA",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "providerName",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "info",
                            "decorators": [],
                            "description": "",
                            "required": false,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IStepItem": {
            "name": "IStepItem",
            "moduleName": "ui/list/Steps/Steps",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "description",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "isError",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "subtitle",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "IStepItemViewProps": {
            "name": "IStepItemViewProps",
            "moduleName": "ui/list/Steps/Steps",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "status",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "stepItem",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IStepItem",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "IStepsViewProps": {
            "name": "IStepsViewProps",
            "moduleName": "ui/list/Steps/Steps",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ReactNode",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": []
        },
        "ITreeColumnViewProps": {
            "name": "ITreeColumnViewProps",
            "moduleName": "ui/list/TreeTable/TreeTable",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IColumnViewProps",
                "Pick<ITreeTableProps",
                "'levelPadding'>"
            ],
            "properties": [
                {
                    "name": "attribute",
                    "decorators": [],
                    "description": "Атрибут колонки, по которому происходит поиск нужного свойства в items и нужного поля в SearchForm",
                    "required": false,
                    "type": "string",
                    "example": "'Name'"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для ячейки со значением",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "diagram",
                    "decorators": [],
                    "description": "Диаграмма.\nЦвет должен соответствовать success | warning | danger | secondary.\nЦвета можно расширить или изменить через стили (см. colors.scss в react-bootstrap)",
                    "required": false,
                    "type": "{items: {color: string, percentageAttribute: string}[], type: \"circle\" | \"horizontal\" | \"vertical\"}",
                    "example": null
                },
                {
                    "name": "formatter",
                    "decorators": [],
                    "description": "Свойства для компонента форматирования",
                    "required": false,
                    "type": "Record",
                    "example": "{\n component: DateFormatter,\n format: 'DD MMMM'\n}"
                },
                {
                    "name": "headerClassName",
                    "decorators": [],
                    "description": "CSS-класс для ячейки с заголовком колонки '<th>...</th>'",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "headerProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения заголовка колонки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "headerView",
                    "decorators": [],
                    "description": "Компонент для кастомизации отображения заголовка колонки",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Some text'"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Параметры для иконки в колонке",
                    "required": false,
                    "type": "{attribute: string, isLeft: boolean}",
                    "example": "{\n attribute: 'icon',\n isLeft: true\n}"
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IPreparedTreeItem",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Заголовок колонки",
                    "required": false,
                    "type": "ReactNode",
                    "example": "'Name'"
                },
                {
                    "name": "levelPadding",
                    "decorators": [],
                    "description": "Расстояние вложенных элементов от родителя для каждого уровня",
                    "required": false,
                    "type": "number",
                    "example": "32"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Параметры для ссылки в колонке",
                    "required": false,
                    "type": "{attribute: string, linkProps: ILinkProps, urlAttribute: string}",
                    "example": "{\n attribute: 'name',\n linkProps: {target: 'blank'},\n url: 'https://kozhindev.com'\n}"
                },
                {
                    "name": "listId",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "model",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "picture",
                    "decorators": [],
                    "description": " Параметры для картинки в колонке",
                    "required": false,
                    "type": "{attribute: string, isLeft: boolean}",
                    "example": "{\n attribute: 'icon',\n isLeft: true\n}"
                },
                {
                    "name": "primaryKey",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "sortable",
                    "decorators": [],
                    "description": "Включить возможность сортировки по данным в колонке",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "subtitleAttribute",
                    "decorators": [],
                    "description": "Название свойства в items, которое будет использовано как subtitle",
                    "required": false,
                    "type": "string",
                    "example": "'name'"
                },
                {
                    "name": "valueProps",
                    "decorators": [],
                    "description": "Свойства для компонента отображения значения в ячейке",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "valueView",
                    "decorators": [],
                    "description": "Компонент для кастомизации отображения значения в ячейке",
                    "required": false,
                    "type": "any",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Скрыть или показать колонку",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": []
        },
        "ITreeTableProps": {
            "name": "ITreeTableProps",
            "moduleName": "ui/list/TreeTable/TreeTable",
            "title": "TreeTable",
            "description": "\nКомпонент для представления данных коллекции в виде иерархической структуры.\n",
            "tags": {},
            "defaultProps": {
                "alwaysOpened": "false",
                "levelPadding": "32"
            },
            "extends": [
                "Omit<IGridProps",
                "'items'>",
                "Pick<ITreeProps",
                "'alwaysOpened' | 'levelPadding'>"
            ],
            "properties": [
                {
                    "name": "alwaysOpened",
                    "decorators": [],
                    "description": " Используется для управления раскрытием всех элементов в дереве",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": "false"
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы коллекции",
                    "required": false,
                    "type": "ITreeItem[]",
                    "example": "[\n {\n  id: 1,\n  name: 'Jane'\n },\n {\n  id: 2,\n  name: 'John',\n  items: [...]\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "levelPadding",
                    "decorators": [],
                    "description": "Расстояние вложенных элементов от родителя для каждого уровня",
                    "required": false,
                    "type": "number",
                    "example": "32",
                    "defaultValue": "32"
                }
            ],
            "methods": []
        },
        "IModalProps": {
            "name": "IModalProps",
            "moduleName": "ui/modal/Modal/Modal",
            "title": "Modal",
            "description": "Модальное окно",
            "tags": {},
            "defaultProps": {
                "shouldCloseOnEsc": "true",
                "shouldCloseOnOverlayClick": "true",
                "size": "'md'"
            },
            "extends": [],
            "properties": [
                {
                    "name": "buttons",
                    "decorators": [],
                    "description": "Коллекция кнопок, которая отобразится в нижней секции Modal",
                    "required": false,
                    "type": "IButtonProps[]",
                    "example": "[\n {\n  label: __(('Закрыть')),\n  onClick: () => props.onClose()\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Кастомный CSS-класс",
                    "required": false,
                    "type": "string",
                    "example": "'CustomCssClassName'",
                    "defaultValue": null
                },
                {
                    "name": "closeAfterMs",
                    "decorators": [],
                    "description": "Время в миллисекундах, через которое автоматически произойдет закрытие Modal.",
                    "required": false,
                    "type": "number",
                    "example": "1000",
                    "defaultValue": null
                },
                {
                    "name": "closeTimeoutMs",
                    "decorators": [],
                    "description": "Время, в течение которого будет происходить анимация закрытия Modal.\nПереопределяет отрезок времени, заданный в ModalPortal",
                    "required": false,
                    "type": "number",
                    "example": "300",
                    "defaultValue": null
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "Свойства для внутреннего компонента",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "Группа Modal",
                    "required": false,
                    "type": "string",
                    "example": "'modal'",
                    "defaultValue": null
                },
                {
                    "name": "index",
                    "decorators": [],
                    "description": "Порядковый номер Modal",
                    "required": false,
                    "type": "number",
                    "example": "0",
                    "defaultValue": null
                },
                {
                    "name": "isClosing",
                    "decorators": [],
                    "description": "Значение свойства отслеживается для показа/закрытия Modal.\nЕсли для компонента ModalPortal установлено значение задержки (animationDelayMc), то после закрытия\nпользователем Modal, оно исчезнет не сразу, а через указанный в animationDelayMc промежуток времени.\nВ течение этого времени флаг isClosing будет равен true.\nЕсли задержка не установлена, Modal закроется сразу же и флаг isClosing всегда будет равен false.",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "shouldCloseOnEsc",
                    "decorators": [],
                    "description": "Закрытие Modal при нажатии на клавишу 'ESC'",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "true"
                },
                {
                    "name": "shouldCloseOnOverlayClick",
                    "decorators": [],
                    "description": "Закрытие Modal при клике на компонент overlay внутри Modal (темный фон, отделяющий контент страницы от Modal)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "true"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер Modal",
                    "required": false,
                    "type": "string",
                    "example": "'middle'",
                    "defaultValue": "'md'"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок Modal",
                    "required": false,
                    "type": "string",
                    "example": "'Заявка отправлена на модерацию'",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение React-компонента для кастомизации view-отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент, который отрендерится внутри Modal",
                    "required": false,
                    "type": "Element",
                    "example": "() => <InnerModalComponent />",
                    "parameters": [
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Обработчик срабатывает при закрытии Modal",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IModalPortalProps": {
            "name": "IModalPortalProps",
            "moduleName": "ui/modal/ModalPortal/ModalPortal",
            "title": "Компонент ModalPortal отвечает за отображение модальных окон.",
            "description": "",
            "tags": {},
            "defaultProps": {
                "animationDelayMc": "300",
                "group": "string"
            },
            "extends": [],
            "properties": [
                {
                    "name": "animationDelayMc",
                    "decorators": [],
                    "description": "Время, через которое произойдет закрытие Modal",
                    "required": false,
                    "type": "number",
                    "example": "300",
                    "defaultValue": "300"
                },
                {
                    "name": "group",
                    "decorators": [],
                    "description": "Группа Modal",
                    "required": false,
                    "type": "string",
                    "example": "'modal'",
                    "defaultValue": "string"
                }
            ],
            "methods": []
        },
        "ITwoFactorModalViewProps": {
            "name": "ITwoFactorModalViewProps",
            "moduleName": "ui/modal/TwoFactorModal/TwoFactorModal",
            "title": "Компонент TwoFactorModal отображает модальное окно для двухфакторной аутентификации.",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ITwoFactorModalPrivateProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "description",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "formProps",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "info",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{createTime: string, expireTime: string, isConfirmed: string, providerData: any, providerName: string}",
                    "example": null
                },
                {
                    "name": "onClose",
                    "decorators": [],
                    "description": "Функция, которая вызывается при закрытии модального окна",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "providerName",
                    "decorators": [],
                    "description": "Имя провайдера",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": []
        },
        "IBreadcrumbsProps": {
            "name": "IBreadcrumbsProps",
            "moduleName": "ui/nav/Breadcrumbs/Breadcrumbs",
            "title": "Breadcrumbs",
            "description": "\nКомпонент Breadcrumbs отображает хлебные крошки.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Кастомный CSS-класс",
                    "required": false,
                    "type": "string",
                    "example": "'CustomCssClassName'",
                    "defaultValue": null
                },
                {
                    "name": "customIcon",
                    "decorators": [],
                    "description": "Кастомная иконка, заменяющая первый роут",
                    "required": false,
                    "type": "string | ReactElement",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция элементов навигационной цепочки",
                    "required": false,
                    "type": "IRouteItem[]",
                    "example": "[\n {\n  id: 'root',\n  title: 'Home'\n },\n {\n  id: 'catalog',\n  title: 'Catalog'\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "pageId",
                    "decorators": [],
                    "description": "Вместо items можно передать идентификатор роута, от которого компонент самостоятельно построит\nнавигационную цепочку",
                    "required": false,
                    "type": "string",
                    "example": "'catalog'",
                    "defaultValue": null
                },
                {
                    "name": "pageTitle",
                    "decorators": [],
                    "description": "Заголовок последней в списке страницы (обычно, это текущая страница, на которой находится пользователь).\nЕсли заголовок не задан, то подставится item.title",
                    "required": false,
                    "type": "string",
                    "example": "'Каталог'",
                    "defaultValue": null
                },
                {
                    "name": "showIcon",
                    "decorators": [],
                    "description": "Показать иконку заменяющую первый роут",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IButtonGroupProps": {
            "name": "IButtonGroupProps",
            "moduleName": "ui/nav/ButtonGroup/ButtonGroup",
            "title": "ButtonGroup",
            "description": "\nКомпонент ButtonGroup отображает группу кнопок.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "activeButton",
                    "decorators": [],
                    "description": "При указании в связке с onClick предоставляет возможность реализовать two-way binding",
                    "required": false,
                    "type": "string | number",
                    "example": "'button1'",
                    "defaultValue": null
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Общие свойства для всех кнопок группы",
                    "required": false,
                    "type": "IButtonProps",
                    "example": "{\n outline: true,\n color: 'secondary'\n}",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "defaultActiveButton",
                    "decorators": [],
                    "description": "Кнопка по умолчанию.",
                    "required": false,
                    "type": "string | number",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Элементы для группы кнопок",
                    "required": true,
                    "type": "string | {} | string | number | {id: string | number | boolean, label: string | any}[]",
                    "example": "[\n 'button1',\n 'button2',\n 'button3'\n]",
                    "defaultValue": null
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Функция, которая будет вызываться при клике по кнопке",
                    "required": true,
                    "type": "Dispatch | {}",
                    "example": "setActiveTab",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IButtonGroupViewProps": {
            "name": "IButtonGroupViewProps",
            "moduleName": "ui/nav/ButtonGroup/ButtonGroup",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "Omit<IButtonGroupProps",
                "'items'>"
            ],
            "properties": [
                {
                    "name": "activeButton",
                    "decorators": [],
                    "description": "При указании в связке с onClick предоставляет возможность реализовать two-way binding",
                    "required": false,
                    "type": "string | number",
                    "example": "'button1'"
                },
                {
                    "name": "buttonProps",
                    "decorators": [],
                    "description": "Общие свойства для всех кнопок группы",
                    "required": false,
                    "type": "IButtonProps",
                    "example": "{\n outline: true,\n color: 'secondary'\n}"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "defaultActiveButton",
                    "decorators": [],
                    "description": "Кнопка по умолчанию.",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "{id: string | number | boolean, label: string}[]",
                    "example": null
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Функция, которая будет вызываться при клике по кнопке",
                    "required": true,
                    "type": "Dispatch | {}",
                    "example": "setActiveTab"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": []
        },
        "IControlItem": {
            "name": "IControlItem",
            "moduleName": "ui/nav/Controls/Controls",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?"
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор контрола",
                    "required": false,
                    "type": "string",
                    "example": "'create'"
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "position",
                    "decorators": [],
                    "description": "Расположение контрола",
                    "required": false,
                    "type": "\"right\" | \"left\"",
                    "example": "'left'"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "Выбор html-тэга, который будет вставлен в DOM",
                    "required": false,
                    "type": "\"a\" | \"button\"",
                    "example": "button"
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank"
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "Цвет текста кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile"
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "Record",
                    "example": "{userId: 52}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit"
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу, используется совместно с свойством `link`",
                    "required": false,
                    "type": "string",
                    "example": "https://kozhindev.com"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Скрыть или показать контрол",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Обработчик события нажатия. Для асинхронных событий вовзращяйте в обработчике `Promise`, тогда кнопка\nавтоматически будет переключаться в режим загрузки (`loading`) на время выполнения `Promise`.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "=> fetch(...)\n",
                            "required": true,
                            "type": "Event | MouseEvent",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IControlsProps": {
            "name": "IControlsProps",
            "moduleName": "ui/nav/Controls/Controls",
            "title": "Controls",
            "description": "Коллекция с контролами. Можно передавать список с кастомными контролами, а можно использовать стандарные контролы\nкомпонента. Стандартные контролы подходят для CRUD-операций, все что нужно для их использования - передать\nсоответствующий id и обработчик - внешний вид (иконка и название) отобразятся автоматом.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": "MyCustomView",
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция контролов",
                    "required": false,
                    "type": "IControlItem[]",
                    "example": "[\n {\n  id: 'delete',\n  onClick: () => alert(\"It's deleted\")\n }\n]",
                    "defaultValue": null
                },
                {
                    "name": "navProps",
                    "decorators": [],
                    "description": "Пропсы для компонента Nav, в который передаются контролы в качестве items",
                    "required": false,
                    "type": "INavProps",
                    "example": "{layout: 'link'}",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "IControlsViewProps": {
            "name": "IControlsViewProps",
            "moduleName": "ui/nav/Controls/Controls",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IControlsProps"
            ],
            "properties": [
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция контролов",
                    "required": true,
                    "type": "IControlItem & {color: string, confirm: string, icon: string, label: any, outline: boolean, position: \"right\" | \"left\"}[]",
                    "example": null
                },
                {
                    "name": "navProps",
                    "decorators": [],
                    "description": "Пропсы для компонента Nav, в который передаются контролы в качестве items",
                    "required": false,
                    "type": "INavProps",
                    "example": "{layout: 'link'}"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": []
        },
        "ILinkProps": {
            "name": "ILinkProps",
            "moduleName": "ui/nav/Link/Link",
            "title": "Link",
            "description": "\nС помощью компонента `Link` вы можете легко настраивать цветовую схему элементов ссылок.\n",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success",
                    "defaultValue": null
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?",
                    "defaultValue": null
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string | boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "any",
                    "example": "Save",
                    "defaultValue": null
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": "Save",
                    "defaultValue": null
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": null
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000",
                    "defaultValue": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "Выбор html-тэга, который будет вставлен в DOM",
                    "required": false,
                    "type": "\"a\" | \"button\"",
                    "example": "button",
                    "defaultValue": null
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank",
                    "defaultValue": null
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "Цвет текста кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile",
                    "defaultValue": null
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "Record",
                    "example": "{userId: 52}",
                    "defaultValue": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit",
                    "defaultValue": null
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу, используется совместно с свойством `link`",
                    "required": false,
                    "type": "string",
                    "example": "https://kozhindev.com",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Обработчик события нажатия. Для асинхронных событий вовзращяйте в обработчике `Promise`, тогда кнопка\nавтоматически будет переключаться в режим загрузки (`loading`) на время выполнения `Promise`.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "e",
                            "decorators": [],
                            "description": "=> fetch(...)\n",
                            "required": true,
                            "type": "Event | MouseEvent",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "INavItem": {
            "name": "INavItem",
            "moduleName": "ui/nav/Nav/Nav",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "IButtonProps"
            ],
            "properties": [
                {
                    "name": "badge",
                    "decorators": [],
                    "description": "Цифра (к примеру, новые сообщения)",
                    "required": false,
                    "type": "number | IButtonBadge",
                    "example": null
                },
                {
                    "name": "block",
                    "decorators": [],
                    "description": "Включает стиль `block`, делая размер кнопки на 100% ширины блока",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет состояния",
                    "required": false,
                    "type": "string",
                    "example": "success"
                },
                {
                    "name": "confirm",
                    "decorators": [],
                    "description": "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.",
                    "required": false,
                    "type": "string",
                    "example": "Удалить запись #512?"
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Контент, который отобразиться, если элемент навигации будет активен",
                    "required": false,
                    "type": "any",
                    "example": "ContentComponent"
                },
                {
                    "name": "contentProps",
                    "decorators": [],
                    "description": "Свойства для компонента с контентом",
                    "required": false,
                    "type": "any",
                    "example": "{\n content: 'Some text'\n}"
                },
                {
                    "name": "dark",
                    "decorators": [],
                    "description": "Темная тема",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "disabled",
                    "decorators": [],
                    "description": "Переводит кнопку в состояние \"не активна\"",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "formId",
                    "decorators": [],
                    "description": "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.",
                    "required": false,
                    "type": "string | boolean",
                    "example": null
                },
                {
                    "name": "hint",
                    "decorators": [],
                    "description": "Подсказка, отображается при наведении (через тег title)",
                    "required": false,
                    "type": "any",
                    "example": "Save"
                },
                {
                    "name": "icon",
                    "decorators": [],
                    "description": "Иконка",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор элемента",
                    "required": false,
                    "type": "string | number",
                    "example": null
                },
                {
                    "name": "isFailed",
                    "decorators": [],
                    "description": "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "isLoading",
                    "decorators": [],
                    "description": "Отображать индикатор загрузки?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "itemProps",
                    "decorators": [],
                    "description": "Props для пункта",
                    "required": false,
                    "type": "IButtonProps",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Вложенные элементы",
                    "required": false,
                    "type": "INavItem[]",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст элемента",
                    "required": false,
                    "type": "any",
                    "example": "'Отзывы'"
                },
                {
                    "name": "link",
                    "decorators": [],
                    "description": "Отображать как ссылку?",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "outline",
                    "decorators": [],
                    "description": "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "resetFailedMs",
                    "decorators": [],
                    "description": "Через сколько миллисекунд должно исчезнуть состояние \"failed\"",
                    "required": false,
                    "type": "number",
                    "example": "5000"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}"
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "Выбор html-тэга, который будет вставлен в DOM",
                    "required": false,
                    "type": "\"a\" | \"button\"",
                    "example": "button"
                },
                {
                    "name": "target",
                    "decorators": [],
                    "description": "HTML аттрибут `target`, доступен только для ссылок",
                    "required": false,
                    "type": "string",
                    "example": "_blank"
                },
                {
                    "name": "textColor",
                    "decorators": [],
                    "description": "Цвет текста кнопки или ссылки",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "toRoute",
                    "decorators": [],
                    "description": "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`",
                    "required": false,
                    "type": "string",
                    "example": "profile"
                },
                {
                    "name": "toRouteParams",
                    "decorators": [],
                    "description": "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.",
                    "required": false,
                    "type": "Record",
                    "example": "{userId: 52}"
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "HTML Тип",
                    "required": false,
                    "type": "\"button\" | \"submit\"",
                    "example": "submit"
                },
                {
                    "name": "url",
                    "decorators": [],
                    "description": "Ссылка на внешнюю страницу",
                    "required": false,
                    "type": "string",
                    "example": "https://ya.ru"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения элемента",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                },
                {
                    "name": "visible",
                    "decorators": [],
                    "description": "Видимость элемента",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                }
            ],
            "methods": [
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "Обработчик события нажатия",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "INavProps": {
            "name": "INavProps",
            "moduleName": "ui/nav/Nav/Nav",
            "title": "Nav",
            "description": "\nКомпонент навигации позволяет переключаться между группами связанного контента.\n\n",
            "tags": {},
            "defaultProps": {
                "layout": "'button'",
                "size": "'md'"
            },
            "extends": [],
            "properties": [
                {
                    "name": "activeTab",
                    "decorators": [],
                    "description": "Идентификатор активного элемента. По умолчанию будет активен первый элемент.",
                    "required": false,
                    "type": "string | number",
                    "example": "1",
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция с элементами навигации. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в навигации.",
                    "required": false,
                    "type": "string | INavItem[]",
                    "example": "[\n {\n  id: 1,\n  label: 'One'\n },\n {\n  id: 2,\n  label: 'Two'\n }\n] | 'root'",
                    "defaultValue": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Шаблон отображения элементов навигации",
                    "required": false,
                    "type": "string",
                    "example": "'link'",
                    "defaultValue": "'button'"
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": "'md'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения элемента",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик, который вызывается при смене активного элемента навигации",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "INavViewProps": {
            "name": "INavViewProps",
            "moduleName": "ui/nav/Nav/Nav",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "INavProps"
            ],
            "properties": [
                {
                    "name": "activeTab",
                    "decorators": [],
                    "description": "Идентификатор активного элемента. По умолчанию будет активен первый элемент.",
                    "required": false,
                    "type": "string | number",
                    "example": "1"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция с элементами навигации. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в навигации.",
                    "required": true,
                    "type": "INavItem & {isActive: boolean, isActiveNested: boolean}[]",
                    "example": null
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Шаблон отображения элементов навигации",
                    "required": false,
                    "type": "string",
                    "example": "'link'"
                },
                {
                    "name": "navClassName",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "size",
                    "decorators": [],
                    "description": "Размер",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения элемента",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onChange",
                    "decorators": [],
                    "description": "Обработчик, который вызывается при смене активного элемента навигации",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        },
                        {
                            "name": "index",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IRouteItem": {
            "name": "IRouteItem",
            "moduleName": "ui/nav/Router/Router",
            "title": "Router",
            "description": "Маршрутизатор.\nКомпонент получает общий для приложения шаблон и дерево роутов. Из дерева роутов посредством React Router\nобразуется switch-конструкция, которая в зависимости от текущего пути рендерит соответствующий компонент страницы.\nИли осуществляет редирект на другую страницу. Все страницы оборачиваются в переданный шаблон.",
            "tags": {},
            "defaultProps": null,
            "extends": [],
            "properties": [
                {
                    "name": "component",
                    "decorators": [],
                    "description": "Компонент страницы, который отобразится, если путь будет соответствовать location.pathname",
                    "required": false,
                    "type": "any",
                    "example": "CatalogPage"
                },
                {
                    "name": "componentProps",
                    "decorators": [],
                    "description": "Свойства для компонента страницы",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "enums",
                    "decorators": [],
                    "description": "Название или список с названиями перечислений, полученных с бэкенда",
                    "required": false,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "exact",
                    "decorators": [],
                    "description": "Если true, то путь должен точно соответствовать location.pathname",
                    "required": false,
                    "type": "boolean",
                    "example": "'/catalog'"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор роута",
                    "required": false,
                    "type": "string",
                    "example": "'catalog'"
                },
                {
                    "name": "isNavVisible",
                    "decorators": [],
                    "description": "Отображать ссылку или кнопку в навигации для перехода на данный роут",
                    "required": false,
                    "type": "boolean",
                    "example": "false"
                },
                {
                    "name": "isVisible",
                    "decorators": [],
                    "description": "Отображать или показывать роут",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Вложенные роуты",
                    "required": false,
                    "type": "IRouteItem[] | {}",
                    "example": null
                },
                {
                    "name": "label",
                    "decorators": [],
                    "description": "Текст, который отобразится на кнопке навигации для данного роута",
                    "required": false,
                    "type": "string",
                    "example": "'Каталог'"
                },
                {
                    "name": "layout",
                    "decorators": [],
                    "description": "Тип шаблона для данного роута",
                    "required": false,
                    "type": "string",
                    "example": "'dark'"
                },
                {
                    "name": "models",
                    "decorators": [],
                    "description": "Название или список с названиями моделей, полученных с бэкенда",
                    "required": false,
                    "type": "string | string[]",
                    "example": null
                },
                {
                    "name": "path",
                    "decorators": [],
                    "description": "Путь до роута",
                    "required": false,
                    "type": "string",
                    "example": "'/catalog'"
                },
                {
                    "name": "redirectTo",
                    "decorators": [],
                    "description": "В свойстве можно передать как путь, на который осуществится редирект, так и булево значение.\nЕсли свойство равно true - то редирект произойдет на первый из вложенных роутов.",
                    "required": false,
                    "type": "string | boolean",
                    "example": "true"
                },
                {
                    "name": "role",
                    "decorators": [],
                    "description": "Назначение страницы, указывается, чтобы приложение автоматически могло найти страницу авторизации или 404-ю..",
                    "required": false,
                    "type": "string",
                    "example": "'login'"
                },
                {
                    "name": "roles",
                    "decorators": [],
                    "description": "Список с ролями, который показывает, кому из пользователей будет доступен просмотр страницы",
                    "required": false,
                    "type": "string[]",
                    "example": "['user', 'admin']"
                },
                {
                    "name": "title",
                    "decorators": [],
                    "description": "Заголовок страницы",
                    "required": false,
                    "type": "string",
                    "example": "'Каталог'"
                }
            ],
            "methods": [
                {
                    "name": "preloadData",
                    "decorators": [],
                    "description": "Обработчик, который принимает параметры URL и возвращает массив с пропсами для хука useFetch и компонента\nList.\nФункция запускается перед рендерингом приложения в режиме SSR и используется для предварительной\nзагрузки данных, необходимых на текущей странице.\nХук useFetch и компонент List не будут повторно инициализироваться и делать запросы на клиенте,\nесли подгруженные данные существуют.",
                    "required": false,
                    "type": "IFetchConfig | IListProps[]",
                    "example": null,
                    "parameters": [
                        {
                            "name": "match",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "IRouterProps": {
            "name": "IRouterProps",
            "moduleName": "ui/nav/Router/Router",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": {
                "autoScrollTop": "true"
            },
            "extends": [],
            "properties": [
                {
                    "name": "autoScrollTop",
                    "decorators": [],
                    "description": "Прокрутить страницу к началу при смене url",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "true"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Контент, который отобразится под каждой страницей приложения",
                    "required": false,
                    "type": "ReactNode",
                    "example": "SomeComponent",
                    "defaultValue": null
                },
                {
                    "name": "defaultRoles",
                    "decorators": [],
                    "description": "Если у роута не задано свойство roles, которое определяет, кому из пользователей будет доступен контент\nна соответствующей странице, то подставится стандартный список с ролями",
                    "required": false,
                    "type": "string[]",
                    "example": "[null, 'user', 'admin']",
                    "defaultValue": null
                },
                {
                    "name": "routes",
                    "decorators": [],
                    "description": "Дерево роутов",
                    "required": false,
                    "type": "IRouteItem[] | {}",
                    "example": "{id: 'root', path: '/', component: IndexPage, items: [...]}",
                    "defaultValue": null
                },
                {
                    "name": "wrapperProps",
                    "decorators": [],
                    "description": "Свойства шаблона",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "wrapperView",
                    "decorators": [],
                    "description": "Общий шаблон, который оборачивает страницы приложения",
                    "required": false,
                    "type": "any",
                    "example": "Layout",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "ITreeItemViewProps": {
            "name": "ITreeItemViewProps",
            "moduleName": "ui/nav/Tree/Tree",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ITreeProps"
            ],
            "properties": [
                {
                    "name": "alwaysOpened",
                    "decorators": [],
                    "description": " Используется для управления раскрытием всех элементов в дереве",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "autoOpenLevels",
                    "decorators": [],
                    "description": "Максимальный уровень вложенности, до которого все узлы будут отображаться в развёрнутом виде",
                    "required": false,
                    "type": "number",
                    "example": "1"
                },
                {
                    "name": "autoSave",
                    "decorators": [],
                    "description": "Отображать раскрытыми узлы из LocalStorage",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "children",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Element",
                    "example": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hasIconExpandOnly",
                    "decorators": [],
                    "description": "Флаг, определяющий раскрывать вложенные элементы по клику на весь элемент или только на иконку",
                    "required": false,
                    "type": "boolean",
                    "example": "false"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор (ключ) для сохранения в LocalStorage коллекции с раскрытыми узлами",
                    "required": false,
                    "type": "string",
                    "example": "'exampleTree'"
                },
                {
                    "name": "item",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "IPreparedTreeItem",
                    "example": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция с узлами. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в виде дерева.",
                    "required": false,
                    "type": "string | ITreeItem[]",
                    "example": "[\n {\n  id: 1,\n  label: 'Root',\n  items: [...]\n }\n] | 'root'"
                },
                {
                    "name": "itemsKey",
                    "decorators": [],
                    "description": "Ключ для доступа к вложенным элементам узла",
                    "required": false,
                    "type": "string",
                    "example": "'items'"
                },
                {
                    "name": "level",
                    "decorators": [],
                    "description": "Ограничивает максимальный уровень вложенности дерева",
                    "required": false,
                    "type": "number",
                    "example": "2"
                },
                {
                    "name": "levelPadding",
                    "decorators": [],
                    "description": "Расстояние вложенных элементов от родителя для каждого уровня",
                    "required": false,
                    "type": "number",
                    "example": "32"
                },
                {
                    "name": "routerParams",
                    "decorators": [],
                    "description": " Параметры роутинга",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "selectedItemId",
                    "decorators": [],
                    "description": "Идентификатор узла, которой нужно отобразить в раскрытом виде",
                    "required": false,
                    "type": "string | number",
                    "example": "2"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения элемента",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onExpand",
                    "decorators": [],
                    "description": "Обработчик на клик по узлу",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "Обработчик на клик по узлу",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITreeProps": {
            "name": "ITreeProps",
            "moduleName": "ui/nav/Tree/Tree",
            "title": "Tree",
            "description": "Компонент, который представляет в виде дерева список с иерархической структурой данных",
            "tags": {},
            "defaultProps": {
                "autoOpenLevels": "1",
                "autoSave": "false",
                "hasIconExpandOnly": "false",
                "itemsKey": "'items'",
                "level": "0",
                "levelPadding": "32"
            },
            "extends": [
                "Omit<ITreeConfig",
                "'currentPage' | 'itemsOnPage'>"
            ],
            "properties": [
                {
                    "name": "alwaysOpened",
                    "decorators": [],
                    "description": " Используется для управления раскрытием всех элементов в дереве",
                    "required": false,
                    "type": "boolean",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "autoOpenLevels",
                    "decorators": [],
                    "description": "Максимальный уровень вложенности, до которого все узлы будут отображаться в развёрнутом виде",
                    "required": false,
                    "type": "number",
                    "example": "1",
                    "defaultValue": "1"
                },
                {
                    "name": "autoSave",
                    "decorators": [],
                    "description": "Отображать раскрытыми узлы из LocalStorage",
                    "required": false,
                    "type": "boolean",
                    "example": "true",
                    "defaultValue": "false"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "hasIconExpandOnly",
                    "decorators": [],
                    "description": "Флаг, определяющий раскрывать вложенные элементы по клику на весь элемент или только на иконку",
                    "required": false,
                    "type": "boolean",
                    "example": "false",
                    "defaultValue": "false"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор (ключ) для сохранения в LocalStorage коллекции с раскрытыми узлами",
                    "required": false,
                    "type": "string",
                    "example": "'exampleTree'",
                    "defaultValue": null
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция с узлами. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в виде дерева.",
                    "required": false,
                    "type": "string | ITreeItem[]",
                    "example": "[\n {\n  id: 1,\n  label: 'Root',\n  items: [...]\n }\n] | 'root'",
                    "defaultValue": null
                },
                {
                    "name": "itemsKey",
                    "decorators": [],
                    "description": "Ключ для доступа к вложенным элементам узла",
                    "required": false,
                    "type": "string",
                    "example": "'items'",
                    "defaultValue": "'items'"
                },
                {
                    "name": "level",
                    "decorators": [],
                    "description": "Ограничивает максимальный уровень вложенности дерева",
                    "required": false,
                    "type": "number",
                    "example": "2",
                    "defaultValue": "0"
                },
                {
                    "name": "levelPadding",
                    "decorators": [],
                    "description": "Расстояние вложенных элементов от родителя для каждого уровня",
                    "required": false,
                    "type": "number",
                    "example": "32",
                    "defaultValue": "32"
                },
                {
                    "name": "routerParams",
                    "decorators": [],
                    "description": " Параметры роутинга",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "selectedItemId",
                    "decorators": [],
                    "description": "Идентификатор узла, которой нужно отобразить в раскрытом виде",
                    "required": false,
                    "type": "string | number",
                    "example": "2",
                    "defaultValue": null
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения элемента",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": [
                {
                    "name": "onExpand",
                    "decorators": [],
                    "description": "Обработчик на клик по узлу",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "Обработчик на клик по узлу",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITreeViewProps": {
            "name": "ITreeViewProps",
            "moduleName": "ui/nav/Tree/Tree",
            "title": "",
            "description": "",
            "tags": {},
            "defaultProps": null,
            "extends": [
                "ITreeProps"
            ],
            "properties": [
                {
                    "name": "alwaysOpened",
                    "decorators": [],
                    "description": " Используется для управления раскрытием всех элементов в дереве",
                    "required": false,
                    "type": "boolean",
                    "example": null
                },
                {
                    "name": "autoOpenLevels",
                    "decorators": [],
                    "description": "Максимальный уровень вложенности, до которого все узлы будут отображаться в развёрнутом виде",
                    "required": false,
                    "type": "number",
                    "example": "1"
                },
                {
                    "name": "autoSave",
                    "decorators": [],
                    "description": "Отображать раскрытыми узлы из LocalStorage",
                    "required": false,
                    "type": "boolean",
                    "example": "true"
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "hasIconExpandOnly",
                    "decorators": [],
                    "description": "Флаг, определяющий раскрывать вложенные элементы по клику на весь элемент или только на иконку",
                    "required": false,
                    "type": "boolean",
                    "example": "false"
                },
                {
                    "name": "id",
                    "decorators": [],
                    "description": "Идентификатор (ключ) для сохранения в LocalStorage коллекции с раскрытыми узлами",
                    "required": false,
                    "type": "string",
                    "example": "'exampleTree'"
                },
                {
                    "name": "items",
                    "decorators": [],
                    "description": "Коллекция с узлами. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в виде дерева.",
                    "required": true,
                    "type": "IPreparedTreeItem[]",
                    "example": null
                },
                {
                    "name": "itemsKey",
                    "decorators": [],
                    "description": "Ключ для доступа к вложенным элементам узла",
                    "required": false,
                    "type": "string",
                    "example": "'items'"
                },
                {
                    "name": "level",
                    "decorators": [],
                    "description": "Ограничивает максимальный уровень вложенности дерева",
                    "required": false,
                    "type": "number",
                    "example": "2"
                },
                {
                    "name": "levelPadding",
                    "decorators": [],
                    "description": "Расстояние вложенных элементов от родителя для каждого уровня",
                    "required": false,
                    "type": "number",
                    "example": "32"
                },
                {
                    "name": "routerParams",
                    "decorators": [],
                    "description": " Параметры роутинга",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "selectedItemId",
                    "decorators": [],
                    "description": "Идентификатор узла, которой нужно отобразить в раскрытом виде",
                    "required": false,
                    "type": "string | number",
                    "example": "2"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения элемента",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView"
                }
            ],
            "methods": [
                {
                    "name": "onExpand",
                    "decorators": [],
                    "description": "Обработчик на клик по узлу",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onItemClick",
                    "decorators": [],
                    "description": "Обработчик на клик по узлу",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "args",
                            "decorators": [],
                            "description": "\n",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ITextProps": {
            "name": "ITextProps",
            "moduleName": "ui/typography/Text/Text",
            "title": "Text",
            "description": "\nКомпонент для вывода текстового содержимого, с возможностью настройки тэгов, цвета и типа\n",
            "tags": {},
            "defaultProps": {
                "type": "'body'"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет текста",
                    "required": false,
                    "type": "string",
                    "example": "'primary'",
                    "defaultValue": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Текст",
                    "required": false,
                    "type": "string",
                    "example": "'Simple text'",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "HTML тег",
                    "required": false,
                    "type": "string",
                    "example": "'span'",
                    "defaultValue": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Тип текста",
                    "required": false,
                    "type": "string",
                    "example": "'body'",
                    "defaultValue": "'body'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        },
        "ITitleProps": {
            "name": "ITitleProps",
            "moduleName": "ui/typography/Title/Title",
            "title": "Title",
            "description": "\nКомпонент предназначен для вывода заголовков, предоставляет возможность для настройки, цвета, типа и тэга.\n",
            "tags": {},
            "defaultProps": {
                "type": "'h2'"
            },
            "extends": [
                "IUiComponent"
            ],
            "properties": [
                {
                    "name": "children",
                    "decorators": [],
                    "description": "Дочерние элементы",
                    "required": false,
                    "type": "ReactNode",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "className",
                    "decorators": [],
                    "description": "Дополнительный CSS-класс для элемента отображения",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "defaultValue": null
                },
                {
                    "name": "color",
                    "decorators": [],
                    "description": "Цвет заголовка",
                    "required": false,
                    "type": "string",
                    "example": "'primary'",
                    "defaultValue": null
                },
                {
                    "name": "content",
                    "decorators": [],
                    "description": "Текст заголовка",
                    "required": false,
                    "type": "string",
                    "example": "'Simple text'",
                    "defaultValue": null
                },
                {
                    "name": "style",
                    "decorators": [],
                    "description": "Объект CSS стилей",
                    "required": false,
                    "type": "CSSProperties",
                    "example": "{width: '45%'}",
                    "defaultValue": null
                },
                {
                    "name": "tag",
                    "decorators": [],
                    "description": "HTML тег",
                    "required": false,
                    "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
                    "example": "'h2'",
                    "defaultValue": null
                },
                {
                    "name": "type",
                    "decorators": [],
                    "description": "Тип заголовка",
                    "required": false,
                    "type": "string",
                    "example": "'h1'",
                    "defaultValue": "'h2'"
                },
                {
                    "name": "view",
                    "decorators": [],
                    "description": "Переопределение view React компонента для кастомизации отображения",
                    "required": false,
                    "type": "React.ReactNode | {}",
                    "example": "MyCustomView",
                    "defaultValue": null
                }
            ],
            "methods": []
        }
    },
    "declarations": {
        "PositionType": {
            "name": "PositionType",
            "decorators": [],
            "description": "Варианты абсолютного позиционирования",
            "required": true,
            "type": " | string",
            "example": "'top'"
        },
        "ListControlPosition": {
            "name": "ListControlPosition",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "\"top\" | \"bottom\" | \"both\" | string",
            "example": null
        },
        "DataProviderItems": {
            "name": "DataProviderItems",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "string | {} | string | number | {id: string | number | boolean, label: string | any}[]",
            "example": null
        },
        "ColorName": {
            "name": "ColorName",
            "decorators": [],
            "description": "Название цвета, соответствующее ему состоянию",
            "required": true,
            "type": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"basic\" | string",
            "example": null
        },
        "CssClassName": {
            "name": "CssClassName",
            "decorators": [],
            "description": "Дополнительные CSS классы",
            "required": true,
            "type": "string",
            "example": "my-block"
        },
        "CustomIcon": {
            "name": "CustomIcon",
            "decorators": [],
            "description": "Кастомная иконка",
            "required": true,
            "type": "string | React.ReactElement",
            "example": "custom-icon"
        },
        "CustomStyle": {
            "name": "CustomStyle",
            "decorators": [],
            "description": "Дополнительные стили",
            "required": true,
            "type": "React.CSSProperties",
            "example": "my-block"
        },
        "CustomView": {
            "name": "CustomView",
            "decorators": [],
            "description": "Переопределение view React компонента для кастомизации отображения",
            "required": true,
            "type": "React.ReactNode | {}",
            "example": "MyCustomView"
        },
        "FormInputType": {
            "name": "FormInputType",
            "decorators": [],
            "description": "Объект из свойства `input` от redux-form",
            "required": true,
            "type": "{name: string, value: any, onChange: null}",
            "example": null
        },
        "HttpMethod": {
            "name": "HttpMethod",
            "decorators": [],
            "description": "HTTP метод",
            "required": true,
            "type": "\"get\" | \"post\" | \"put\" | \"delete\" | string",
            "example": null
        },
        "Orientation": {
            "name": "Orientation",
            "decorators": [],
            "description": "Ориентация элемента",
            "required": true,
            "type": "\"horizontal\" | \"vertical\" | string",
            "example": null
        },
        "PrimaryKey": {
            "name": "PrimaryKey",
            "decorators": [],
            "description": "Уникальный ключ. ID, UUID или другое",
            "required": true,
            "type": "number | string",
            "example": null
        },
        "Size": {
            "name": "Size",
            "decorators": [],
            "description": "Размер элемента",
            "required": true,
            "type": "\"small\" | \"middle\" | \"large\" | string",
            "example": null
        },
        "TNotificationsState": {
            "name": "TNotificationsState",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "{items: any[], position: string}",
            "example": null
        },
        "IAccordionItemProps": {
            "name": "IAccordionItemProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "IAccordionProps",
            "example": null
        },
        "IAccordionItemViewProps": {
            "name": "IAccordionItemViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "IAccordionViewProps",
            "example": null
        },
        "IAvatarGroupViewProps": {
            "name": "IAvatarGroupViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "AvatarGroupProps",
            "example": null
        },
        "CalendarSystemEventGroupModalFields": {
            "name": "CalendarSystemEventGroupModalFields",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "\"label\" | \"color\"",
            "example": null
        },
        "CalendarSystemModalFields": {
            "name": "CalendarSystemModalFields",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "\"title\" | \"eventGroupId\" | \"date\" | \"description\"",
            "example": null
        },
        "ICardViewProps": {
            "name": "ICardViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "ICardProps",
            "example": null
        },
        "IChartViewProps": {
            "name": "IChartViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "IChartProps",
            "example": null
        },
        "IChatConfig": {
            "name": "IChatConfig",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "Pick",
            "example": null
        },
        "IGroupedMessagesByDates": {
            "name": "IGroupedMessagesByDates",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "Record",
            "example": null
        },
        "IKanbanViewProps": {
            "name": "IKanbanViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "IKanbanProps",
            "example": null
        },
        "IMenuViewProps": {
            "name": "IMenuViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "IMenuProps",
            "example": null
        },
        "ISliderViewProps": {
            "name": "ISliderViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "ISliderProps",
            "example": null
        },
        "ContentType": {
            "name": "ContentType",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "\"checkbox\" | \"radio\" | \"icon\" | \"img\"",
            "example": null
        },
        "ItemSwitchType": {
            "name": "ItemSwitchType",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "ContentType | \"group\" | string",
            "example": null
        },
        "IElementInputType": {
            "name": "IElementInputType",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "\"button\" | \"checkbox\" | \"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"hidden\" | \"image\" | \"month\" | \"number\" | \"password\" | \"radio\" | \"range\" | \"reset\" | \"search\" | \"submit\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\" | string",
            "example": null
        },
        "IMaskFieldProps": {
            "name": "IMaskFieldProps",
            "decorators": [],
            "description": "MaskField\n\nКомпонент поля ввода текста с маской.\n",
            "required": true,
            "type": "IInputFieldProps",
            "example": null
        },
        "ILoaderViewProps": {
            "name": "ILoaderViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "ILoaderProps",
            "example": null
        },
        "IEmptyViewProps": {
            "name": "IEmptyViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "IEmptyProps",
            "example": null
        },
        "ILayoutNamesViewProps": {
            "name": "ILayoutNamesViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "ILayoutNamesProps",
            "example": null
        },
        "IModalViewProps": {
            "name": "IModalViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "IModalProps",
            "example": null
        },
        "IBreadcrumbsViewProps": {
            "name": "IBreadcrumbsViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "IBreadcrumbsProps & {routeParams: any}",
            "example": null
        },
        "ILinkViewProps": {
            "name": "ILinkViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "IButtonViewProps",
            "example": null
        },
        "ITextViewProps": {
            "name": "ITextViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "ITextProps",
            "example": null
        },
        "ITitleViewProps": {
            "name": "ITitleViewProps",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "ITitleProps",
            "example": null
        },
        "TSmartSearchOutput": {
            "name": "TSmartSearchOutput",
            "decorators": [],
            "description": "",
            "required": true,
            "type": "ISmartSearchOutputItem[]",
            "example": null
        }
    },
    "components": {
        "base/Enum": {
            "name": "default",
            "moduleName": "base/Enum",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "getCssClass",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getCssClasses",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getDropdownItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: string, label: string}[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getKeys",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getLabel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getLabels",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "components/ClientStorageComponent": {
            "name": "default",
            "moduleName": "components/ClientStorageComponent",
            "title": "Client Storage Component",
            "description": "Слой хранения данных в браузере (cookie, local/session storage) или ReactNative",
            "tags": {},
            "properties": [
                {
                    "name": "domain",
                    "decorators": [],
                    "description": "Кастомный домен",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "decorators": [],
                    "description": "Получить значение из хранилища.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "storageName",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "remove",
                    "decorators": [],
                    "description": "Удалить значение из хранилища.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "storageName",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "set",
                    "decorators": [],
                    "description": "Установить значение в хранилище.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "storageName",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "expires",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/HtmlComponent": {
            "name": "default",
            "moduleName": "components/HtmlComponent",
            "title": "Html Component",
            "description": "Хелпер для работы с БЭМ классами и DOM элементами",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "addClass",
                    "decorators": [],
                    "description": "Метод для добавления css-класса к элементу",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "node",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "className",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "bem",
                    "decorators": [],
                    "description": "Утилита для создания css-классов по БЭМ",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "blockName",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "classNames",
                    "decorators": [],
                    "description": "Метод для соединения нескольких classNames",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "names",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any[]",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "removeClass",
                    "decorators": [],
                    "description": "Метод для удаления css-класса у элемента",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "node",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "className",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/HttpComponent": {
            "name": "default",
            "moduleName": "components/HttpComponent",
            "title": "Http Component",
            "description": "Обертка над Axios для запросов на бекенд. Поддерживает токен авторизации, CSRF и обработку ошибок.",
            "tags": {},
            "properties": [
                {
                    "name": "accessTokenKey",
                    "decorators": [],
                    "description": "Ключ для хранения токена в куках",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "apiUrl",
                    "decorators": [],
                    "description": "Url для http запросов",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "clientStorageExpiresIn",
                    "decorators": [],
                    "description": "Срок хранения токена в хранилище в днях",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "clientStorageName",
                    "decorators": [],
                    "description": "Имя хранилища для токена (local, session, или cookie)",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "afterRequest",
                    "decorators": [],
                    "description": "Метод, который вызывается после запроса",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "response",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "config",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "Вызов метода delete",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "get",
                    "decorators": [],
                    "description": "Вызов метода get",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getAccessToken",
                    "decorators": [],
                    "description": "Получение токена",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getAxiosConfig",
                    "decorators": [],
                    "description": "Получение конфига для axios",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getAxiosInstance",
                    "decorators": [],
                    "description": "Получение экземпляра axios",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getUrl",
                    "decorators": [],
                    "description": "Получение url по методу",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "method",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onLogin",
                    "decorators": [],
                    "description": "Метод, который можно вызвать при login",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{accessToken: string}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onLogout",
                    "decorators": [],
                    "description": "Метод, который можно вызвать при logout",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "post",
                    "decorators": [],
                    "description": "Вызов метода post",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "removeAccessToken",
                    "decorators": [],
                    "description": "Удаление токена",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "resetConfig",
                    "decorators": [],
                    "description": "Сбросить конфиг",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "send",
                    "decorators": [],
                    "description": "Вызов http-метода",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "method",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setAccessToken",
                    "decorators": [],
                    "description": "Изменение токена",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setCsrfToken",
                    "decorators": [],
                    "description": "Изменение csrf токена",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/JwtHttpComponent": {
            "name": "default",
            "moduleName": "components/JwtHttpComponent",
            "title": "JwtHttpComponent",
            "description": "Вариация HttpComponent с функционалом обновления токена авторизации",
            "tags": {},
            "properties": [
                {
                    "name": "accessTokenKey",
                    "decorators": [],
                    "description": "Ключ для хранения токена в куках",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "apiUrl",
                    "decorators": [],
                    "description": "Url для http запросов",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "clientStorageExpiresIn",
                    "decorators": [],
                    "description": "Срок хранения токена в хранилище в днях",
                    "required": false,
                    "type": "number",
                    "example": null
                },
                {
                    "name": "clientStorageName",
                    "decorators": [],
                    "description": "Имя хранилища для токена (local, session, или cookie)",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "refreshTokenKey",
                    "decorators": [],
                    "description": "Ключ токена авторизации для локального хранилища",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "refreshTokenRequest",
                    "decorators": [],
                    "description": "Запрос на обновление токена авторизации",
                    "required": false,
                    "type": "IRefreshTokenRequest",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "afterRequest",
                    "decorators": [],
                    "description": "Метод, который вызывается после запроса",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "response",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "config",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "delete",
                    "decorators": [],
                    "description": "Вызов метода delete",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "get",
                    "decorators": [],
                    "description": "Вызов метода get",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getAccessToken",
                    "decorators": [],
                    "description": "Получение токена",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getAxiosConfig",
                    "decorators": [],
                    "description": "Получение конфига для axios",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getAxiosInstance",
                    "decorators": [],
                    "description": "Получение экземпляра axios",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getUrl",
                    "decorators": [],
                    "description": "Получение url по методу",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "method",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onLogin",
                    "decorators": [],
                    "description": "Метод, который можно вызвать при login",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{accessToken: string, refreshToken: string}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "onLogout",
                    "decorators": [],
                    "description": "Метод, который можно вызвать при logout",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "post",
                    "decorators": [],
                    "description": "Вызов метода post",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "removeAccessToken",
                    "decorators": [],
                    "description": "Удаление токена",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "resetConfig",
                    "decorators": [],
                    "description": "Сбросить конфиг",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "send",
                    "decorators": [],
                    "description": "Вызов http-метода",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "method",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        },
                        {
                            "name": "options",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IHttpRequestOptions",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setAccessToken",
                    "decorators": [],
                    "description": "Изменение токена",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setCsrfToken",
                    "decorators": [],
                    "description": "Изменение csrf токена",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "value",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/LocaleComponent": {
            "name": "default",
            "moduleName": "components/LocaleComponent",
            "title": "Locale Component",
            "description": "Компонент для локализации приложения. Поддерживает конфигурацию языка и временной зоны",
            "tags": {},
            "properties": [
                {
                    "name": "backendTimeDiff",
                    "decorators": [],
                    "description": "Разница времени с бекендом (в микросекундах)",
                    "required": false,
                    "type": "null",
                    "example": null
                },
                {
                    "name": "backendTimeZone",
                    "decorators": [],
                    "description": "Временная зона бекенда",
                    "required": false,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "language",
                    "decorators": [],
                    "description": "Язык приложения",
                    "required": false,
                    "type": "string",
                    "example": "ru"
                },
                {
                    "name": "sourceLanguage",
                    "decorators": [],
                    "description": "Исходный язык",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "translations",
                    "decorators": [],
                    "description": "Переводы сообщений",
                    "required": false,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "dayjs",
                    "decorators": [],
                    "description": "Получение экземпляра `dayjs` с учетом временной зоны бекенда",
                    "required": false,
                    "type": "Dayjs",
                    "example": null,
                    "parameters": [
                        {
                            "name": "date",
                            "decorators": [],
                            "description": "Дата",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "format",
                            "decorators": [],
                            "description": "Формат\n",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "t",
                    "decorators": [],
                    "description": "Алиас для метода `translate`",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "message",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "translate",
                    "decorators": [],
                    "description": "Перевод сообщения",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "message",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "{}",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/MetaComponent": {
            "name": "default",
            "moduleName": "components/MetaComponent",
            "title": "Meta Component",
            "description": "Компонент для работы с мета-данными моделей и типами приложения (appType)",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "getModel",
                    "decorators": [],
                    "description": "Получить модель",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getType",
                    "decorators": [],
                    "description": "Получить тип",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "normalizeModel",
                    "decorators": [],
                    "description": "Форматирование модели модели",
                    "required": false,
                    "type": "{attributes: any[], primaryKey: any}",
                    "example": null,
                    "parameters": [
                        {
                            "name": "inputModel",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Model",
                            "example": null
                        },
                        {
                            "name": "defaultModel",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "normalizeName",
                    "decorators": [],
                    "description": "Форматирование названия модели",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setModel",
                    "decorators": [],
                    "description": "Изменить модель",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "item",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Model",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setType",
                    "decorators": [],
                    "description": "Изменить тип",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "config",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "Record",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/MetricsComponent": {
            "name": "default",
            "moduleName": "components/MetricsComponent",
            "title": "Metrics Component",
            "description": "Компонент для добавления метрик в приложение (например яндекс метрики)",
            "tags": {},
            "properties": [],
            "methods": [
                {
                    "name": "setCounters",
                    "decorators": [],
                    "description": "Поменять счетчики",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "values",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/ResourceComponent": {
            "name": "default",
            "moduleName": "components/ResourceComponent",
            "title": "Resource Component",
            "description": "Компонент для подгрузки внешних API: Google Maps, Yandex Maps, Twitter, ...",
            "tags": {},
            "properties": [
                {
                    "name": "RESOURCE_GEETEST_API",
                    "decorators": [],
                    "description": "URL для загрузки Geetest.",
                    "required": true,
                    "type": "\"//static.geetest.com/static/tools/gt.js\"",
                    "example": null
                },
                {
                    "name": "RESOURCE_GOOGLE_CAPTCHA",
                    "decorators": [],
                    "description": "URL для загрузки Google reCAPTCHA.",
                    "required": true,
                    "type": "\"https://www.google.com/recaptcha/api.js\"",
                    "example": null
                },
                {
                    "name": "RESOURCE_GOOGLE_MAP_API",
                    "decorators": [],
                    "description": "URL для загрузки Google Maps API.",
                    "required": true,
                    "type": "\"//maps.googleapis.com/maps/api/js\"",
                    "example": null
                },
                {
                    "name": "RESOURCE_TWITTER_WIDGET",
                    "decorators": [],
                    "description": "URL для загрузки Twitter виджетов.",
                    "required": true,
                    "type": "\"https://platform.twitter.com/widgets.js\"",
                    "example": null
                },
                {
                    "name": "RESOURCE_YANDEX_MAP_API",
                    "decorators": [],
                    "description": "URL для загрузки Yandex Maps API.",
                    "required": true,
                    "type": "\"https://api-maps.yandex.ru/2.1/\"",
                    "example": null
                },
                {
                    "name": "googleApiKey",
                    "decorators": [],
                    "description": "API-ключ Google для использования Google Maps и других сервисов.",
                    "required": false,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "googleCaptchaSiteKey",
                    "decorators": [],
                    "description": "Ключ сайта Google reCAPTCHA.",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "language",
                    "decorators": [],
                    "description": "Языковой код, используемый для загрузки ресурсов.",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "loadGeetest",
                    "decorators": [],
                    "description": "Метод для загрузки Geetest.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "loadGoogleCaptcha",
                    "decorators": [],
                    "description": "Метод для загрузки Google reCAPTCHA.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "loadGoogleMapApi",
                    "decorators": [],
                    "description": "Метод для загрузки Google Maps API.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "loadScript",
                    "decorators": [],
                    "description": "Метод для загрузки скрипта по указанному URL.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "url",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "params",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "firstResolver",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "loadTwitterWidget",
                    "decorators": [],
                    "description": "Метод для загрузки Twitter виджетов.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "loadYandexMap",
                    "decorators": [],
                    "description": "Метод для загрузки Yandex Maps API.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "wait",
                    "decorators": [],
                    "description": "Метод для ожидания выполнения определенного условия.",
                    "required": false,
                    "type": "Promise",
                    "example": null,
                    "parameters": [
                        {
                            "name": "condition",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "timeout",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "number",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/SocialComponent": {
            "name": "default",
            "moduleName": "components/SocialComponent",
            "title": "Social Component",
            "description": "Провайдер для социальных сетей. Обеспечивает вызов окна соц сети для oauth авторизации",
            "tags": {},
            "properties": [
                {
                    "name": "providers",
                    "decorators": [],
                    "description": "Провайдеры",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "decorators": [],
                    "description": "Инициализация компонента",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "start",
                    "decorators": [],
                    "description": "Старт",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "socialName",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/StoreComponent": {
            "name": "default",
            "moduleName": "components/StoreComponent",
            "title": "Store Component",
            "description": "Обертка над Redux Store со встроенными middleware (thunk, multi, promise..) и react-router",
            "tags": {},
            "properties": [
                {
                    "name": "reducers",
                    "decorators": [],
                    "description": "Редьюсеры",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "store",
                    "decorators": [],
                    "description": "Хранилище",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "addReducers",
                    "decorators": [],
                    "description": "Добавление редьюсеров",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "asyncReducers",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "configurate",
                    "decorators": [],
                    "description": "Конфигурация",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "dispatch",
                    "decorators": [],
                    "description": "Метод для dispatch",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "action",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "decorators": [],
                    "description": "Метод, который вызывается при ошибке",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "error",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "action",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getState",
                    "decorators": [],
                    "description": "Получение состояние",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "init",
                    "decorators": [],
                    "description": "Инициализация",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "config",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IStoreComponentConfig",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "initStore",
                    "decorators": [],
                    "description": "Инициализация хранилища",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "config",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "IStoreComponentConfig",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "decorators": [],
                    "description": "Подписка",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "handler",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/UiComponent": {
            "name": "default",
            "moduleName": "components/UiComponent",
            "title": "Ui Component",
            "description": "Компонент для подгрузки и конфигурации UI компонентов приложения",
            "tags": {},
            "properties": [
                {
                    "name": "components",
                    "decorators": [],
                    "description": "Компоненты приложения.",
                    "required": true,
                    "type": "IComponents",
                    "example": null
                },
                {
                    "name": "fields",
                    "decorators": [],
                    "description": "Компоненты полей формы для использования в приложении.",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "formatters",
                    "decorators": [],
                    "description": "Компоненты форматтеры для использования в приложении.",
                    "required": true,
                    "type": "any",
                    "example": null
                },
                {
                    "name": "icons",
                    "decorators": [],
                    "description": "Иконки для использования в приложении.",
                    "required": true,
                    "type": "any",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "addFields",
                    "decorators": [],
                    "description": "Добавляет компоненты полей формы.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "addFormatters",
                    "decorators": [],
                    "description": "Добавляет компоненты форматтеров.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "addIcons",
                    "decorators": [],
                    "description": "Добавляет иконки.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "icons",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "addModels",
                    "decorators": [],
                    "description": "Добавляет модели.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "models",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "addViews",
                    "decorators": [],
                    "description": "Добавляет компоненты представлений.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "components",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getField",
                    "decorators": [],
                    "description": "Возвращает компонент поля формы по указанному пути.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getFieldProps",
                    "decorators": [],
                    "description": "Возвращает свойства конфигурации компонента поля формы по указанному пути.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "model",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        },
                        {
                            "name": "attribute",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "string",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getFormatter",
                    "decorators": [],
                    "description": "Возвращает компонент форматтера по указанному пути.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getFormatterProps",
                    "decorators": [],
                    "description": "Возвращает свойства конфигурации компонента форматтера по указанному пути.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getIcon",
                    "decorators": [],
                    "description": "Возвращает иконку по указанному имени.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "name",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getPortalElement",
                    "decorators": [],
                    "description": "Возвращает элемент портала.",
                    "required": false,
                    "type": "HTMLDivElement",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getRegisteredFields",
                    "decorators": [],
                    "description": "Возвращает зарегистрированные поля формы для указанного идентификатора формы.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getView",
                    "decorators": [],
                    "description": "Возвращает компонент представления по указанному пути.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "path",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "registerField",
                    "decorators": [],
                    "description": "Регистрирует поле формы.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "attribute",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "type",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "renderView",
                    "decorators": [],
                    "description": "Рендерит компонент представления.",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "Component",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "props",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "forceNode",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "setPortalElement",
                    "decorators": [],
                    "description": "Задает элемент портала.",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "element",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/WebSocketComponent": {
            "name": "default",
            "moduleName": "components/WebSocketComponent",
            "title": "WebSocket Component",
            "description": "Компонент для создания websocket взаимодействия",
            "tags": {},
            "properties": [
                {
                    "name": "streams",
                    "decorators": [],
                    "description": "Массив streams",
                    "required": false,
                    "type": "TStreams",
                    "example": null
                },
                {
                    "name": "wsUrl",
                    "decorators": [],
                    "description": "url для websocket",
                    "required": false,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "decorators": [],
                    "description": "Закрытие websocket соединения",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "open",
                    "decorators": [],
                    "description": "Открытие websocket соединения",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "closePrevious",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "boolean",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "decorators": [],
                    "description": "Подписка на streams",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "streams",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "subscribeStream",
                    "decorators": [],
                    "description": "Подписка на stream",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "stream",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "unsubscribe",
                    "decorators": [],
                    "description": "Отписка от streams",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "streams",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "unsubscribeStream",
                    "decorators": [],
                    "description": "Отписка от stream",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "stream",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "components/social/FacebookProvider": {
            "name": "default",
            "moduleName": "components/social/FacebookProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/social/GitlabProvider": {
            "name": "default",
            "moduleName": "components/social/GitlabProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/social/GoogleProvider": {
            "name": "default",
            "moduleName": "components/social/GoogleProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/social/SteamProvider": {
            "name": "default",
            "moduleName": "components/social/SteamProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "components/social/VkProvider": {
            "name": "default",
            "moduleName": "components/social/VkProvider",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [],
            "methods": []
        },
        "providers/ComponentsProvider": {
            "name": "default",
            "moduleName": "providers/ComponentsProvider",
            "title": "",
            "description": "",
            "tags": {}
        },
        "providers/ScreenProvider": {
            "name": "default",
            "moduleName": "providers/ScreenProvider",
            "title": "",
            "description": "",
            "tags": {}
        },
        "providers/SsrProvider": {
            "name": "default",
            "moduleName": "providers/SsrProvider",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/content/Alert/Alert": {
            "name": "default",
            "moduleName": "ui/content/Alert/Alert",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/content/Badge/Badge": {
            "name": "default",
            "moduleName": "ui/content/Badge/Badge",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/content/CalendarSystem/enums/CalendarType": {
            "name": "default",
            "moduleName": "ui/content/CalendarSystem/enums/CalendarType",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "MONTH",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "WEEK",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "getCssClass",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getCssClasses",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getDropdownItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: string, label: string}[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getKeys",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getLabel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getLabels",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "ui/content/CalendarSystem/enums/DateControlType": {
            "name": "default",
            "moduleName": "ui/content/CalendarSystem/enums/DateControlType",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "NEXT_DOUBLE",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "NEXT_ONE",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "PREV_DOUBLE",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "PREV_ONE",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "getCssClass",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getCssClasses",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getDropdownItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: string, label: string}[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getIcons",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getKeys",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getLabel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getLabels",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "Record",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "ui/content/Chart/Chart": {
            "name": "default",
            "moduleName": "ui/content/Chart/Chart",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/content/Dashboard/Dashboard": {
            "name": "default",
            "moduleName": "ui/content/Dashboard/Dashboard",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/content/Detail/Detail": {
            "name": "default",
            "moduleName": "ui/content/Detail/Detail",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/content/Detail/DetailItem": {
            "name": "default",
            "moduleName": "ui/content/Detail/DetailItem",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/content/DropDown/DropDown": {
            "name": "default",
            "moduleName": "ui/content/DropDown/DropDown",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/content/Icon/Icon": {
            "name": "default",
            "moduleName": "ui/content/Icon/Icon",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/content/Kanban/enums/KanbanModalTypeEnum": {
            "name": "default",
            "moduleName": "ui/content/Kanban/enums/KanbanModalTypeEnum",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "CREATE",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "DETAILS",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "EDIT",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "getCssClass",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getCssClasses",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getDropdownItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: string, label: string}[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getKeys",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getLabel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getLabels",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getModalIconByType",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "type",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getModalIcons",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                }
            ]
        },
        "ui/content/Kanban/enums/KanbanPrioritiesEnum": {
            "name": "default",
            "moduleName": "ui/content/Kanban/enums/KanbanPrioritiesEnum",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "DEFAULT",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "HIGH",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                },
                {
                    "name": "MIDDLE",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "getColorByType",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "type",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getColorsByType",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getCssClass",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getCssClasses",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getDefaultSelectedPriorityId",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getDropdownItems",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{id: string, label: string}[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getKeys",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getLabel",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "string",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "getLabels",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "{}",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getPrioritiesArray",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "ITaskPriority[]",
                    "example": null,
                    "parameters": []
                },
                {
                    "name": "getPriorityById",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "id",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/content/Menu/Menu": {
            "name": "default",
            "moduleName": "ui/content/Menu/Menu",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/crud/Crud/Crud": {
            "name": "default",
            "moduleName": "ui/crud/Crud/Crud",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/crud/Crud/CrudContent": {
            "name": "default",
            "moduleName": "ui/crud/Crud/CrudContent",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/crud/Crud/CrudModal": {
            "name": "default",
            "moduleName": "ui/crud/Crud/CrudModal",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/AutoCompleteField/AutoCompleteField": {
            "name": "default",
            "moduleName": "ui/form/AutoCompleteField/AutoCompleteField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/BlankField/BlankField": {
            "name": "default",
            "moduleName": "ui/form/BlankField/BlankField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/Button/Button": {
            "name": "default",
            "moduleName": "ui/form/Button/Button",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/CheckboxField/CheckboxField": {
            "name": "default",
            "moduleName": "ui/form/CheckboxField/CheckboxField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/CheckboxListField/CheckboxListField": {
            "name": "default",
            "moduleName": "ui/form/CheckboxListField/CheckboxListField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/CheckboxTreeField/CheckboxTreeField": {
            "name": "default",
            "moduleName": "ui/form/CheckboxTreeField/CheckboxTreeField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/DateField/DateField": {
            "name": "default",
            "moduleName": "ui/form/DateField/DateField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/DateRangeField/DateRangeField": {
            "name": "default",
            "moduleName": "ui/form/DateRangeField/DateRangeField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/DateTimeField/DateTimeField": {
            "name": "default",
            "moduleName": "ui/form/DateTimeField/DateTimeField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/DateTimeRangeField/DateTimeRangeField": {
            "name": "default",
            "moduleName": "ui/form/DateTimeRangeField/DateTimeRangeField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/DropDownField/DropDownField": {
            "name": "default",
            "moduleName": "ui/form/DropDownField/DropDownField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/EmailField/EmailField": {
            "name": "default",
            "moduleName": "ui/form/EmailField/EmailField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/Field/Field": {
            "name": "default",
            "moduleName": "ui/form/Field/Field",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/FieldLayout/FieldLayout": {
            "name": "default",
            "moduleName": "ui/form/FieldLayout/FieldLayout",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/FieldList/FieldList": {
            "name": "default",
            "moduleName": "ui/form/FieldList/FieldList",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/FieldSet/FieldSet": {
            "name": "default",
            "moduleName": "ui/form/FieldSet/FieldSet",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/FileField/FileField": {
            "name": "default",
            "moduleName": "ui/form/FileField/FileField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/Form/AutoSaveHelper": {
            "name": "default",
            "moduleName": "ui/form/Form/AutoSaveHelper",
            "title": "",
            "description": "",
            "tags": {},
            "properties": [
                {
                    "name": "STORAGE_KEY_PREFIX",
                    "decorators": [],
                    "description": "",
                    "required": true,
                    "type": "string",
                    "example": null
                }
            ],
            "methods": [
                {
                    "name": "remove",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "clientStorage",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "restore",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "any",
                    "example": null,
                    "parameters": [
                        {
                            "name": "clientStorage",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "initialValues",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                },
                {
                    "name": "save",
                    "decorators": [],
                    "description": "",
                    "required": false,
                    "type": "void",
                    "example": null,
                    "parameters": [
                        {
                            "name": "clientStorage",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "formId",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        },
                        {
                            "name": "values",
                            "decorators": [],
                            "description": "",
                            "required": true,
                            "type": "any",
                            "example": null
                        }
                    ]
                }
            ]
        },
        "ui/form/Form/Form": {
            "name": "default",
            "moduleName": "ui/form/Form/Form",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/HtmlField/HtmlField": {
            "name": "default",
            "moduleName": "ui/form/HtmlField/HtmlField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/ImageField/ImageField": {
            "name": "default",
            "moduleName": "ui/form/ImageField/ImageField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/InputField/InputField": {
            "name": "default",
            "moduleName": "ui/form/InputField/InputField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/MaskField/MaskField": {
            "name": "default",
            "moduleName": "ui/form/MaskField/MaskField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/NavField/NavField": {
            "name": "default",
            "moduleName": "ui/form/NavField/NavField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/NumberField/NumberField": {
            "name": "default",
            "moduleName": "ui/form/NumberField/NumberField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/PasswordField/PasswordField": {
            "name": "default",
            "moduleName": "ui/form/PasswordField/PasswordField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/RadioField/RadioField": {
            "name": "default",
            "moduleName": "ui/form/RadioField/RadioField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/RadioListField/RadioListField": {
            "name": "default",
            "moduleName": "ui/form/RadioListField/RadioListField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/RateField/RateField": {
            "name": "default",
            "moduleName": "ui/form/RateField/RateField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/ReCaptchaField/ReCaptchaField": {
            "name": "default",
            "moduleName": "ui/form/ReCaptchaField/ReCaptchaField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/SliderField/SliderField": {
            "name": "default",
            "moduleName": "ui/form/SliderField/SliderField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/SwitcherField/SwitcherField": {
            "name": "default",
            "moduleName": "ui/form/SwitcherField/SwitcherField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/TextField/TextField": {
            "name": "default",
            "moduleName": "ui/form/TextField/TextField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/TimeField/TimeField": {
            "name": "default",
            "moduleName": "ui/form/TimeField/TimeField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/form/TimeRangeField/TimeRangeField": {
            "name": "default",
            "moduleName": "ui/form/TimeRangeField/TimeRangeField",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/format/BooleanFormatter/BooleanFormatter": {
            "name": "default",
            "moduleName": "ui/format/BooleanFormatter/BooleanFormatter",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/format/DateFormatter/DateFormatter": {
            "name": "default",
            "moduleName": "ui/format/DateFormatter/DateFormatter",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/format/DateTimeFormatter/DateTimeFormatter": {
            "name": "default",
            "moduleName": "ui/format/DateTimeFormatter/DateTimeFormatter",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/format/EnumFormatter/EnumFormatter": {
            "name": "default",
            "moduleName": "ui/format/EnumFormatter/EnumFormatter",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/format/FileSize/FileSize": {
            "name": "default",
            "moduleName": "ui/format/FileSize/FileSize",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/format/Format/Format": {
            "name": "default",
            "moduleName": "ui/format/Format/Format",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/format/MoneyFormatter/MoneyFormatter": {
            "name": "default",
            "moduleName": "ui/format/MoneyFormatter/MoneyFormatter",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/layout/Header/Header": {
            "name": "default",
            "moduleName": "ui/layout/Header/Header",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/layout/Loader/Loader": {
            "name": "default",
            "moduleName": "ui/layout/Loader/Loader",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/layout/Notifications/Notifications": {
            "name": "default",
            "moduleName": "ui/layout/Notifications/Notifications",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/layout/ProgressBar/ProgressBar": {
            "name": "default",
            "moduleName": "ui/layout/ProgressBar/ProgressBar",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/layout/Skeleton/Skeleton": {
            "name": "default",
            "moduleName": "ui/layout/Skeleton/Skeleton",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/layout/Tooltip/Tooltip": {
            "name": "default",
            "moduleName": "ui/layout/Tooltip/Tooltip",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/CheckboxColumn/CheckboxColumn": {
            "name": "default",
            "moduleName": "ui/list/CheckboxColumn/CheckboxColumn",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/ControlsColumn/ControlsColumn": {
            "name": "default",
            "moduleName": "ui/list/ControlsColumn/ControlsColumn",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/Empty/Empty": {
            "name": "default",
            "moduleName": "ui/list/Empty/Empty",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/FlexGrid/FlexGrid": {
            "name": "default",
            "moduleName": "ui/list/FlexGrid/FlexGrid",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/Grid/Grid": {
            "name": "default",
            "moduleName": "ui/list/Grid/Grid",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/LayoutNames/LayoutNames": {
            "name": "default",
            "moduleName": "ui/list/LayoutNames/LayoutNames",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/List/List": {
            "name": "default",
            "moduleName": "ui/list/List/List",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/Pagination/Pagination": {
            "name": "default",
            "moduleName": "ui/list/Pagination/Pagination",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/PaginationSize/PaginationSize": {
            "name": "default",
            "moduleName": "ui/list/PaginationSize/PaginationSize",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/SearchForm/SearchForm": {
            "name": "default",
            "moduleName": "ui/list/SearchForm/SearchForm",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/Steps/Steps": {
            "name": "default",
            "moduleName": "ui/list/Steps/Steps",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/list/TreeTable/TreeTable": {
            "name": "default",
            "moduleName": "ui/list/TreeTable/TreeTable",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/modal/Modal/Modal": {
            "name": "default",
            "moduleName": "ui/modal/Modal/Modal",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/modal/ModalPortal/ModalPortal": {
            "name": "default",
            "moduleName": "ui/modal/ModalPortal/ModalPortal",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/modal/TwoFactorModal/TwoFactorModal": {
            "name": "default",
            "moduleName": "ui/modal/TwoFactorModal/TwoFactorModal",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/nav/Breadcrumbs/Breadcrumbs": {
            "name": "default",
            "moduleName": "ui/nav/Breadcrumbs/Breadcrumbs",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/nav/ButtonGroup/ButtonGroup": {
            "name": "default",
            "moduleName": "ui/nav/ButtonGroup/ButtonGroup",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/nav/Controls/Controls": {
            "name": "default",
            "moduleName": "ui/nav/Controls/Controls",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/nav/Link/Link": {
            "name": "default",
            "moduleName": "ui/nav/Link/Link",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/nav/Nav/Nav": {
            "name": "default",
            "moduleName": "ui/nav/Nav/Nav",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/nav/Router/Router": {
            "name": "default",
            "moduleName": "ui/nav/Router/Router",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/typography/Text/Text": {
            "name": "default",
            "moduleName": "ui/typography/Text/Text",
            "title": "",
            "description": "",
            "tags": {}
        },
        "ui/typography/Title/Title": {
            "name": "default",
            "moduleName": "ui/typography/Title/Title",
            "title": "",
            "description": "",
            "tags": {}
        }
    }
}