{
    "Компонент для подгрузки и конфигурации UI компонентов приложения": "Component for loading and configuring UI components of the application",
    "Обертка над корневым компонентом приложения, используется только в `Application.tsx`. Добавляет через React Context\nкомпоненты приложения и конфигурирует их.": "Wrapper around the root component of the application, used only in `Application.tsx`. Adds application components through React Context\nand configures them.",
    "\nКомпонент-аккордеон позволяет создавать интерактивные списки или контейнеры,\nгде содержимое может быть развернуто или свернуто по требованию пользователя.\nКаждый элемент аккордеона может быть раскрытым или свернутым, и пользователь может\nизменять их состояние путем нажатия на соответствующий заголовок элемента.\n\nКомпонент `Accordion` обычно используется для создания разделов, подразделов или\nсписков, где необходимо показывать или скрывать дополнительную информацию по требованию.\n\nВнутри компонента `Accordion` могут быть использованы дочерние элементы `AccordionItem`,\nкаждый из которых представляет отдельный элемент аккордеона с заголовком и содержимым.\nПри нажатии на заголовок, соответствующий элемент может быть развернут или свернут.\n\nПримечание: В компоненте `Accordion` должен быть указан хотя бы один дочерний элемент `AccordionItem`.\n": "Accordion component allows creating interactive lists or containers,\nwhere content can be expanded or collapsed on user's demand.\nEach accordion item can be expanded or collapsed, and the user can\nchange their state by clicking on the respective item's header.\n\nThe `Accordion` component is typically used to create sections, subsections,\nor lists where additional information needs to be shown or hidden upon request.\n\nInside the `Accordion` component, child `AccordionItem` elements can be used,\neach representing a separate accordion item with a header and content.\nClicking on the header expands or collapses the corresponding item.\n\nNote: The `Accordion` component must have at least one child `AccordionItem`.",
    "\nКомпонент оповещения, который отображает сообщения для пользователя.\nОн может быть использован для показа уведомлений, предупреждений или ошибок,\nкоторые требуют внимания пользователя.\n\nКомпонент `Alert` может содержать текстовое сообщение и дополнительное описание,\nа также опциональную кнопку для закрытия оповещения.\n\nОповещения могут иметь различные типы, такие как 'success', 'info', 'warning', 'error'\nили другие пользовательские типы.\n\nКомпонент также предлагает настройки для отображения иконки, анимации, а также\nобратного вызова при закрытии оповещения.\n": "Notification component displays messages for the user.\nIt can be used to show notifications, warnings, or errors\nthat require user attention.\n\nThe `Alert` component can contain a text message and additional description,\nas well as an optional button for closing the alert.\n\nAlerts can have different types such as 'success', 'info', 'warning', 'error',\nor other custom types.\n\nThe component also offers settings for displaying icons, animations,\nand a callback when the alert is closed.",
    "\nКомпонент аватара, который отображает изображение пользователя или иконку.\nОн может использоваться для представления пользователя, контакта или профиля.\n\nКомпонент `Avatar` позволяет указать размер, форму, изображение или иконку,\nа также добавить альтернативный текст и статус онлайна.\n\nЕсли изображение аватара не загружается, можно показать альтернативный текст\nили иконку вместо него.\n": "Avatar component displays a user's image or an icon.\nIt can be used to represent a user, contact, or profile.\n\nThe `Avatar` component allows specifying the size, shape, image, or icon,\nand also adding alternative text and online status.\n\nIf the avatar image fails to load, an alternative text or icon can be shown instead.",
    "\nКомпонент бэйджа, который используется для отображения информационных меток на элементах пользовательского интерфейса.\nОн может использоваться для обозначения статуса, количества, типа или любой другой важной информации.\n\nКомпонент `Badge` позволяет указать тип бэйджа, стиль скругления, наличие кнопки для закрытия,\nтекст сообщения, отображение счетчика и размер.\n\nЕсли установлен флаг `showClose`, то пользователь может закрыть бэйдж, вызывая соответствующую callback функцию `onClose`.\n": "Badge component is used to display informational labels on UI elements.\nIt can be used to indicate status, quantity, type, or any other important information.\n\nThe `Badge` component allows specifying the badge type, border radius style,\npresence of a close button, message text, counter display, and size.\n\nIf the `showClose` flag is set, the user can close the badge by calling the respective `onClose` callback function.",
    "\nКомпонент календаря, который позволяет выбирать даты или диапазоны дат.\nОн предоставляет пользователю удобный способ выбора даты и может использоваться для различных целей,\nтаких как выбор даты доставки, даты резервирования и т.д.\n\nКомпонент `Calendar` позволяет указать значение даты или диапазона дат, формат значения, callback функцию при изменении,\nсвойства для компонента `DayPicker`, отображение панели выбора месяца/года, количество отображаемых месяцев и другие свойства.\n\nЕсли установлено значение `showFooter`, то будет отображаться футер с кнопкой \"Today\".\n": "Calendar component allows selecting dates or date ranges.\nIt provides users a convenient way to choose dates and can be used for various purposes,\nsuch as selecting delivery dates, reservation dates, etc.\n\nThe `Calendar` component allows specifying the date or date range value, value format, callback function on change,\nproperties for the `DayPicker` component, displaying the month/year selection panel, number of months displayed, and other properties.\n\nIf the `showFooter` value is set, a footer with the \"Today\" button will be displayed.",
    "\nКомпонент карточки, который представляет контент в структурированном формате с заголовком, обложкой, описанием,\nкнопками, ссылками и другими элементами.\n\nКомпонент `Card` позволяет передать дочерние элементы, обложку, описание, заголовок, параметры заголовка,\nфутер, коллекцию ссылок и коллекцию кнопок.\n": "Card component represents content in a structured format with a title, cover, description,\nbuttons, links, and other elements.\n\nThe `Card` component allows passing child elements, cover image, description, title, title parameters,\nfooter, a collection of links, and a collection of buttons.",
    "\nКомпонент, позволяющий копировать заданное значение в буфер обмена при клике.\n\nКомпонент `CopyToClipboard` принимает значение `value` для копирования, а также\nможет отображать иконку, дополнительный текст или другие дочерние элементы.\n\nПри успешном копировании значения, можно также отобразить уведомление с помощью\nпараметра `notification`. Можно задать текст уведомления, его уровень и параметры.\n\nКомпонент также поддерживает обработчик `onCopy`, который вызывается при копировании.\n": "Component that allows copying a specified value to the clipboard on click.\n\nThe `CopyToClipboard` component accepts the `value` to be copied and can also display an icon, additional text, or other child elements.\n\nUpon successful copying, a notification can be displayed using the `notification` parameter.\nYou can provide notification text, its level, and parameters.\n\nThe component also supports the `onCopy` handler, which is called when copying is performed.",
    "\nПредставление данных в виде таблицы, в которой поля группируются по принципу \"ключ-значение\".\n\nКомпонент `Detail` принимает данные в виде дочерних компонентов `DetailItem`, которые отображаются\nв виде таблицы с ячейками \"ключ-значение\".\n\nКомпонент поддерживает различные настройки, такие как размер ячеек, вариант расположения\nячеек (\"horizontal\" или \"vertical\"), а также респонсивный режим, позволяющий перестраивать\nтаблицу при изменении размеров окна.\n\nКомпонент также может отображать заголовок таблицы и контролы, расположенные рядом с таблицей.\n": "Representation of data in a table format where fields are grouped in a \"key-value\" principle.\n\nThe `Detail` component accepts data as child `DetailItem` components, which are displayed\nin a table format with \"key-value\" cells.\n\nThe component supports various settings such as cell size, cell layout ('horizontal' or 'vertical'), and a responsive mode that adjusts the table layout when window size changes.\n\nThe component can also display a table header and controls placed next to the table.",
    "Элемент \"ключ-значение\" в таблице Detail": "\"Key-Value\" Element in the Detail Table",
    "\nКомпонент, представляющий меню с элементами, которые могут быть выбраны или нажаты.\nКомпонент позволяет отображать и скрывать содержимое меню, а также управлять его позиционированием.\n": "Component representing a menu with selectable or clickable items.\nThe component allows displaying and hiding menu content and managing its positioning.",
    "\nКомпонент, представляющий иконку. Иконки могут быть импортированы при старте приложения.\n": "Component representing an icon. Icons can be imported when the application starts.",
    "\nКомпонент-меню позволяет создавать выпадающие списки с элементами, которые могут быть выбраны\nили выполнить определенные действия при клике на них.\n\nКомпонент `Menu` обычно используется для создания навигационных меню или контекстных меню,\nгде пользователь может выбирать опции или выполнять определенные действия в зависимости от выбранного элемента.\n\nКомпонент `Menu` принимает массив `items`, каждый элемент которого представляет собой отдельный пункт меню.\nКаждый пункт меню имеет заголовок `label`, функцию `onClick`, которая будет вызываться при клике на элемент,\nкастомную иконку `icon` (необязательно) и флаг `hasBorder`, определяющий наличие нижней границы у элемента.\n\nПримечание: Компонент `Menu` требует указания хотя бы одного элемента меню в свойстве `items`.\n": "Menu component allows creating dropdown lists with items that can be selected\nor perform specific actions when clicked.\n\nThe `Menu` component is typically used for creating navigation menus or context menus\nwhere users can choose options or perform actions based on the selected item.\n\nThe `Menu` component takes an array `items`, each element of which represents an individual menu item.\nEach menu item has a `label` title, an `onClick` function to be called when clicked, a custom `icon` (optional), and a `hasBorder` flag determining the presence of a bottom border on the item.\n\nNote: The `Menu` component requires at least one menu item to be specified in the `items` property.",
    "\nКомпонент слайдера позволяет создавать слайдшоу, где элементы могут быть пролистаны\nс помощью прокрутки или перетаскивания.\n": "Slider component allows creating a slideshow where items can be scrolled\nusing scrolling or dragging.",
    "\nКомпонент CRUD (Create, Read, Update, Delete) предоставляет интерфейс для выполнения операций создания,\nчтения, обновления и удаления записей. Он позволяет создавать, просматривать, редактировать и удалять\nзаписи из некоторой модели данных.\n": "The CRUD (Create, Read, Update, Delete) component provides an interface for performing create, read, update, and delete operations on records.\nIt allows creating, viewing, editing, and deleting records from a certain data model.\n",
    "\nПоле ввода текста с подсказками (auto-complete). Он позволяет пользователю вводить текст и предлагает\nварианты автозаполнения на основе предоставленных данных.\n\nКомпонент `AutoCompleteField` принимает следующие свойства:\n\n- `searchOnFocus`: при фокусировке на поле ввода будет запускаться поиск (тип: boolean)\n- все остальные свойства являются наследниками интерфейсов `IBaseFieldProps`, `IDataProviderConfig` и `IDataSelectConfig`\n\nПримечание: Компонент `AutoCompleteField` требует указания списка элементов (`items`) и предоставления\nконфигурации для провайдера данных (`dataProvider`) и выборки данных (`autoComplete` и `autoFetch`).\n": "Auto-complete text input field. It allows the user to input text and suggests\nauto-complete options based on provided data.\n\nThe `AutoCompleteField` component takes the following properties:\n\n- `searchOnFocus`: search will be triggered when the input field is focused (type: boolean)\n- all other properties are inherited from the `IBaseFieldProps`, `IDataProviderConfig`, and `IDataSelectConfig` interfaces.\n\nNote: The `AutoCompleteField` component requires specifying the list of items (`items`) and providing\nconfiguration for the data provider (`dataProvider`) and data selection (`autoComplete` and `autoFetch`).",
    "\nПустое поле. Он отображает переданный текст или дочерние элементы.\n\nКомпонент `BlankField` принимает следующие свойства:\n\n- `text`: текст для отображения (тип: string | React.ReactNode)\n- `children`: дочерние элементы (тип: React.ReactNode)\n- все остальные свойства являются наследниками интерфейсов `IFieldWrapperInputProps` и `IUiComponent`\n": "Blank field. It displays the provided text or child elements.\n\nThe `BlankField` component takes the following properties:\n\n- `text`: text to be displayed (type: string | React.ReactNode)\n- `children`: child elements (type: React.ReactNode)\n- all other properties are inherited from the `IFieldWrapperInputProps` and `IUiComponent` interfaces.",
    "Кнопка или ссылка. Используется в интерфейсе для выполнения какого-либо действия по клику (onClick),\nсмена страницы в рамках роутинга (goToRoute), переход по внешней ссылке (url) или отправки формы (submit form)": "Button or link. Used in the interface to perform an action on click (onClick),\nchange pages within routing (goToRoute), navigate to an external link (url), or submit a form (submit form)",
    "\nОдиночный чекбокс. Используется в формах для отметки булевого значения.\n": "Single checkbox. Used in forms to mark a boolean value.",
    "\nСписок с чекбоксами. Используется в формах для выбора нескольких значений.\n\n": "Checkbox list. Used in forms to select multiple values.\n\n",
    "\nПоле ввода с выпадающим календарём для выбора даты.\n\nКомпонент `DateField` предоставляет возможность создания поля ввода с календарём для выбора даты.\nОн предоставляет пользователю удобный интерфейс для выбора даты с помощью календаря,\nа также поддерживает настройку формата отображения даты и другие параметры.\n": "Date input field with a dropdown calendar for date selection.\n\nThe `DateField` component provides the ability to create an input field with a calendar dropdown for date selection.\nIt offers users a convenient interface to select dates using a calendar and supports configuring date display formats and other parameters.\n",
    "\nПоле ввода дипазона двух дат с выпадающим календарём.\n\nКомпонент `DateRangeField` предоставляет возможность создания поля ввода диапазона двух дат с выпадающим календарём.\n Он позволяет пользователю выбрать начальную и конечную даты с помощью календаря и предоставляет удобный интерфейс для работы с диапазоном дат.\n": "Input field for a date range with a dropdown calendar.\n\nThe `DateRangeField` component allows creating an input field for a date range with a dropdown calendar.\nIt enables users to select start and end dates using a calendar and provides a convenient interface for working with date ranges.\n",
    "\nПоля ввода с выпадающими списками для выбора даты и времени.\n\nКомпонент `DateTimeField` предоставляет возможность создания полей ввода для выбора даты и времени с помощью выпадающих списков.\n Он объединяет функциональность компонента `DateField` для выбора даты и компонента `TimePanel` для выбора времени.\n": "Input fields with dropdown lists for date and time selection.\n\nThe `DateTimeField` component provides the ability to create input fields for selecting both date and time using dropdown lists.\nIt combines the functionality of the `DateField` component for date selection and the `TimePanel` component for time selection.\n",
    "\nПоле ввода дипазона двух дат со временем, с выпадающим календарём.\n\nКомпонент `DateTimeRangeField` предоставляет возможность создания поля ввода для выбора диапазона двух дат с временем\nс помощью выпадающих списков и календаря.\nОн объединяет функциональность компонента `DateRangeField` для выбора диапазона дат и компонента `DateTimeField` для выбора времени.\n": "Input field for a date-time range with time and a dropdown calendar.\n\nThe `DateTimeRangeField` component provides the ability to create an input field for selecting a range of dates and times\nusing dropdown lists and a dropdown calendar.\nIt combines the functionality of the `DateRangeField` component for date range selection and the `DateTimeField` component for time selection.\n",
    "\nВыпадающий список для выбора одного или нескольких значений.\n\nКомпонент `DropDownField` предоставляет возможность создания выпадающего списка для выбора одного или нескольких значений.\nОн поддерживает различные типы контента для элементов списка, такие как флажки, радиокнопки, иконки и изображения.\n\n": "Dropdown list for selecting one or multiple values.\n\nThe `DropDownField` component provides the ability to create a dropdown list for selecting one or multiple values.\nIt supports various types of content for list items, such as checkboxes, radio buttons, icons, and images.\n\n",
    "\nКомпонент, который рендерит соответствующее поле, исходя из переданной модели и названия атрибута.\nПо умолчанию будет отрендерен InputField.\nТакже можно не использовать модель, а передавать компонент поля напрямую через пропсы.\n": "A component that renders the appropriate field based on the provided model and attribute name.\nBy default, an `InputField` will be rendered.\nIt's also possible to not use a model and pass the field component directly via props.\n",
    "\nСпециальный шаблон для поля, который настраивает его расположение внутри формы, рендерит лейбл, подсказки и ошибки.\n\n": "A special template for a field that configures its layout within a form, renders labels, hints, and errors.\n\n",
    "Создает список из сгруппированных полей формы": "Creates a list of grouped form fields",
    "Компонент для группировки полей формы": "Component for grouping form fields",
    "\nКомпонент `FileField` представляет собой поле формы для загрузки файлов.\nОн использует хук `useFile` для управления состоянием файлов и выполнения операций с файлами, таких как выбор и удаление.\nКомпонент поддерживает различные варианты отображения файлов (список или стена) с помощью перечисления `FilesLayout`.\n": "\nThe `FileField` component represents a form field for uploading files.\nIt uses the `useFile` hook to manage the state of files and perform file-related operations such as selection and deletion.\nThe component supports different file display options (list or wall) through the `FilesLayout` enumeration.\n",
    "\nКомпонент для создания формы. Предоставляет управление и синхронизацию состояния формы,\nа также позволяет выполнять отправку данных формы на сервер с возможностью валидации и обработки результатов.\n": "\nComponent for creating a form. Provides control and synchronization of form state,\nand allows submitting form data to the server with validation and result handling capabilities.\n",
    "Компонент для создания HTML-разметки, использующий WYSIWYG редактор": "Component for creating HTML markup using a WYSIWYG editor",
    "\nКомпонент для загрузки изображений с возможностью обрезки и предпросмотра.\n": "\nComponent for uploading images with cropping and preview capabilities.\n",
    "Поле ввода текста": "Text input field",
    "Компонент навигации как часть формы.\n\nЭтот компонент представляет собой навигационное меню, которое можно использовать\nкак часть формы для выбора различных элементов или вкладок.\n": "Navigation component as part of a form.\n\nThis component represents a navigation menu that can be used\nas part of a form to select different items or tabs.",
    "\nЧисловое поле ввода. Этот компонент представляет собой поле ввода для числовых значений.\n": "\nNumeric input field. This component represents an input field for numeric values.\n",
    "\nПоле ввода пароля. Этот компонент представляет собой поле ввода для паролей.\n\n": "\nPassword input field. This component represents an input field for passwords.\n\n",
    "\nКомпонент RadioField представляет собой элемент выбора типа \"radio\". Он позволяет пользователю выбрать один вариант из нескольких предложенных.\n": "\nRadioField component represents a \"radio\" type selection element. It allows the user to choose one option from several presented.\n",
    "Список с радиокнопками. Используется в формах для выбора одного значения.": "List with radio buttons. Used in forms to select one value.",
    "\nПоле для проставления рейтинга\n": "\nRating input field\n",
    "Компонент для использования ReCAPTCHA v3 от Google.\nЧтобы добавить ReCAPTCHA в форму необходимо:\n1) Передать siteKey в ResourceComponent.\n2) Поместить на сайт скрипт от Google с помощью метода экземпляра ResourceComponent\n(скрипт анализирует поведение пользователя).\n3) Разместить ReCaptchaField внутри компонента Form. На событие формы onSubmit отправится запрос в Google для\nполучения токена. Далее этот токен с остальными данными формы отправится на бэкенд.\nСам компонент отображает ссылки на политику конфиденциальности и условия использования сервисов Google.": "Component for using Google ReCAPTCHA v3\nTo add ReCAPTCHA to a form:\n1) Pass the siteKey to the ResourceComponent.\n2) Embed the Google script on the site using the ResourceComponent instance method\n(the script analyzes user behavior).\n3) Place ReCaptchaField inside the Form component. On the form's onSubmit event, a request will be sent to Google to\nretrieve a token. Then, this token along with other form data will be sent to the backend.\nThe component also displays links to Google's privacy policy and terms of use.",
    "Компонент с ползунком для выбора числового значения в пределах указанного промежутка": "Slider component for selecting a numerical value within a specified range",
    "Список с кнопками. Используется для выбора одного значения.": "List with buttons. Used to select one value.",
    "Поле для ввода нескольких строк текста": "Textarea input field for entering multiple lines of text",
    "Поле для выбора времени": "Time input field",
    "\nКомпонент TimeRangeField представляет собой поле выбора временного диапазона, состоящего из двух элементов ввода времени (from и to).\n": "\nThe TimeRangeField component represents a field for selecting a time range, consisting of two time input elements (from and to).\n",
    "\nКомпонент BooleanFormatter предназначен для форматирования значения типа boolean, string или number.\nОн позволяет кастомизировать отображение значения, используя переданный view React компонент.\n": "\nThe BooleanFormatter component is intended for formatting boolean, string, or number values.\nIt allows customizing the value display using the provided React view component.\n",
    "\nКомпонент DateFormatter предназначен для форматирования даты с использованием заданного формата.\nОн позволяет кастомизировать отображение даты, используя переданный view React компонент.\n": "\nThe DateFormatter component is intended for formatting dates using a specified format.\nIt allows customizing the date display using the provided React view component.\n",
    "\nКомпонент DateTimeFormatter предназначен для форматирования даты и времени с использованием заданного формата.\nОн позволяет кастомизировать отображение даты и времени, используя переданный view React компонент.\n": "\nThe DateTimeFormatter component is intended for formatting dates and times using a specified format.\nIt allows customizing the date and time display using the provided React view component.\n",
    "\nКомпонент EnumFormatter предназначен для форматирования перечисления элементов с использованием заданного формата.\nОн позволяет кастомизировать отображение элементов, используя переданный view React компонент.\n": "\nThe EnumFormatter component is intended for formatting enumeration items using a specified format.\nIt allows customizing the item display using the provided React view component.\n",
    "\nКомпонент FileSize предназначен для форматирования размера файла в человеко-читаемом формате.\nОн позволяет кастомизировать отображение размера файла, используя переданный view React компонент.\n": "\nThe FileSize component is intended for formatting file size in a human-readable format.\nIt allows customizing the file size display using the provided React view component.\n",
    "\nКомпонент Format предназначен для форматирования значения на основе заданного форматтера.\nОн позволяет кастомизировать отображение значения, используя переданный view React компонент.\n": "\nThe Format component is intended for formatting values based on a specified formatter.\nIt allows customizing the value display using the provided React view component.\n",
    "\nКомпонент MoneyFormatter предназначен для форматирования денежных значений с учетом валюты и округления.\nОн позволяет кастомизировать отображение денежного значения, используя переданный view React компонент.\n": "\nThe MoneyFormatter component is intended for formatting monetary values with currency and rounding considerations.\nIt allows customizing the money value display using the provided React view component.\n",
    "\nКомпонент Header представляет собой верхнюю часть макета страницы.\nОн может содержать логотип и навигацию, а также кастомизироваться с помощью переданного view React компонента.\n": "\nThe Header component represents the top part of the page layout.\nIt can include a logo, navigation, and can be customized using the provided React view component.\n",
    "\nКомпонент Loader представляет собой индикатор загрузки,\nкоторый может использоваться для обозначения процесса загрузки данных или выполнения операции.\n": "\nThe Loader component represents a loading indicator,\nwhich can be used to indicate the loading process of data or the execution of an operation.\n",
    "Progress bar. Отображает текущий прогресс какой-либо операции": "Progress bar. Displays the current progress of an operation",
    "во время загрузки или ожидания загрузки реальных данных.": "during loading or waiting for real data to load.",
    "Колонка с чекбоксом, которая позволяет выбирать одну или все записи в таблице.": "A column with checkboxes that allows selecting individual or all records in a table.",
    "Компонент используется в качестве заглушки в случае, когда пришла пустая коллекция данных.": "The component is used as a placeholder when an empty data collection is received.",
    "Flex контейнер для элементов и компонентов.": "Flex container for elements and components.",
    "Компонент для представления данных коллекции в виде таблицы.": "Component for presenting collection data in the form of a table.",
    "Переключает варианты расположения элементов коллекции.\nСохраняет выбранный пользователем шаблон в LocalStorage.": "Switches between layout options for collection items.\nSaves the user-selected template in LocalStorage.",
    "Компонент для представления коллекции в виде списка.": "Component for presenting a collection as a list.",
    "Компонент с пагинацией страниц.": "Component with page pagination.",
    "Компонент для выбора количества элементов в списке": "Component for selecting the number of items in the list",
    "Форма для поиска элементов в коллекции list-компонента.\nФорма хранит значения в локальном состоянии, а на onSubmit отправляет их в хранилище Redux,\nпосле чего в list-компонент подгружаются новые элементы коллекции.": "Form for searching items in the collection of a list component.\nThe form stores values in local state and onSubmit sends them to the Redux store,\nafter which new collection items are loaded into the list component.",
    "Модальное окно": "Modal window",
    "Коллекция с контролами. Можно передавать список с кастомными контролами, а можно использовать стандарные контролы\nкомпонента. Стандартные контролы подходят для CRUD-операций, все что нужно для их использования - передать\nсоответствующий id и обработчик - внешний вид (иконка и название) отобразятся автоматом.": "A collection with controls. You can pass a list with custom controls, or use the standard controls\nof the component. Standard controls are suitable for CRUD operations; all that's needed for their use\nis to pass the corresponding id and handler, and their appearance (icon and name) will be displayed automatically.",
    "Ссылка": "Link",
    "Компонент навигации": "Navigation component",
    "Маршрутизатор.\nКомпонент получает общий для приложения шаблон и дерево роутов. Из дерева роутов посредством React Router\nобразуется switch-конструкция, которая в зависимости от текущего пути рендерит соответствующий компонент страницы.\nИли осуществляет редирект на другую страницу. Все страницы оборачиваются в переданный шаблон.": "Router.\nThe component receives an application-wide template and a tree of routes. From the route tree through React Router,\na switch construct is formed, which renders the corresponding page component depending on the current path.\nOr performs a redirect to another page. All pages are wrapped in the provided template.",
    "Компонент, который представляет в виде дерева список с иерархической структурой данных": "A component that represents a hierarchical list as a tree structure",
    "Url, который вернет коллекцию элементов.": "URL that will return a collection of items.",
    "Тип HTTP запроса (GET | POST | PUT | DELETE)": "HTTP request type (GET | POST | PUT | DELETE)",
    "Функция условия, используемая для определения поведения списка на основе параметров запроса.": "Condition function used to determine the behavior of the list based on query parameters.",
    "Идентификатор формы, связанной с данным списком.": "Identifier of the form associated with this list.",
    "Логическое значение, указывающее, был ли список получен или нет.": "Boolean value indicating whether the list has been received or not.",
    "Логическое значение, указывающее, находится ли список в процессе загрузки или нет.": "Boolean value indicating whether the list is in the process of loading or not.",
    "Логическое значение, указывающее, является ли список удаленным или нет.": "Boolean value indicating whether the list is deleted or not.",
    "Массив элементов списка.": "Array of list items.",
    "Атрибут макета для списка.": "Layout attribute for the list.",
    "Название макета, связанного с данным списком.": "Name of the layout associated with this list.",
    "Идентификатор списка.": "Identifier of the list.",
    "Логическое значение, указывающее, можно ли загрузить еще элементы для списка.": "Boolean value indicating whether more items can be loaded for the list.",
    "Дополнительные метаданные для списка.": "Additional metadata for the list.",
    "Обработчик события ошибки выполнения запроса": "Handler for the request execution error event.",
    "Функция обратного вызова, вызываемая при получении списка.": "Callback function invoked upon receiving the list.",
    "Атрибут страницы для списка.": "Page attribute for the list.",
    "Атрибут размера страницы для списка.": "Page size attribute for the list.",
    "Первичный ключ для списка.": "Primary key for the list.",
    "Массив строк, представляющих область списка.": "Array of strings representing the list scope.",
    "Атрибут сортировки для списка.": "Sorting attribute for the list.",
    "Массив исходных элементов списка.": "Array of source list items.",
    "Общее количество элементов в списке.": "Total count of items in the list.",
    "URL для загрузки Geetest.": "URL for Geetest loading.",
    "URL для загрузки Google reCAPTCHA.": "URL for Google reCAPTCHA loading.",
    "URL для загрузки Google Maps API.": "URL for Google Maps API loading.",
    "URL для загрузки Twitter виджетов.": "URL for Twitter widget loading.",
    "URL для загрузки Yandex Maps API.": "URL for Yandex Maps API loading.",
    "Свойство для хранения обратных вызовов.": "Property for storing callbacks.",
    "Свойство для хранения компонентов.": "Property for storing components.",
    "API-ключ Google для использования Google Maps и других сервисов.": "Google API key for using Google Maps and other services.",
    "Ключ сайта Google reCAPTCHA.": "Google reCAPTCHA site key.",
    "Языковой код, используемый для загрузки ресурсов.": "Language code used for resource loading.",
    "Элемент портала.": "Portal element.",
    "Зарегистрированные компоненты полей формы.": "Registered form field components.",
    "Компоненты приложения.": "Application components.",
    "Компоненты полей формы для использования в приложении.": "Form field components for use in the application.",
    "Компоненты форматтеры для использования в приложении.": "Formatter components for use in the application.",
    "Иконки для использования в приложении.": "Icons for use in the application.",
    "Включает \"умное\" позиционирование - если компонент не может быть помещен в промежуток между целевым компонентом\nи краем viewport, тогда он будет показан в противоположном направлении от заданного в свойстве position.": "Enables 'smart' positioning - if the component cannot fit between the target component and the viewport edge, it will be displayed in the opposite direction from the position property.",
    "Дочерние элементы": "Child elements",
    "Задержка перед размонтированием компонента, когда он должен быть скрыт.\nВ этот момент удобно применять различные анимации ухода.": "Delay before unmounting the component when it should be hidden.\nThis is a good time to apply various exit animations.",
    "Промежуток между компонентом и целевым элементом.\nИспользуется в рассчетах позиционирования.": "Spacing between the component and the target element.\nUsed in positioning calculations.",
    "Срабатывает в \"ручном режиме\", при клике за пределами компонента и целевого элемента.\nВозвращает значение visible.": "Triggered in 'manual mode', when clicked outside the component and target element.\nReturns the visible value.",
    "Обработчик изменения свойства isComponentVisible (отображение на странице).\nВозвращает значение isComponentVisible.": "Handler for changing the isComponentVisible property (display on page).\nReturns the isComponentVisible value.",
    "Позиционирование компонента, относительно целевого элемента": "Positioning of the component relative to the target element.",
    "Отобразить или скрыть компонент.\nВключает \"ручной режим\", при котором можно задать логику отображения компонента извне,\nчерез изменение данного свойства.": "Show or hide the component.\nIncludes 'manual mode', which allows you to set the display logic from outside,\nthrough the modification of this property.",
    "Нужно ли рендерить компонент": "Whether the component should be rendered.",
    "Нужно ли показывать компонент на странице": "Whether to show the component on the page.",
    "Объект стилей для абсолютного позиционирования": "Styles object for absolute positioning.",
    "Флаг для управления включением синхронизации с addressBar": "Flag for controlling addressBar synchronization.",
    "Модель": "Model",
    "Использовать ли #": "Whether to use #.",
    "These fetch configurations will be used to preload and store for no matter what route matched in case of SSR": "These fetch configurations will be used to preload and store for no matter what route matched in case of SSR.",
    "Задержка в миллисекундах перед осуществлением запроса": "Delay in milliseconds before making the request.",
    "Подключить autocomplete?": "Connect autocomplete?",
    "Минимальная длина запроса": "Minimum query length",
    "URL для подгрузки новой коллекции данных": "URL for loading a new collection of data.",
    "Обработчик, который вызывается для подгрузки данных.\nЕсли обработчик не передан, то по умолчанию отправится post-запрос.": "Handler that is called to load data.\nIf the handler is not provided, a default post-request will be sent.",
    "Параметры запроса": "Request parameters.",
    "Уникальный (глобально) идентификатор, под которых будут храниться\nподгруженные данные в redux (при включенном флаге useRedux). Если\nне задан - данные будут храниться в локальном стейте": "Unique (global) identifier under which loaded data will be stored in Redux (when the useRedux flag is enabled). If not provided, data will be stored in local state.",
    "Настройки поиска": "Search settings.",
    "Загрузка данных после любого изменения запроса.\nЕсли включен autoFetch, то настройки autoComplete не применятся.": "Load data after any query change.\nIf autoFetch is enabled, autoComplete settings will not be applied.",
    "Конфигурация для подгрузки данных извне.\nЕсли dataProvider не передан, то поиск данных по запросу происходит локально.": "Configuration for loading data from external sources.\nIf dataProvider is not provided, data search based on the query is done locally.",
    "Идентификаторы выбранных значений, которые необходимо подгрузить при `autoFetch` режиме.\nНа бекенд будут переданы идентификаторы в параметре `ids`, которые необходимо вернуть.\nИспользуется только при `autoFetch = true`": "IDs of selected values to be loaded in `autoFetch` mode.\nThe IDs will be sent to the backend in the `ids` parameter and should be returned.\nUsed only when `autoFetch = true`.",
    "Коллекция элементов": "Collection of items.",
    "Текст запроса": "Query text.",
    "Атрибут, в котором должны лежать дочерние элементы списка (для группировки)\nЕсли аттрибут не задан - группировка не производится": "Attribute where child list items should reside (for grouping).\nIf the attribute is not provided, no grouping is performed.",
    "Значение поля в форме": "Value of the field in the form.",
    "Список с видимыми элементами": "List with visible items.",
    "Возможность множественного выбора": "Possibility of multiple selection.",
    "Первичный ключ для item": "Primary key for the item.",
    "Сделать активным первый элемент в списке": "Make the first item in the list active.",
    "Список с идентификаторами выбранных элементов": "List with identifiers of selected items.",
    "Список со всеми элементами": "List with all items.",
    "Идентификатор элемента": "Item identifier.",
    "Отображаемое название для IDataSelectItem": "Display name for IDataSelectItem.",
    "Экшен для отправки на бэкенд": "Action for sending to the backend.",
    "Точные размеры изображений": "Exact image sizes.",
    "Использовать только изображения": "Use only images.",
    "Начальные файлы": "Initial files.",
    "Параметры для input элемента": "Parameters for the input element.",
    "Список mime-типов": "List of MIME types.",
    "Множественный выбор файлов": "Multiple file selection.",
    "Позволяет указать uploader": "Allows specifying an uploader.",
    "Параметры для uploader": "Parameters for the uploader.",
    "Url, который вернет коллекцию элементов": "URL that will return a collection of items.",
    "Синхронизация значений формы списка с адресной строкой": "Synchronize list form values with the address bar.",
    "Удаление данных списка из хранилища Redux при размонтировании компонента": "Removing list data from the Redux store when the component is unmounted.",
    "Отправлять запрос на обновление данных при изменении данных формы. По-умолчанию - включено.": "Send a request to update data when form data changes. Enabled by default.",
    "Обработчик, который составляет список условий для локальной фильтрации элементов коллекции": "Handler that creates a list of conditions for local filtering of collection items.",
    "Заглушка в случае отсутствия элементов": "Fallback in case of no items.",
    "Начальные элементы. Используется для подгрузки нескольких списков в один запрос, при этом не отменяя пагинацию\nи последующие запросы на бекенд для 2-й и следующих страниц": "Initial items. Used for loading multiple lists in a single request without canceling pagination and subsequent backend requests for the 2nd and subsequent pages.",
    "Количество элементов всего в списке (для отрисовки пагинации), заданное вручную": "Total count of items in the list (for pagination rendering), set manually.",
    "Состояние загрузки элементов списка": "List item loading state.",
    "Элементы коллекции": "Collection items.",
    "Варианты расположения элементов коллекции": "Collection item layout options.",
    "Идентификатор списка": "List identifier.",
    "Обработчик, который вызывается при изменении значений формы, и нужен для подгрузки новых элементов коллекции": "Handler that is called when form values change and is necessary to load new collection items.",
    "Подключение пагинации": "Pagination integration.",
    "Переключение количества элементов в списке": "Switching the number of items in the list.",
    "Дополнительные параметры, значения которых нужно передавать в запросе для получения данных": "Additional parameters whose values need to be passed in the request to get data.",
    "Параметр для загрузки данных списка с сервера": "Parameter for loading list data from the server.",
    "Форма для поиска элементов": "Form for searching items.",
    "Модель для синхронизации значений формы с адресной строкой": "Model for synchronizing form values with the address bar.",
    "Подключение сортировки": "Sorting integration.",
    "Аттрибут (название) поля сортировки в форме": "Attribute (name) of the sorting field in the form.",
    "Значение сортировки по умолчанию. Нужно указать название свойства, по которому items будут сортироваться,\nа с помощью знака \"-\" задать тип сортировки (со знаком минус - сортировать по убыванию, иначе по возрастанию).": "Default sorting value. Specify the property name by which items will be sorted,\nand use a '-' sign to set the sorting type (with a minus sign, sort in descending order; otherwise, sort in ascending order).",
    "Включить сортировку": "Enable sorting.",
    "Дополнительный CSS-класс для элемента отображения": "Additional CSS class for the display element.",
    "Объект CSS стилей": "CSS styles object.",
    "Переопределение view React компонента для кастомизации отображения": "Override React view component for customization of display.",
    "Пользовательская иконка закрытия": "Custom close icon.",
    "Пользовательская иконка открытия": "Custom open icon.",
    "Номер активного AccordionItem, который может меняться динамический или быть статичным": "Number of the active AccordionItem, which can change dynamically or be static.",
    "Переводит Accordion в выключенное состояние": "Turns off the Accordion state.",
    "Включает режим в котором можно открыть только один AccordionItem": "Enables the mode where only one AccordionItem can be open.",
    "Пользовательская иконка svg или название иконки или объект с иконками open и close": "Custom SVG icon or icon name or object with open and close icons.",
    "Вызываемая функция при каждом изменении состояния": "Callback function triggered on each state change.",
    "Стилизация позиционирования.\nПри значении \"top\" верхняя часть шапки будет закруглена.": "Styling of positioning.\nWith \"top\" value, the top part of the header will be rounded.",
    "Отображать ли иконку у AccordionItem": "Whether to display an icon on the AccordionItem.",
    "Тема аккордеона": "Accordion theme.",
    "Название AccordionItem": "AccordionItem title.",
    "Флаг, который включает анимацию": "Flag that enables animation.",
    "Время анимации в миллисекундах": "Animation time in milliseconds.",
    "Дополнительное содрежание сообщения.": "Additional content of the message.",
    "Основное сообщения Оповещения": "Main notification message.",
    "Callback функция вызываемая при нажатии на кнопку закрытия": "Callback function triggered when the close button is clicked.",
    " Нужно ли отображать кнопку, чтобы закрыть Оповещение": "Whether to display a button to close the notification.",
    "Нужно ли отображать иконку, соответствующую типа Оповещения": "Whether to display an icon corresponding to the notification type.",
    "Типы Оповещений": "Notification types.",
    "Альтернативный текст для изображения": "Alternative text for the image.",
    "Наличие обводки вокруг аватара": "Presence of a border around the avatar.",
    "Форма аватара": "Avatar shape.",
    "Размер аватара": "Avatar size.",
    "Ссылка на изображение для аватара": "Link to the image for the avatar.",
    "Набор адаптивных изображений": "Set of responsive images.",
    "Статус онлайна": "Online status.",
    "Заголовок аватарки": "Avatar title.",
    "Нужно ли отображать счетчик": "Whether to display a counter.",
    "Текст для badge": "Text for the badge.",
    "Стиль скругления": "Corner style.",
    "Нужно ли отображать кнопку, чтобы закрыть badge": "Should a button be displayed to close the badge?",
    "Размер для badge": "Size for the badge.",
    "Тип badge": "Badge type.",
    "Содержимое счетчика": "Counter content.",
    "Состояние счетчика": "Counter state.",
    "Количество отображаемых за раз месяцев": "Number of months displayed at a time.",
    "Функция возвращает выбранную в календаре дату": "Function that returns the selected date from the calendar.",
    "Свойства для компонента DayPickerInput": "Properties for the DayPickerInput component.",
    "Отображать Footer для календаря (содержит todayButton)": "Display Footer for the calendar (includes todayButton).",
    "Значение задает выбранные в календаре дату или диапазон дат.\nНеобходимо передать валидную дату в виде строки (массива строк)": "The value sets the selected date or date range from the calendar.\nYou need to pass a valid date as a string (array of strings).",
    "Формат даты отправляемый на сервер": "Date format sent to the server.",
    "Пропсы для компонента отображения": "Props for the display component.",
    "Самый крайний год в прошлом": "The farthest year in the past.",
    "Отображает панель для выбора месяца/года": "Displays a panel for selecting the month/year.",
    "Текущий месяц календаря, также задает выбранный в календаре год": "Current month of the calendar; also sets the selected year in the calendar.",
    "Функция обновляет значение выбранного месяца": "Function that updates the value of the selected month.",
    "Хранит выбранную дату или диапазон дат": "Stores the selected date or date range.",
    "Самый крайний год в будущем": "The farthest year in the future.",
    "Функция изменения состояние отображения панели для выбора месяца/года": "Function to change the state of displaying the month/year panel.",
    "Параметры для аватара": "Parameters for the avatar.",
    "Текст шапки (заголовок)": "Header text (title).",
    "Свойства для компонента <Menu/>": "Properties for the <Menu/> component.",
    "Коллекция кнопок": "Collection of buttons.",
    "Обложка для карточки, нужно передать ссылку на изображение": "Cover for the card; you need to pass a link to an image.",
    "Описание карточки": "Card description.",
    "Контент футера": "Footer content.",
    "Контент хедера": "Header content.",
    "Коллекция ссылок": "Collection of links.",
    "Заголовок карточки": "Card title.",
    "Дочерний элемент": "Child element.",
    "Переводит состояние компонента в выключенное": "Turns off the state of the component.",
    "Иконка": "Icon.",
    "Параметры для уведомления, которое появляется после копирования": "Parameters for the notification that appears after copying.",
    "Callback который вызывается при копировании": "Callback that is triggered when copying.",
    "Позволяет включить или выключить отображение иконки": "Allows enabling or disabling the display of an icon.",
    "Значение, которое будет использоваться при копировании": "Value that will be used when copying.",
    "Значение": "Value.",
    "Дополнительный CSS-класс для ячейки со значением": "Additional CSS class for the cell with a value.",
    "Наименование": "Name.",
    "Дополнительный CSS-класс для ячейки с наименованием": "Additional CSS class for the cell with a name.",
    "Количество колонок, которое занимает элемент": "Number of columns the element occupies.",
    "Максимальная ширина таблицы в px": "Maximum table width in pixels.",
    "Количество колонок, которое будет применяться, начиная от указанной ширины и меньше": "Number of columns that will be applied starting from the specified width and decreasing.",
    "Дочерние компоненты": "Child components.",
    "Максимальное количество колонок": "Maximum number of columns.",
    "Контролы, которые нужно расположить рядом с таблицей": "Controls that need to be placed next to the table.",
    "Вариант расположения ячеек \"ключ-значение\"": "Layout option for \"key-value\" cells.",
    "Перестраивать таблицу при ресайзе": "Rebuild the table on resize.",
    "Размер ячеек в таблице": "Cell size in the table.",
    "Заголовок таблицы": "Table title.",
    "Брейкпоинты": "Breakpoints.",
    "Дополнительный CSS-класс": "Additional CSS class.",
    "В каком случае закрывать DropDown. По-умолчанию - `click-away`": "When to close the DropDown. Default is `click-away`.",
    "Содержимое DropDown (компонент или jsx-код)": "Content of the DropDown (component or JSX code).",
    "Позволяет управлять отображением указателя": "Allows controlling the display of the pointer.",
    "Переопределение view React компонента для кастомизациии отображения": "Override React view component for customization of display.",
    "Рассчет абсолютной позиции": "Calculation of absolute position.",
    "Ссылка на view": "Link to the view.",
    "Имя иконки (латиницей). Импорт иконок происходит на старте приложения.": "Icon name (in Latin). Icons are imported at the application start.",
    "Функция которая вызывается при клике по иконке": "Function triggered when clicking on the icon.",
    " Должен ли данный элемент участвовать в последовательной навигации": "Should this element participate in sequential navigation?",
    "Заголовок, отображаемый при наведении (через нативное поле title)": "Title displayed on hover (via the native title field).",
    "Нижний border": "Bottom border.",
    "Кастомная иконка": "Custom icon.",
    "Заголовок элемента меню": "Menu item title.",
    "Функция вызываемая при клике": "Function triggered when clicked.",
    "Пропсы для DropDown": "Props for the DropDown.",
    "Кастомная иконка, по клику на которую открывается меню": "Custom icon that opens the menu when clicked.",
    "Переопределение view React элемента меню для кастомизации отображения": "Override React menu item view for customization of display.",
    "Элементы меню": "Menu items.",
    "Представление элемента слайдера.": "Slider item representation.",
    "Элементы слайдера.": "Slider items.",
    "Опции слайдера.": "Slider options.",
    "Параметры для колонки create": "Parameters for the 'create' column.",
    "Id для Crud": "ID for CRUD.",
    "Представление для Crud": "Representation for CRUD.",
    "Параметры для колонки delete": "Parameters for the 'delete' column.",
    "Параметры для колонки detail": "Parameters for the 'detail' column.",
    "Функция-обработчик ошибок": "Error handler function.",
    "Параметры формы": "Form parameters.",
    "Параметры Grid": "Grid parameters.",
    "Параметры для колонки index": "Parameters for the 'index' column.",
    "Режим работы Crud": "CRUD mode.",
    "Первичный ключ": "Primary key.",
    "Ключ запроса": "Request key.",
    "Методы rest api": "REST API methods.",
    "Ссылка на rest": "REST link.",
    "Модель используемая для поиска": "Model used for searching.",
    "Параметры для колонки update": "Parameters for the 'update' column.",
    "Представление": "Representation.",
    "Компонент страницы, который отобразится, если путь будет соответствовать location.pathname": "Page component that will be displayed if the path matches location.pathname.",
    "Свойства для компонента страницы": "Properties for the page component.",
    "Название или список с названиями перечислений, полученных с бэкенда": "Name or list of names of enumerations received from the backend.",
    "Если true, то путь должен точно соответствовать location.pathname": "If true, the path must exactly match location.pathname.",
    "Идентификатор роута": "Route ID.",
    "Отображать ссылку или кнопку в навигации для перехода на данный роут": "Display a link or button in the navigation to navigate to this route.",
    "Отображать или показывать роут": "Display or show the route.",
    "Вложенные роуты": "Nested routes.",
    "Текст, который отобразится на кнопке навигации для данного роута": "Text that will be displayed on the navigation button for this route.",
    "Тип шаблона для данного роута": "Template type for this route.",
    "Название или список с названиями моделей, полученных с бэкенда": "Name or list of model names obtained from the backend.",
    "Путь до роута": "Path to the route.",
    "Обработчик, который принимает параметры URL и возвращает массив с пропсами для хука useFetch и компонента\nList.\nФункция запускается перед рендерингом приложения в режиме SSR и используется для предварительной\nзагрузки данных, необходимых на текущей странице.\nХук useFetch и компонент List не будут повторно инициализироваться и делать запросы на клиенте,\nесли подгруженные данные существуют.": "Handler that takes URL parameters and returns an array of props for the useFetch hook and List component.\nThe function runs before rendering the application in SSR mode and is used to pre-load data needed on the current page.\nThe useFetch hook and List component will not be re-initialized and won't make requests on the client if the pre-loaded data exists.",
    "В свойстве можно передать как путь, на который осуществится редирект, так и булево значение.\nЕсли свойство равно true - то редирект произойдет на первый из вложенных роутов.": "In this property, you can pass either the path for redirection or a boolean value.\nIf the property is true, the redirection will occur to the first nested route.",
    "Назначение страницы, указывается, чтобы приложение автоматически могло найти страницу авторизации или 404-ю..": "Page purpose, specified for the application to automatically find the authorization page or a 404 page.",
    "Список с ролями, который показывает, кому из пользователей будет доступен просмотр страницы": "List of roles that indicate which users can access the page.",
    "Заголовок страницы": "Page title.",
    "Название для action": "Action name.",
    "Компонент": "Component.",
    "Свойства компонента": "Component properties.",
    "Сообщение о подтверждении": "Confirmation message.",
    "Коллекция исключенных Controls": "Collection of excluded Controls.",
    "Коллекция Controls": "Collection of Controls.",
    "Режим отображения": "Display mode.",
    "Функция обратного вызова, срабатывает после нажатия": "Callback function triggered after clicking.",
    "Обязателен ли Personal Key": "Is Personal Key mandatory?",
    "Заголовок": "Title.",
    "Управление отображением": "Display control.",
    "Аттрибут (название) поля в форме": "Attribute (name) of the field in the form.",
    "Переводит элемент в состояние \"не активен\"": "Sets the element to the \"inactive\" state.",
    "Ошибки в поле": "Field errors.",
    "Дополнительный CSS-класс для обертки FieldLayout": "Additional CSS class for the FieldLayout wrapper.",
    "Подсказка, которая отобразится рядом с полем": "Tooltip displayed next to the field.",
    "Input ID для связи поля с label": "Input ID for associating the field with the label.",
    "Свойства для элемента input": "Properties for the input element.",
    "Возможность отрендерить поле без обертки в компонент FieldLayout": "Capability to render the field without the FieldLayout wrapper component.",
    "Название поля либо отмена отображение поля (false)": "Field name or cancel field display (false).",
    "Модель с полями формы": "Model with form fields.",
    "Callback-функция, которая вызывается при изменении данных": "Callback function triggered when data changes.",
    "Подсказка для поля": "Field tooltip.",
    "Префикс, который добавится к аттрибуту (названию) поля в форме": "Prefix added to the attribute (name) of the field in the form.",
    "Обязательное ли поле? Если true, то к названию будет добавлен\nмодификатор 'required' - красная звездочка (по умолчанию)": "Is the field required? If true, the 'required' modifier (red asterisk) will be added to the name (by default).",
    "При фокусировке на поле ввода будет запускаться поиск": "Search will be triggered when focusing on the input field.",
    "Показывать иконку очищения поля": "Show field clearing icon.",
    "Размер поля": "Field size.",
    "Значение для поля": "Value for the field.",
    "Свойства для компонента отображения": "Properties for the display component.",
    "Текст для отображения": "Text to display.",
    "Цвет": "Color.",
    "Включить/выключить badge": "Enable/disable badge.",
    "Значение badge": "Badge value.",
    "Цифра (к примеру, новые сообщения)": "Number (e.g., new messages).",
    "Включает стиль `block`, делая размер кнопки на 100% ширины блока": "Enables the `block` style, making the button 100% width of the block.",
    "Вложенные элементы": "Nested elements.",
    "Цвет состояния": "State color.",
    "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Your text')`.": "When this property is specified, a native confirmation window with the confirmation text will be displayed\nafter clicking the button and before the action is executed - `window.confirm('Your text')`.",
    "Темная тема": "Dark theme.",
    "Переводит кнопку в состояние \"не активна\"": "Sets the button to the \"inactive\" state.",
    "ID формы, для которой кнопка выполняет submit. При указании ID формы кнопка будет показывать состояние загрузки\nпри отправке формы.": "ID of the form for which the button performs a submit. If the form ID is specified, the button will show a loading state\nwhen submitting the form.",
    "Подсказка, отображается при наведении (через тег title)": "Tooltip displayed on hover (via the title tag).",
    "Отобразить кнопку в состоянии неуспешного нажатия (например, при неуспешном ajax запросе)": "Show the button in a failed press state (e.g., in case of an unsuccessful AJAX request).",
    "Отображать индикатор загрузки?": "Show loading indicator?",
    "Текст кнопки или ссылки": "Button or link text.",
    "Отображать как ссылку?": "Display as a link?",
    "Обработчик события нажатия. Для асинхронных событий вовзращяйте в обработчике `Promise`, тогда кнопка\nавтоматически будет переключаться в режим загрузки (`loading`) на время выполнения `Promise`.": "Click event handler. For asynchronous events, return a `Promise` in the handler, and the button\nwill automatically switch to the loading mode during the execution of the `Promise`.",
    "Включает стиль `outline`, когда у кнопки остается только `border`, а цвет кнопки становится прозрачным": "Enables the `outline` style, where only the `border` remains for the button, and the button color becomes transparent.",
    "Через сколько миллисекунд должно исчезнуть состояние \"failed\"": "After how many milliseconds the \"failed\" state should disappear.",
    "Размер": "Size.",
    "Выбор html-тэга, который будет вставлен в DOM": "Choose the HTML tag to be inserted into the DOM.",
    "HTML аттрибут `target`, доступен только для ссылок": "HTML `target` attribute, available only for links.",
    "Цвет текста кнопки или ссылки": "Button or link text color.",
    "ID роута, на который необходимо перейти, указанный в дереве `steroids` роутинга. Для передачи параметров\nиспользуйте свойство `toRouteParams`": "ID of the route to navigate to, specified in the `steroids` routing tree. Use the `toRouteParams` property to pass parameters.",
    "Параметры роута, на который необходимо перейти, см. свойство `toRoute`.": "Parameters of the route to navigate to, see the `toRoute` property.",
    "HTML Тип": "HTML type.",
    "Ссылка на внешнюю страницу, используется совместно с свойством `link`": "Link to an external page, used in conjunction with the `link` property.",
    "Флаг определяющий включен ли элемент": "Flag that determines whether the element is enabled.",
    "Id компонента": "Component ID.",
    "Id формы": "Form ID.",
    "Ориентация списка": "List orientation.",
    "Коллекция ошибок": "Error collection.",
    "Свойства для компонента Calendar": "Properties for the Calendar component.",
    "Задано ли значение даты в часовом поясе UTC\n(пример: с бэкенда приходит дата в UTC, но нужно отбразить ее в локальном времени.\nВ этом случае dateInUTC = true, а useUTC = false)": "Is the date value set in UTC timezone\n(for example: date comes from the backend in UTC, but needs to be displayed in the local time.\nIn this case, dateInUTC = true, and useUTC = false).",
    "Формат даты показываемый пользователю": "Date format displayed to the user.",
    "Иконка, отображаемая в правой части поля": "Icon displayed on the right side of the field.",
    "Свойства поля props.input": "Field properties props.input.",
    "Свойства, передаваемые для поля во view": "Properties passed to the field in the view.",
    "Опции маски для поля ввода": "Mask options for the input field.",
    "Дополнительная функция, срабатывающая при изменении props.input": "Additional function triggered when props.input changes.",
    "Показывать при наведении на поле иконку для сброса значения поля в начальное состояние": "Show an icon for resetting the field value to its initial state when hovering over the field.",
    "Приводить значение даты к часовому поясу UTC\n(пример: с бэкенда приходит дата в какой-либо временной зоне (не UTC), но нужно отбразить ее\nв часовом поясе UTC. В этом случае dateInUTC = false, а useUTC = true)": "Convert the date value to the UTC timezone\n(for example: date comes from the backend in a certain time zone (not UTC), but needs to be displayed in the UTC timezone.\nIn this case, dateInUTC = false, and useUTC = true).",
    "Свойства для view компонента": "Properties for the view component.",
    "Свойства для поля во view": "Properties for the field in the view.",
    "Показать или скрыть выпадающую панель": "Show or hide the dropdown panel.",
    "Ref для input элемента, который накладывает маску": "Ref for the input element that applies the mask.",
    "Функция очищает значение поля": "Function to clear the field value.",
    "Функция закрывает выпадающую панель": "Function to close the dropdown panel.",
    "Функция возвращает текущее значение времени (дата + время)": "Function that returns the current time value (date + time).",
    "Свойства для input элемента from": "Properties for the 'from' input element.",
    "Свойства для input элемента to": "Properties for the 'to' input element.",
    "Placeholder подсказка": "Placeholder hint.",
    "Отображение кнопки для сброса значения поля": "Display a button to reset the field value.",
    "Свойства для компонента панели времени": "Properties for the time panel component.",
    "Свойства для поля 'from'": "Properties for the 'from' field.",
    "Свойства для поля 'to'": "Properties for the 'to' field.",
    "Источник контента": "Content source.",
    "Тип контента для элемента": "Content type for the element.",
    "Отображаемое название": "Display name.",
    "Свойство, которое устанавливает один type и src контента для всех пунктов": "Property that sets a single type and src for all items' content.",
    "Параметры для элемента input": "Parameters for the input element.",
    "Добавляет кнопку при нажатии на которую выбираются все элементы, работает только при multiple: true": "Adds a button that, when clicked, selects all items. Works only when multiple: true.",
    "Элементы вложенные внутрь DropDownField": "Elements nested inside the DropDownField.",
    "Включает стиль `outline`, когда у DropDownField остается только `border`, а задний фон становится прозрачным": "Enables the `outline` style, where only the `border` remains for the DropDownField, and the background becomes transparent.",
    "Нужно ли использовать троеточие при переполнении DropDownField": "Whether to use an ellipsis when the DropDownField overflows.",
    "Показать иконку сброса для выбранных значений": "Show a reset icon for selected values.",
    "Компонент поля": "Field component.",
    "Подсказка, которая отображается, когда в поле нет ошибок": "Tooltip that is displayed when there are no errors in the field.",
    "Обязательное ли поле? Если true,\nто к названию будет добавлен модификатор 'required' - красная звездочка (по умолчанию)": "Is the field required? If true, the 'required' modifier (red asterisk) will be added to the name (by default).",
    "Отображать ли состояние successful на поле": "Display the successful state on the field.",
    "Какой компонент для item использовать?": "Which component to use for the item?",
    "Дополнительный CSS-класс для заголовка": "Additional CSS class for the title.",
    "Заголовок для колонки таблицы.": "Title for the table column.",
    "Будет ли отображён item ?": "Will the item be displayed?",
    "При фокусировке на одном из элементов формы и нажатию на клавиши стрелок вверх/вниз + Shift\nпроисходит добавление группы полей сверху или снизу соответственно": "When focusing on one of the form elements and pressing the up/down arrow keys + Shift,\nadds a field group above or below, respectively.",
    "Добавляет эффект зебры к таблице": "Adds a zebra effect to the table.",
    "Изначальное количество групп с полями": "Initial number of field groups.",
    "Начальные значения в полях": "Initial values in the fields.",
    "Переопределение view React компонента для кастомизации отображения группы полей": "Override the view React component for customizing the display of the field group.",
    "Пропсы для компонента отображения группы полей - FieldListItemView": "Props for the component displaying the field group - FieldListItemView.",
    "Список с полями формы": "List with form fields.",
    "Отображение кнопки для добавления ещё одной группы с полями": "Display a button for adding another field group.",
    "Возможность удаления группы с полями (добавляет крестик справа от группы)": "Ability to delete a field group (adds a cross icon to the right of the group).",
    "Дополнительный CSS-класс для таблицы": "Additional CSS class for the table.",
    "Пропсы для компонента отображения списка с группами полей - FieldListView": "Props for the component displaying the list with field groups - FieldListView.",
    "Дополнительный CSS-класс для '<fieldset>...</fieldset>'": "Additional CSS class for the '<fieldset>...</fieldset>'.",
    "Диспатч": "Dispatch.",
    "Конфигурационный массив с полями формы": "Configuration array with form fields.",
    "Заголовок для группы полей в форме": "Title for the field group in the form.",
    "Префикс для полей формы": "Prefix for form fields.",
    "Провайдер": "Provider.",
    "Редьюсер": "Reducer.",
    "Размер компонента": "Component size.",
    "Кастомная иконка для удаление файла": "Custom icon for file deletion.",
    "ID файла": "File ID.",
    "Вариант отображения файлов": "File display option.",
    "Обработчик события удаления файла": "File deletion event handler.",
    "Показать значок удаление файла": "Show file deletion icon.",
    "Исходное название файла": "Original file name.",
    "Уникальный текстовый идентификатор": "Unique text identifier.",
    "Пропсы для кнопки": "Props for the button.",
    "View компонент для кнопки": "View component for the button.",
    "Пропсы для элемента файла": "Props for the file item.",
    "View компонент для элемента списка файлов": "View component for the file list item.",
    "Url на который будет отправлена форма": "URL to which the form will be submitted.",
    "Синхронизация значений формы с адресной строкой": "Synchronize form values with the address bar.",
    "Очищать ли данные формы с redux хранилища при размонтировании компонента. По-умолчанию - false": "Whether to clear form data from the Redux store when the component is unmounted. Default is false.",
    "Если в форме есть элементы '<input>', то произойдет автоматическая фокусировка на первом из них": "If there are '<input>' elements in the form, automatic focus will occur on the first one.",
    "Сохраняет значения полей формы в LocalStorage": "Saves form field values to LocalStorage.",
    "Автоматически стартовать 2fa аутентификацию (отправлять код)": "Automatically start 2FA authentication (send code).",
    "Название действия, которое передаётся в API Google reCAPTCHA v3, для более детального анализа\nповедения пользователя (https://developers.google.com/recaptcha/docs/v3)": "The name of the action that is passed to the Google reCAPTCHA v3 API for more detailed analysis of user behavior.",
    "Поля, которые необходимо поместить в форму": "Fields to be placed in the form.",
    "Идентификатор формы": "Form identifier.",
    "Начальные значения формы": "Initial form values.",
    "Обработчик события после отправки формы": "Event handler after form submission.",
    "Обработчик события перед отправкой формы": "Event handler before form submission.",
    "Обработчик события при каком-либо изменении в форме": "Event handler for any change in the form.",
    "Обработчик успешного выполнения формы (без ошибок)": "Event handler for successful form execution (without errors).",
    "Обработчик события отправки формы": "Event handler for form submission.",
    "Обработчик, который вызывается при запросе 2FA": "Handler that is called when requesting 2FA.",
    "Префикс": "Prefix.",
    "Текст ошибки при неудачной отправке данных. По-умолчанию: \"Ошибка сервера\"": "Error text for unsuccessful data submission. Default: \"Server error\".",
    "Надпись на кнопке отправки формы": "Label on the form submission button.",
    "Использовать для данных глобальное хранилище (redux)": "Use global storage (Redux) for data.",
    "Набор с правилами для проверки соответствия значений полей формы определенному формату.\nПроверка запускается в момент отправки формы (в обработчике onSubmit).": "A set of rules for validating field values against a specific format. Validation is triggered when the form is submitted (in the onSubmit handler).",
    "Свойства для представления": "Properties for the presentation.",
    "Конфигурация wysiwyg реадактора": "WYSIWYG editor configuration.",
    "Обработчик события при снятии фокуса с редактора": "Event handler when focus is removed from the editor.",
    "Обработчик события при фокусе на редактора": "Event handler when focus is on the editor.",
    "После загрузки изображения на сервер,\nможно указать с каким процессором должно вернуться картинка": "After uploading an image to the server,\nyou can specify which processor the image should return with.",
    "Url на который будет отправлена форма загрузки файла": "URL to which the file upload form will be submitted.",
    "Экшн для отправки параметров обрезки на бэкенд": "Action to send cropping parameters to the backend.",
    "Изначальные параметры обрезки изображения": "Initial image cropping parameters.",
    "Пропсы для модуля react-image-crop": "Props for the react-image-crop module.",
    "Коллекция кнопок, которая отобразится в нижней секции Modal": "Collection of buttons that will be displayed in the bottom section of the Modal.",
    "Кастомный CSS-класс": "Custom CSS class.",
    "Время в миллисекундах, через которое автоматически произойдет закрытие Modal.": "Time in milliseconds after which the Modal will automatically close.",
    "Время, в течение которого будет происходить анимация закрытия Modal.\nПереопределяет отрезок времени, заданный в ModalPortal": "Time during which the Modal closing animation will take place.\nOverrides the time interval set in ModalPortal.",
    "Компонент, который отрендерится внутри Modal": "Component that will be rendered inside the Modal.",
    "Свойства для внутреннего компонента": "Properties for the inner component.",
    "Группа Modal": "Modal group.",
    "Порядковый номер Modal": "Modal ordinal number.",
    "Значение свойства отслеживается для показа/закрытия Modal.\nЕсли для компонента ModalPortal установлено значение задержки (animationDelayMc), то после закрытия\nпользователем Modal, оно исчезнет не сразу, а через указанный в animationDelayMc промежуток времени.\nВ течение этого времени флаг isClosing будет равен true.\nЕсли задержка не установлена, Modal закроется сразу же и флаг isClosing всегда будет равен false.": "The property value is tracked to show/close the Modal.\nIf the ModalPortal component has a delay value set (animationDelayMc), after the Modal is closed\nby the user, it will not disappear immediately, but after the time interval specified in animationDelayMc.\nDuring this time, the isClosing flag will be true.\nIf no delay is set, the Modal will close immediately, and the isClosing flag will always be false.",
    "Обработчик срабатывает при закрытии Modal": "Handler triggered when the Modal is closed.",
    "Закрытие Modal при нажатии на клавишу 'ESC'": "Closing the Modal when the 'ESC' key is pressed.",
    "Закрытие Modal при клике на компонент overlay внутри Modal (темный фон, отделяющий контент страницы от Modal)": "Closing the Modal when clicking on the overlay component inside the Modal (dark background that separates the page content from the Modal).",
    "Размер Modal": "Modal size.",
    "Заголовок Modal": "Modal Title",
    "Переопределение React-компонента для кастомизации view-отображения": "Override React component for custom view rendering",
    "Параметры обрезки": "Trimming Parameters",
    "Название кнопки": "Button Name",
    "Пропсы для модального окна": "Props for Modal Window",
    "Переопределение внешнего вида модального окна": "Override external appearance of modal window",
    "Текст или React-нода, которая будет отрендерена справа от поля.": "Text or React node to render on the right side of the field",
    "Текст или React-нода, которая будет отрендерена слева от поля.": "Text or React node to render on the left side of the field",
    "Пользовательская иконка svg или название иконки": "Custom SVG icon or icon name",
    "Конфигурация маски": "Mask Configuration",
    "Изображение или React-нода, которая будет отрендерена справа от поля.": "Image or React node to render on the right side of the field",
    "Изображение или React-нода, которая будет отрендерена слева от поля.": "Image or React node to render on the left side of the field",
    "Свойства для компонента Nav": "Props for Nav component",
    "Максимальное значение": "Maximum Value",
    "Минимальное значение": "Minimum Value",
    "Шаг увеличения/уменьшения значения": "Step for increasing/decreasing value",
    "Если true, то отображается шкала сложности пароля": "If true, displays password complexity scale",
    "Если true, то отображается иконка скрытия/показа пароля": "If true, displays hide/show password icon",
    "Возможность полностью сбрасывать рейтинг, при повторном нажатии на звезду": "Ability to reset rating completely on re-clicking the star",
    "Значок (бэйдж) с заголовком.": "Badge icon with title",
    "Количество звезд по умолчанию": "Default star count",
    "Максимальное количество звезд": "Maximum star count",
    "Функция, вызываемая после загрузки асинхронного скрипта.": "Function called after loading asynchronous script.",
    "Положение значка ReCaptcha. Может быть 'bottomright' (внизу справа), 'bottomleft' (внизу слева) или 'inline' (встроенный).": "Position of ReCaptcha badge. Can be 'bottomright', 'bottomleft', or 'inline'",
    "Языковой код для ReCaptcha.": "Language code for ReCaptcha.",
    "Флаг, указывающий на изоляцию ReCaptcha.": "Flag indicating ReCaptcha isolation.",
    "Обработчик события изменения ReCaptcha.": "Event handler for ReCaptcha change.",
    "Обработчик события ошибки ReCaptcha.": "Event handler for ReCaptcha error.",
    "Обработчик события истечения срока действия ReCaptcha.": "Event handler for ReCaptcha expiration.",
    "Ссылка на ref-объект React для ReCaptcha.": "Reference to React ref object for ReCaptcha.",
    "Ключ сайта ReCaptcha. По умолчанию process.env.APP_RECAPTCHA_SITE_KEY": "ReCaptcha site key. Default is process.env.APP_RECAPTCHA_SITE_KEY",
    "Защищенный токен для ReCaptcha.": "Protected token for ReCaptcha.",
    "Значение tabindex для ReCaptcha.": "Tabindex value for ReCaptcha.",
    "Тип ReCaptcha. Может быть 'image' (изображение) или 'audio' (аудио).": "Type of ReCaptcha. Can be 'image' or 'audio'.",
    "Значение по-умолчанию при первом рендере. Для isRange=false используется number, для isRange=true - number[]": "Default value on initial render. For isRange=false, use number, for isRange=true - number[]",
    "Делает слайдер с двумя значениями": "Creates a slider with two values",
    "Метки на ползунке. В объекте '{'key: value'}' key определяет положение, а value определяет, что будет отображаться.\nЕсли вы хотите задать стиль определенной точки метки, значением должен быть объект,\nсодержащий свойства style и label.": "Labels on the slider. In object '{'key: value'}', key defines position, and value defines what will be displayed.\nIf you want to style a specific label point, the value should be an object\ncontaining style and label properties.",
    "Максимальное значение в слайдере": "Maximum value on the slider",
    "Минимальное значение в слайдере": "Minimum value on the slider",
    "Функция, вызываемая после отпускания tip'а у слайдера (при событии onmouseup)": "Function called after releasing the slider tip (onmouseup event)",
    "Свойства для компонента слайдера": "Props for slider component",
    "Длина шага слайдера": "Slider step length",
    "Любое строковое значение после значения состояния слайдера в всплывающем окошке.": "Any string value after the slider state value in the tooltip",
    "Отправлять форму при нажатии на кнопку `enter`": "Submit form on 'enter' button press",
    "Отключить border вокруг элемента": "Disable border around the element",
    "Значение для BooleanFormatter": "Value for BooleanFormatter",
    "Формат даты": "Date Format",
    "Дата": "Date",
    "Переопределение view React компонента для кастомизации отображения колонки": "Override React view component to customize column display",
    "Показывать ли дату учитываю временную зону": "Whether to show the date considering time zone",
    "Перечисление элементов.\n1) Может быть строкой вида: `app.geo.enums.Cities`\n2) Массивом: ['{'id: 1, label: \"London\"'}']": "Enumeration of elements.\n1) Can be a string like: `app.geo.enums.Cities`.\n2) Array: ['{'id: 1, label: \"London\"'}'].",
    "Уникальный идентификатор элемента из `items`": "Unique identifier of the element from `items`",
    "Если не указан размер файла, то в случае, если showZero = true\nто будет показан `0`, иначе пустая строка": "If file size is not specified, and showZero = true,\nthen '0' will be displayed, otherwise an empty string",
    "Размер файла": "File size",
    "Валюта @enum '{eur, rub, usd}'": "Currency @enum '{eur, rub, usd}'",
    "Разрядность (при передаче int в значении)": "Precision (when passing int in value)",
    "Округление числа": "Number rounding",
    "Значение для MoneyFormatter": "Value for MoneyFormatter",
    "Параметры авторизации.": "Authorization Parameters",
    "Свойства для бургер-меню.": "Props for burger menu",
    "Свойства для логотипа.": "Props for logo",
    "Свойства для навигации": "Navigation properties",
    "Информация о пользователе.": "User Information",
    "Название цвета": "Color name",
    "Размер элемента": "Element size",
    "Идентификатор уведомления": "Notification ID",
    "Цвет всплывающего уведомления": "Popup notification color",
    "Сообщение во всплывающем уведомлении": "Message in the popup notification",
    "Задержка перед закрытием": "Delay before closing",
    "Исходные уведомления": "Initial notifications",
    "Переопределение view React компонента для кастомизации отображения элемента": "Override view React component for custom element display",
    "Коллекция уведомлений": "Notification collection",
    "Позиционирование элемента уведомления": "Positioning of notification element",
    "Функция, позволяющая задавать собственные иконки в зависимости от прогресса и статуса": "Function to provide custom icons depending on progress and status",
    "Функция, позволяющая изменить генерацию лейбла": "Function to provide custom label generation",
    "Прогресс в процентах": "Progress in percentages",
    "Флаг, определяющий показывать ли лейбл": "Flag indicating whether to show the label",
    "Статус компонента": "Component status",
    "Тип компонента - круг или линия": "Component type - circle or line",
    "Наличие верней границы у элемента": "Presence of upper border on the element",
    "CSS-класс для элемента отображения": "CSS class for display element",
    "Контент, который отобразится, если элемент навигации будет активен": "Content to display if the navigation item is active",
    "Свойства для компонента с контентом": "Props for content component",
    "Props для пункта": "Props for item",
    "Текст элемента": "Item text",
    "Обработчик события нажатия": "Click event handler",
    "Ссылка на внешнюю страницу": "Link to an external page",
    "Видимость элемента": "Element visibility",
    "Массив объектов с информацией об иконках для футера.": "Array of objects with footer icon information.",
    "Флаг, определяющий, следует ли разделять элементы навигации.": "Flag determining whether to separate navigation items.",
    "Флаг, определяющий, будет ли сайдбар открытым по умолчанию.": "Flag determining whether the sidebar will be open by default.",
    "Элементы навигации для компонента Nav.": "Navigation items for Nav component.",
    "Объект с информацией о логотипе.": "Object with logo information.",
    "Props для компонента Menu.": "Props for Menu component.",
    "Callback-функция, вызывается при клике на элемент навигации.": "Callback function triggered when a navigation item is clicked.",
    "Callback-функция, вызывается при переключении сайдбара.": "Callback function triggered when the sidebar is toggled.",
    "Объект с информацией о пользователе.": "Object with user information.",
    "Тип анимации": "Animation type",
    "Дополнительные CSS классы": "Additional CSS classes",
    "Высота элемента": "Element height",
    "Тип компонента": "Component type",
    "Ширина элемента": "Element width",
    "Позиция стрелки снизу": "Arrow position at the bottom",
    "Позиция стрелки слева": "Arrow position on the left",
    "Позиция стрелки справа": "Arrow position on the right",
    "Позиция стрелки сверху": "Arrow position at the top",
    "Стили для позиционирования стрелки": "Styles for arrow positioning",
    "Рассчет позиции подсказки": "Tooltip position calculation",
    "Текст подсказки": "Tooltip text",
    "Показывать ли подсказку сразу после рендера страницы": "Whether to show the tooltip immediately after page render",
    "Отступ от элемента": "Offset from the element",
    "Позиционирование подсказки, относительно целевого элемента": "Positioning of the tooltip relative to the target element",
    "Стили для абсолютного позиционирования подсказки": "Styles for absolute positioning of the tooltip",
    "Позиция Tooltip слева": "Tooltip position on the left",
    "Позиция Tooltip справа": "Tooltip position on the right",
    "Позиция Tooltip сверху": "Tooltip position at the top",
    "Свойства для CheckboxField": "Props for CheckboxField",
    "Элемент коллекции item": "Collection item",
    "Первичный ключ для доступа к идентификатору item": "Primary key to access the item identifier",
    "Атрибут колонки, по которому происходит поиск нужного свойства в items и нужного поля в SearchForm": "Column attribute by which to search for the desired property in items and the necessary field in SearchForm",
    "CSS-класс для ячейки со значением": "CSS class for cell with value",
    "Диаграмма.\nЦвет должен соответствовать success | warning | danger | secondary.\nЦвета можно расширить или изменить через стили (см. colors.scss в react-bootstrap)": "Diagram.\nThe color must correspond to success | warning | danger | secondary.\nColors can be extended or changed using styles (see colors.scss in react-bootstrap)",
    "Свойства для компонента форматирования": "Props for formatting component",
    "CSS-класс для ячейки с заголовком колонки '<th>...</th>'": "CSS class for cell with column header '<th>...</th>'",
    "Свойства для компонента отображения заголовка колонки": "Props for component to display column header",
    "Компонент для кастомизации отображения заголовка колонки": "Component for customizing the display of the column header",
    "Подсказка": "Tooltip",
    "Параметры для иконки в колонке": "Parameters for the icon in the column",
    "Заголовок колонки": "Column header",
    "Параметры для ссылки в колонке": "Parameters for link in the column",
    " Параметры для картинки в колонке": "Parameters for image in the column",
    "Включить возможность сортировки по данным в колонке": "Enable sorting by data in the column",
    "Название свойства в items, которое будет использовано как subtitle": "The name of the property in items that will be used as a subtitle",
    "Свойства для компонента отображения значения в ячейке": "Props for component to display value in the cell",
    "Компонент для кастомизации отображения значения в ячейке": "Component for customizing the display of value in the cell",
    "Скрыть или показать колонку": "Hide or show column",
    "Коллекция с контролами": "Collection with controls",
    "Элемент, для которого будет отображаться список с контролами, в нём можно задать видимость контрола\nс помощью свойства 'can' + _upperFirst(control.id)": "Element for which a list of controls will be displayed; visibility of the control can be set using the 'can' + _upperFirst(control.id) property",
    "Показывать заглушку?": "Show placeholder?",
    "Текст заглушки": "Placeholder text",
    "Количество колонок, которое занимает элемент, максимум 12": "The number of columns the element occupies, maximum 12",
    "Содержимое элемента FlexGrid": "Content of the FlexGrid element",
    "Количество колонок, которое занимает элемент на экранах размером lg, максимум 12": "The number of columns the element occupies on screens of size lg, maximum 12",
    "Количество колонок, которое занимает элемент на экранах размером md, максимум 12": "The number of columns the element occupies on screens of size md, maximum 12",
    "Количество колонок для смещения столбца слева": "The number of columns to offset the column to the left",
    "Порядок элемента в FlexGrid": "Order of the element in FlexGrid",
    "Количество колонок, которое занимает элемент на экранах размером sm, максимум 12": "The number of columns the element occupies on screens of size sm, maximum 12",
    "Значение для css-свойства align-items": "Value for the align-items CSS property",
    "Значение для css-свойства flex-direction": "Value for the flex-direction CSS property",
    "Расстояние между элементами в px.\nЕсли передано число, то установится расстояние между строками и между колонками.\nЕсли передан массив, то первый элемент - расстояние между колонками, второй - между строками.": "Spacing between elements in pixels.\nIf a number is passed, the spacing between rows and columns will be set.\nIf an array is passed, the first element is the spacing between columns, and the second is between rows.",
    "Дополнительный CSS-класс для элементов FlexGrid": "Additional CSS class for FlexGrid elements",
    "Элементы FlexGrid": "FlexGrid elements",
    "Значение для css-свойства justify-content": "Value for the justify-content CSS property",
    "Автоматический перенос на новую строку": "Automatic line break",
    "Коллекция с наименованиями и свойствами колонок в таблице": "Collection with names and properties of columns in the table",
    "Коллекция с элементами управления. Данная коллекция отобразится в колонке рядом с каждой записью в таблице.\nНапример, кнопки для удаления и детального просмотра записи.": "Collection of controls. This collection will be displayed in a column next to each record in the table.\nFor example, buttons for deleting and viewing the details of a record.",
    "Включает переменные цвета для строк в таблице": "Includes color variables for rows in the table",
    "Нужно ли отображать колонку с порядковым номером элемента? Если да, то для каждого элемента в коллекции items\nдолжно быть задано свойство index": "Should a column with the ordinal number of the element be displayed? If yes, each element in the items collection\nmust have the index property specified.",
    "Размер Grid": "Grid size",
    "Название ключа, под которым в LocalStorage сохранится значение выбранного шаблона": "Name of the key under which the value of the selected template will be saved in LocalStorage",
    "Шаблон по умолчанию": "Default template",
    "Отобразить переключатель": "Show switch",
    "Коллекция с шаблонами": "Collection of templates",
    "Данные списка": "List data",
    "Расположение переключателя": "Switch position",
    "Дополнительный CSS-класс для элемента с контентом": "Additional CSS class for element with content",
    "Свойства для элемента коллекции": "Props for collection element",
    "Переопределение view React компонента для кастомизации отображения элемента коллекции": "Overriding the view React component to customize the display of a collection element",
    "Указывает, какое количество кнопок с номерами страниц будет доступно до и после выбранной страницы,\nвключая выбранную. Остальные будут спрятаны в элемент \"...\"": "Indicates the number of page number buttons that will be available before and after the selected page,\nincluding the selected one. The rest will be hidden under the \"...\" element",
    "Аттрибут (название) в форме для поля пагинации": "Attribute (name) in the form for the pagination field",
    "Параметры кнопки": "Button parameters",
    "Значение по-умолчанию": "Default value",
    "Подключить пагинацию": "Include pagination",
    "Список, для которого используется пагинация": "List for which pagination is used",
    "Вместо списка с номерами страниц будет кнопка \"Загрузить еще\"": "Instead of a list with page numbers, a \"Load More\" button will be used",
    "Обработчик, который вызывается после смены страницы": "Handler that is called after changing the page",
    "Нужно ли отображать кнопки с шагом до первой / последней страницы": "Should buttons with steps to the first / last page be displayed?",
    "Нужно ли отображать кнопки с шагом в одну страницу": "Should buttons with steps to one page be displayed?",
    "Аттрибут (название) в форме для поля с количеством элементов на странице": "Attribute (name) in the form for the field with the number of items per page",
    "Свойства для кнопок пагинации": "Props for pagination buttons",
    "Подключить выбор количества элементов": "Include selecting the number of items",
    "Расположение элемента в списке": "Location of the element in the list",
    "Список с количествами элементов на странице": "List of item counts per page",
    "Id списка": "List ID",
    "Время, через которое произойдет закрытие Modal": "Time after which Modal will close",
    "Функция, которая вызывается при закрытии модального окна": "Function that is called when the modal window is closed",
    "Имя провайдера": "Provider name",
    "Кастомная иконка, заменяющая первый роут": "Custom icon replacing the first route",
    "Коллекция элементов навигационной цепочки": "Collection of breadcrumb items",
    "Вместо items можно передать идентификатор роута, от которого компонент самостоятельно построит\nнавигационную цепочку": "Instead of items, you can pass the ID of the route from which the component will independently build\nthe breadcrumb trail",
    "Заголовок последней в списке страницы (обычно, это текущая страница, на которой находится пользователь).\nЕсли заголовок не задан, то подставится item.title": "The title of the last page in the list (usually the current page the user is on).\nIf the title is not set, item.title will be used",
    "Показать иконку заменяющую первый роут": "Show icon replacing the first route",
    "При указании в связке с onClick предоставляет возможность реализовать two-way binding": "When specified in conjunction with onClick, provides the ability to implement two-way binding",
    "Общие свойства для всех кнопок группы": "Common properties for all group buttons",
    "Кнопка по умолчанию.": "Default button.",
    "Элементы для группы кнопок": "Elements for a group of buttons",
    "Функция, которая будет вызываться при клике по кнопке": "Function that will be called when a button is clicked",
    "Идентификатор контрола": "Control identifier",
    "Расположение контрола": "Control location",
    "Скрыть или показать контрол": "Hide or show control",
    "Коллекция контролов": "Collection of controls",
    "Пропсы для компонента Nav, в который передаются контролы в качестве items": "Props for the Nav component, to which controls are passed as items",
    "Идентификатор активного элемента. По умолчанию будет активен первый элемент.": "Identifier of the active element. By default, the first element will be active.",
    "Коллекция с элементами навигации. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в навигации.": "Collection of navigation items. You can also pass a route identifier, in which case the component will find all\nnested routes and display them in the navigation.",
    "Шаблон отображения элементов навигации": "Template for displaying navigation items",
    "Обработчик, который вызывается при смене активного элемента навигации": "Handler that is called when the active navigation item changes",
    "Прокрутить страницу к началу при смене url": "Scroll the page to the top when the URL changes",
    "Контент, который отобразится под каждой страницей приложения": "Content that will be displayed below each application page",
    "Если у роута не задано свойство roles, которое определяет, кому из пользователей будет доступен контент\nна соответствующей странице, то подставится стандартный список с ролями": "If the route does not have the 'roles' property set, which determines which users will have access to the content\non the respective page, a default list of roles will be used.",
    "Дерево роутов": "Route tree",
    "Свойства шаблона": "Template properties",
    "Общий шаблон, который оборачивает страницы приложения": "Common template that wraps application pages",
    "Идентификатор узла": "Node identifier",
    "Скрыть или показать узел": "Hide or show node",
    "Максимальный уровень вложенности, до которого все узлы будут отображаться в развёрнутом виде": "Maximum nesting level, up to which all nodes will be displayed in an expanded form",
    "Отображать раскрытыми узлы из LocalStorage": "Display nodes expanded from LocalStorage",
    "Идентификатор (ключ) для сохранения в LocalStorage коллекции с раскрытыми узлами": "Identifier (key) for saving the collection of expanded nodes in LocalStorage",
    "Коллекция с узлами. Также можно передать идентификатор роута, тогда компонент найдет все\nвложенные роуты и отобразит их в виде дерева.": "Collection of nodes. You can also pass a route identifier, in which case the component will find all\nnested routes and display them as a tree.",
    "Ключ для доступа к вложенным элементам узла": "Key to access nested elements of a node",
    "Ограничивает максимальный уровень вложенности дерева": "Limits the maximum nesting level of the tree",
    "Обработчик на клик по узлу": "Handler for clicking on a node",
    "Идентификатор узла, которой нужно отобразить в раскрытом виде": "Identifier of the node that needs to be displayed in the expanded form",
    "Цвет текста": "Text color",
    "Текст": "Text",
    "HTML тег": "HTML tag",
    "Тип текста": "Text type",
    "Цвет заголовка": "Title color",
    "Текст заголовка": "Title text",
    "Тип заголовка": "Title type",
    "Название цвета, соответствующее ему состоянию": "Color name corresponding to its state",
    "Дополнительные стили": "Additional styles",
    "Объект из свойства `input` от redux-form": "Object from the `input` property of redux-form",
    "HTTP метод": "HTTP method",
    "Ориентация элемента": "Element orientation",
    "Уникальный ключ. ID, UUID или другое": "Unique key. ID, UUID or other",
    "MaskField\n\nКомпонент поля ввода текста с маской.\n": "MaskField\n\nText input field component with a mask.\n",
    "Обертка над Axios для запросов на бекенд. Поддерживает токен авторизации, CSRF и обработку ошибок.": "Wrapper over Axios for backend requests. Supports authorization token, CSRF, and error handling.",
    "Слой хранения данных в браузере (cookie, local/session storage) или ReactNative": "Data storage layer in the browser (cookie, local/session storage) or ReactNative",
    "Хелпер для работы с БЭМ классами и DOM элементами": "Helper for working with BEM classes and DOM elements",
    "Компонент для локализации приложения. Поддерживает конфигурацию языка и временной зоны\n\nПример строки: `{__('{count} {count, plural, one{день} few{дня} many{дней}}', {count: 2})}`\n": "Component for application localization. Supports language and timezone configuration.\n\nExample string: `{__('{count} {count, plural, one{day} few{days} many{days}}', {count: 2})}`\n",
    "Получение экземпляра `moment` с учетом временной зоны бекенда": "Getting an instance of `moment` with consideration of the backend timezone",
    "Язык приложения": "Application language",
    "Компонент для работы с мета-данными моделей и типами приложения (appType)": "Component for working with model metadata and application types (appType)",
    "Компонент для подгрузки внешних API: Google Maps, Yandex Maps, Twitter, ...": "Component for loading external APIs: Google Maps, Yandex Maps, Twitter, ...",
    "Метод для загрузки Geetest.": "Method for loading Geetest.",
    "Метод для загрузки Google reCAPTCHA.": "Method for loading Google reCAPTCHA.",
    "Метод для загрузки Google Maps API.": "Method for loading Google Maps API.",
    "Метод для загрузки скрипта по указанному URL.": "Method for loading a script from the specified URL.",
    "Метод для загрузки Twitter виджетов.": "Method for loading Twitter widgets.",
    "Метод для загрузки Yandex Maps API.": "Method for loading Yandex Maps API.",
    "Метод для ожидания выполнения определенного условия.": "Method for waiting for a specific condition to be met.",
    "Провайдер для социальных сетей. Обеспечивает вызов окна соц сети для oauth авторизации": "Provider for social networks. Provides calling the social network window for OAuth authorization",
    "Обертка над Redux Store со встроенными middleware (thunk, multi, promise..) и react-router": "Wrapper over Redux Store with built-in middleware (thunk, multi, promise..) and react-router",
    "Добавляет компоненты полей формы.": "Adds form field components.",
    "Добавляет компоненты форматтеров.": "Adds formatter components.",
    "Добавляет иконки.": "Adds icons.",
    "Добавляет модели.": "Adds models.",
    "Возвращает компонент поля формы по указанному пути.": "Returns a form field component based on the specified path.",
    "Возвращает свойства конфигурации компонента поля формы по указанному пути.": "Returns the configuration properties of a form field component based on the specified path.",
    "Возвращает компонент форматтера по указанному пути.": "Returns a formatter component based on the specified path.",
    "Возвращает свойства конфигурации компонента форматтера по указанному пути.": "Returns the configuration properties of a formatter component based on the specified path.",
    "Возвращает иконку по указанному имени.": "Returns an icon based on the specified name.",
    "Возвращает элемент портала.": "Returns a portal element.",
    "Возвращает зарегистрированные поля формы для указанного идентификатора формы.": "Returns registered form fields for the specified form identifier.",
    "Возвращает компонент представления по указанному пути.": "Returns a view component based on the specified path.",
    "Регистрирует поле формы.": "Registers a form field.",
    "Задает элемент портала.": "Sets a portal element.",
    "Добавляет компоненты представлений.": "Adds view components.",
    "Рендерит компонент представления.": "Renders a view component.",
    "\nКомпонент Notifications представляет собой контейнер для отображения всплывающих уведомлений.\n": "\nThe Notification Component is a container for manifesting conscious awareness.\n",
    "\nКомпонент Sidebar представляет собой боковое меню с возможностью гибкой настройки\n": "\nThe Sidebar component is a flexible side menu\n",
    "\nКомпонент Tooltip предоставляет всплывающую подсказку для дочерних элементов.\n": "\nThe Tooltip component provides a tooltip for child elements.\n",
    "\nКомпонент ControlsColumn предоставляет колонку с контролами.\n": "\nThe ControlsColumn component provides a column with controls.\n",
    "\nКомпонент Breadcrumbs отображает хлебные крошки.\n": "\nThe Breadcrumbs component displays breadcrumbs.\n",
    "\nКомпонент ButtonGroup отображает группу кнопок.\n": "\nThe ButtonGroup component displays a group of buttons.\n",
    "\nСсылка\n": "\nLink\n",
    "\nКомпонент для вывода текстового содержимого, с возможностью настройки тэгов, цвета и типа\n": "\nA component for displaying text content, with the ability to customize tags, colors and types\n",
    "\nКомпонент предназначен для вывода заголовков, предоставляет возможность для настройки, цвета, типа и тэга.\n": "\nThe component is designed to display headers, provides the ability to customize, color, type and tag.\n",
    "Отобразить или скрыть компонент.\nВключает \"ручной режим\", при котором можно задать логику отображения компонента извне,\nчерез измененение данного свойства.": "Show or hide the component.\nTurns on the \"manual mode\", in which you can set the logic for displaying the component from the outside\nby changing this property.",
    " Список со всеми элементами": " List with all elements",
    "  Элементы меню": " Menu Items",
    "При указании данного свойства, после нажатия на кнопку и до выполнения действия будет отображено нативное\nокно с текстом подтверждения - `window.confirm('Ваш текст')`.": "When this property is specified, after clicking the button and before performing the action, a native \nwindow with the confirmation text will be displayed - `window.confirm('Your text')`.",
    "Контент, который отобразиться, если элемент навигации будет активен": "The content that will be displayed if the navigation element is active",
    " Используется для управления раскрытием всех элементов в дереве": " Used to control the expansion of all items in the tree",
    "\nСписок с чекбоксами. Используется в формах для выбора нескольких значений.\n": "\nCheckbox list. Used in forms to select multiple values.\n",
    "Разница времени с бекендом (в микросекундах)": "Time difference with the backend (in microseconds)",
    "Временная зона бекенда": "Backend time zone",
    "Исходный язык": "Source language",
    "Переводы сообщений": "Message translations",
    "Показывать ли компонент сразу после рендера страницы": "Show the component immediately after page rendering",
    "Объект стилей для позиционирования стрелки": "Style object for arrow positioning",
    "Позиция компонента слева": "Component position on the left",
    "Позиция компонента справа": "Component position on the right",
    "Позиция компонента сверху": "Component position on top",
    "Обработчик события загрузки файлов": "File upload event handler",
    "Варианты абсолютного позиционирования": "Absolute positioning options",
    "Получение экземпляра `dayjs` с учетом временной зоны бекенда": "Getting an instance of `dayjs` considering the backend time zone",
    "Алиас для метода `translate`": "Alias for the `translate` method",
    "Перевод сообщения": "Message translation",
    "Компонент графика из библиотеки nivo": "Chart component from the nivo library",
    "Конфигурация, настройки отображения графика": "Chart display configuration and settings",
    "Данные для графика": "Data for the chart",
    "Фиксированная высота графика в пикселях": "Fixed chart height in pixels",
    "Использовать ли дефолтную конфигурацию для графика типа line": "Use default configuration for the line chart",
    "Этот компонент позволяет создавать в проекте графики разных типов. Под капотом для графиков используется библиотека nivo.\nДля работы этого компонента необходимо установить в проекте зависимости @nivo/core и пакет конкретного графика nivo, например @nivo/line.\nКомпонент графика nivo нужно передать в пропс chartComponent": "This component allows you to create various types of graphics in your project. Under the hood, the nivo library is used for charts. \nTo use this component, you need to install dependencies @nivo/core and a specific nivo chart package, for example, @nivo/line. \nPass the nivo chart component as the chartComponent prop",
    "Новое событие": "New event",
    "Календарь": "Calendar",
    "Создать": "Create",
    "Показать ещё": "Show more",
    "Неделя": "Week",
    "Месяц": "Month",
    "Пн": "Mo",
    "Вт": "Tu",
    "Ср": "We",
    "Чт": "Th",
    "Пт": "Fr",
    "Сб": "Sa",
    "Вс": "Su",
    "Компонент для представления данных коллекции в виде иерархической структуры.": "A component for representing collection data in the form of a hierarchical structure.",
    "Уникальный идентификатор,\nиспользуется для сохранения состояния открыта или закрыта ячейка": "Unique identifier \nused to save the open or closed state of a cell",
    "Включает обработку вложенных данных из items": "Enables the processing of nested data from items",
    "Callback вызываемый при нажатии на смену года или месяца в шапке Calendar": "Callback called when changing the year or month in the Calendar header",
    "Пользовательский цвет для чекбокса": "Custom color for checkbox",
    "Кастомный домен": "Custom domain",
    "Куки для режима ssr": "Cookies for SSR mode",
    "Ключ для хранения токена в куках": "Key for storing the token in cookies",
    "Url для http запросов": "URL for HTTP requests",
    "Срок хранения токена в хранилийе в днях": "Token storage duration in days",
    "Имя хранилища для токена (local, session, или cookie)": "Token storage name (local, session, or cookie)",
    "Ключ токена авторизации для локального хранилища": "Authorization token key for local storage",
    "Запрос на обновление токена авторизации": "Authorization token refresh request",
    "Хендлер для авторизации": "Authorization handler",
    "Функция, которая вызывается на закрытие соединения": "Function called on connection closure",
    "Функция, которая вызывается на отправку сообщения": "Function called on message sending",
    "Функция, которая вызывается на открытие соединения": "Function called on connection opening",
    "Массив streams": "Array of streams",
    "url для websocket": "WebSocket URL",
    "Колонки канбан доски": "Kanban board columns",
    "Идентификатор канбан доски": "Kanban board identifier",
    "Обработчик события окончания перетаскивания карточки или колонки": "Drag-and-drop card or column end event handler",
    "Метод для добавления css-класса к элементу": "Method for adding a CSS class to an element",
    "Утилита для создания css-классов по БЭМ": "Utility for creating CSS classes according to BEM",
    "Метод для соединения нескольких classNames": "Method for combining multiple classNames",
    "Метод для удаления css-класса у элемента": "Method for removing a CSS class from an element",
    "Метод, который вызывается после запроса": "Method called after a request",
    "Вызов метода delete": "Method call to delete",
    "Вызов метода get": "Method call to get",
    "Получение токена": "Token retrieval",
    "Получение конфига для axios": "Get config for axios",
    "Получение экземпляра axios": "Get axios instance",
    "Получение url по методу": "Get URL by method",
    "Метод, который можно вызвать при login": "Method callable on login",
    "Метод, который можно вызвать при logout": "Method callable on logout",
    "Вызов метода post": "Method call to post",
    "Удаление токена": "Token deletion",
    "Сбросить конфиг": "Reset configuration",
    "Вызов http-метода": "HTTP method call",
    "Изменение токена": "Token change",
    "Изменение csrf токена": "CSRF token change",
    "Получить модель": "Get model",
    "Получить тип": "Get type",
    "Форматирование модели модели": "Model formatting",
    "Форматирование названия модели": "Model name formatting",
    "Изменить модель": "Change model",
    "Изменить тип": "Change type",
    "Закрытие websocket соединения": "Close WebSocket connection",
    "Открытие websocket соединения": "Open WebSocket connection",
    "Подписка на streams": "Subscribe to streams",
    "Подписка на stream": "Subscribe to a stream",
    "Отписка от streams": "Unsubscribe from streams",
    "Отписка от stream": "Unsubscribe from a stream",
    "Отменить прослушивание метрик": "Cancel metric listening",
    "Отписаться от метрик": "Unsubscribe from metrics",
    "Провайдеры": "Providers",
    "Редьюсеры": "Reducers",
    "Хранилище": "Store",
    "Вариация HttpComponent с функционалом обновления токена авторизации": "HttpComponent variation with authorization token refresh functionality",
    "Компонент для локализации приложения. Поддерживает конфигурацию языка и временной зоны": "Component for application localization. Supports language and time zone configuration",
    "Компонент для добавления метрик в приложение (например яндекс метрики)": "Component for adding metrics to the application (e.g., Yandex.Metrics)",
    "Поменять счетчики": "Change counters",
    "Инициализация компонента": "Component initialization",
    "Старт": "Start",
    "Добавление редьюсеров": "Add reducers",
    "Конфигурация": "Configuration",
    "Метод для dispatch": "Method for dispatch",
    "Метод, который вызывается при ошибке": "Method called on error",
    "Получение состояния": "Get state",
    "Инициализация": "Initialization",
    "Инициализация хранилища": "Storage initialization",
    "Подписка": "Subscription",
    "Компонент для создания websocket взаимодействия": "Component for creating WebSocket interaction",
    "Получить значение из хранилища.": "Get value from storage",
    "Удалить значение из хранилища.": "Remove value from storage",
    "Установить значение в хранилище.": "Set value in storage",
    "Включает обработку вложенных данных из items вида [{id: 1, name: 'John', items: [...]}]": "Enables processing of nested data from items like [{id: 1, name: 'John', items: [...]}]",
    "\nКомпонент `FileField` представляет собой поле формы для загрузки файлов.\nОн использует хук `useFile` для управления состоянием файлов и выполнения операций с файлами, таких как выбор и удаление.\nКомпонент поддерживает различные варианты отображения файлов (список или стена) с помощью перечисления `FilesLayout`.\nНа backendUrl по дефолту файл отправляется в теле запроса в виде бинарного кода.\nЧтобы отправлять файл в виде form-data (например в таком виде принимает файл FileModule в библиотеке steroidsjs/nest),\nнужно передать в `FileField` пропс uploaderConfig, в котором нужно указать поле useFormData: true.\n": "The `FileField` component represents a form field for uploading files.\nIt uses the `useFile` hook to manage the state of files and perform file operations such as selection and deletion.\nThe component supports various file display options (list or wall) using the `FilesLayout` enum.\nBy default, files are sent as binary data in the request body to the backend URL.\nTo send a file as form-data (e.g., as accepted by the FileModule in the steroidsjs/nest library),\nyou need to pass the `uploaderConfig` prop to `FileField` and specify the `useFormData: true` field.\n",
    "Массив исполнителей, которых можно назначить для выполнения задачи": "Array of performers that can be assigned to a task",
    "Общий контекст обертка из библиотеки react-beautiful-dnd": "Common context wrapper from the react-beautiful-dnd library",
    "Компонент обертка для регистрации элемента который можно переместить из библиотеки react-beautiful-dnd": "Wrapper component for registering a draggable item from the react-beautiful-dnd library",
    "Компонент обертка для инициализации области куда можно переместить элемент из библиотеки react-beautiful-dnd": "Wrapper component for initializing the area where an item can be moved from the react-beautiful-dnd library",
    "Идентификатор последней созданной задачи, нужен для определения последовательности id для новых задач": "Identifier of the last created task, needed to determine the sequence of IDs for new tasks",
    "Обработчик события создания карточки": "Card creation event handler",
    "Обработчик события окончания перетаскивания карточки или колонки\nВ result передается объект с информацией о событии": "Event handler for ending card or column dragging\nThe `result` parameter contains an object with event information",
    "Обработчик события редактирования карточки": "Card editing event handler",
    "Массив тегов для задач": "Array of tags for tasks",
    "\nКомпонент в котором можно расположить различные элементы, например графики, таблицы на доске\n": "\nA component in which various elements can be placed, such as graphics, tables on a board\n",
    "Заголовок для элемента": "Title for the element",
    "Кастомная вьюшка для элемента": "Custom view for the element",
    "Элементы дашборда": "Dashboard elements",
    "Свойства для модального окна": "Properties for a modal window",
    "Параметры для групп событий": "Event group parameters",
    "Свойства для модального окна группы событий": "Properties for a modal window of event groups",
    "Функция, которая вызовется при смене типа календаря": "Function called when the calendar type changes",
    "Внутреннее описание события": "Internal event description",
    "Идентификатор": "Identifier",
    "События группы": "Event group",
    "Название группы": "Group name",
    "Идентификатор чата": "Chat identifier",
    "Данные о текущем пользователе, нужны для отправки сообщений и определения сообщений пользователя": "Data about the current user, needed for sending messages and determining user messages",
    "Коллекция сообщений": "Message collection",
    "Event sending event handler": "Event sending event handler",
    "\nКомплексный компонент календарь служит для планирования событий и их отображения в календаре.\n\nКомпонент умеет отображать события с помощью недельной сетки с шагом в 1 час,\nа также переключать отображение на сетку по месяцам с шагом 1 день.\nПрисутствует возможность добавлять в календарь события и создавать новые группы событий.\n\n": "The complex `Calendar` component is used for event planning and display in a calendar.\nThe component can display events using a weekly grid with a 1-hour interval\nand can switch to a monthly grid with a 1-day interval.\nIt also allows adding events to the calendar and creating new event groups.",
    "Этот компонент позволяет создавать в проекте графики разных типов, используя библиотеки nivo, react-vis и другие.\n Под капотом для графиков могут использоваться различные библиотеки в зависимости от предпочтений и потребностей проекта.\n Для работы с nivo графиками, необходимо установить в проекте зависимости @nivo/core и соответствующий пакет графика, например @nivo/line.\n Компонент графика, независимо от выбранной библиотеки, нужно передать в пропс chartComponent.": "This component allows creating various types of charts in the project using libraries like nivo, react-vis, and others.\nDifferent chart libraries can be used under the hood depending on project preferences and needs. To work with nivo charts, you need to install dependencies like @nivo/core and the appropriate chart package, e.g., @nivo/line. Regardless of the chosen library, you need to pass the `chartComponent` prop for the chart component.",
    "\nКомплексный компонент `Chat` предназначен для коммуникации пользователей с помощью текстовых сообщений.\n": "The complex `Chat` component is designed for user communication through text messages.\n",
    "\nКомпонент `Kanban` позволяет создать доску для управления задачами.\nКоличество столбцов задается с помощью пропа `columns`.\nЗадачи на доске можно создавать, редактировать и перемещать с визуальным отображением.\n\nДля работы этого компонента необходимо установить в проекте зависимости `react-beautiful-dnd`\nи передать в пропсы `droppableComponent`, `draggableComponent` и `dndContext`\nкомпоненты `Droppable`, `Draggable` и `DragDropContext` соответственно.\n": "The `Kanban` component allows creating a board for task management. The number of columns is set using the `columns` prop.\nTasks on the board can be created, edited, and moved with visual representation.\nTo use this component, you need to install the `react-beautiful-dnd` dependencies in the project\nand pass the `Droppable`, `Draggable`, and `DragDropContext` components as `droppableComponent`, `draggableComponent`, and `dndContext` props, respectively.",
    "\nПоле ввода почты. Этот компонент представляет собой поле ввода почты.\n\n": "Email input field. This component represents an email input field.",
    "\nСоздает список из сгруппированных полей формы.\n": "Creates a list of grouped form fields.",
    "\nКомпонент `Skeleton` представляет собой заглушку для отображения временных данных\nво время загрузки или ожидания загрузки реальных данных.\n": "The `Skeleton` component serves as a placeholder for displaying temporary data during loading or while waiting for real data.",
    "\nКомпонент `ControlsColumn` предоставляет колонку с контролами.\n": "The `ControlsColumn` component provides a column with controls.",
    "\nКомпонент для представления данных коллекции в виде иерархической структуры.\n": "A component for presenting collection data in the form of a hierarchical structure.",
    "\nС помощью компонента `Link` вы можете легко настраивать цветовую схему элементов ссылок.\n": "With the `Link` component, you can easily customize the color scheme of link elements.",
    "\nКомпонент навигации позволяет переключаться между группами связанного контента.\n\n": "The navigation component allows switching between groups of related content.",
    "Кнопки\nМогут служить в качестве настраиваемых контроллов для создания функционала": "Buttons\nCan serve as customizable controls to create functionality",
    "Фиксированная высота обертки в пикселях": "Fixed wrapper height in pixels",
    "Чекбоксы\nМогут служить в качестве настраиваемых контроллов для создания функционала": "Checkboxes\nCan serve as customizable controls to create functionality",
    "Заголовок графика": "Chart title",
    "Срок хранения токена в хранилище в днях": "",
    "Свойства для модалного окна группы событий": "",
    "Внутреннее описания события": "",
    "Кнопки\nМогут служить в качестве настаиваемых контроллов для создания функционала": "",
    "Чекбоксы\nМогут служить в качестве настаиваемых контроллов для создания функционала": "",
    "Иконка, которая отобразится слева от заголовка": "",
    "Метод, который можно вызвать при login": "",
    "Метод, который можно вызвать при logout": "",
    "Получение состояние": "",
    "\nСписок с вложенными чекбоксами. Используется в формах для создания иерархической структуры и выбора нескольких значений.\n": "",
    "\nСоздает список из сгруппированных полей формы.\nДля загрузки файлов с помощью `FileField` внутри строк `FieldList`, нужно использовать форму с флагом `useRedux`.\n": "",
    " Текущая страница, используется для корректного отображения пагинации": "",
    " Количество элементов на странице, используется для корректного отображения пагинации": "",
    " Параметры роутинга": "",
    "Расстояние вложенных элементов от родителя для каждого уровня": "",
    "Первичный ключ для доступа к вложенным элементам": "",
    "Устанавливать ли фокус и показывать календарь сразу после рендера страницы": "",
    "Заголовок для колонки таблицы": "",
    "Будет ли отображён item?": "",
    "Устанавливать ли фокус и показывать панель времени сразу после рендера страницы": "",
    "Флаг, определяющий раскрывать вложенные элементы по клику на весь элемент или только на иконку": ""
}